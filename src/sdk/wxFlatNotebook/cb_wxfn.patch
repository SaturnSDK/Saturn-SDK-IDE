--- ..\..\..\..\wxFlatNotebook\src\wxFlatNotebook\wxFlatNotebook.cpp	Fri Jan 06 01:39:55 2006
+++ wxFlatNotebook.cpp	Fri Jan 06 20:21:44 2006
@@ -10,7 +10,7 @@
 // Licence:     wxWindows license <http://www.wxwidgets.org/licence3.txt>
 ///////////////////////////////////////////////////////////////////////////////
 
-#include <wx/wxFlatNotebook/wxFlatNotebook.h>
+#include "wxFlatNotebook.h"
 #include <algorithm>
 #include <wx/tooltip.h>
 #include <wx/tipwin.h>
@@ -21,6 +21,7 @@
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_FLATNOTEBOOK_PAGE_CHANGED)
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_FLATNOTEBOOK_PAGE_CHANGING)
 DEFINE_EVENT_TYPE(wxEVT_COMMAND_FLATNOTEBOOK_PAGE_CLOSING) 
+DEFINE_EVENT_TYPE(wxEVT_COMMAND_FLATNOTEBOOK_CONTEXT_MENU)
 
 IMPLEMENT_DYNAMIC_CLASS(wxFlatNotebook, wxPanel)
 
@@ -75,6 +76,13 @@
 
 void wxFlatNotebook::AddPage(wxWindow* window, const wxString& caption, const bool selected, const int imgindex)
 {
+    // sanity check
+    if (!window)
+        return;
+
+    // reparent the window to us
+    window->Reparent(this);
+
 	// Add tab
 	bool bSelected = selected || m_windows.empty();
 	int curSel = m_pages->GetSelection();
@@ -144,6 +152,13 @@
 
 bool wxFlatNotebook::InsertPage(size_t index, wxWindow* page, const wxString& text, bool select, const int imgindex)
 {
+    // sanity check
+    if (!page)
+        return false;
+
+    // reparent the window to us
+    page->Reparent(this);
+
 	// Insert tab
 	bool bSelected = select || m_windows.empty();
 	int curSel = m_pages->GetSelection();
@@ -225,11 +240,13 @@
 	m_pages->DoSetSelection(page);
 }
 
-void wxFlatNotebook::DeletePage(size_t page)
+void wxFlatNotebook::DeletePage(size_t page, bool notify)
 {
 	if(page >= m_windows.size())
 		return;
 
+    if (notify)
+    {
 	// Fire a closing event
 	wxFlatNotebookEvent event(wxEVT_COMMAND_FLATNOTEBOOK_PAGE_CLOSING, GetId());
 	event.SetSelection((int)page);
@@ -239,6 +256,7 @@
 	// The event handler allows it?
     if (!event.IsAllowed())
         return;
+    }
 
 	Freeze();
 
@@ -252,14 +270,14 @@
 		m_mainSizer->Detach(pageRemoved);
 	}
 
-	// Now we can destroy it; in wxWidgets use Destroy instead of delete
-	pageRemoved->Destroy();
-
 	// Remove it from the array as well
 	std::vector<wxWindow*>::iterator iter = std::find(m_windows.begin(), m_windows.end(), pageRemoved);
 	if(iter != m_windows.end())
 		m_windows.erase(iter);
 
+	// Now we can destroy it; in wxWidgets use Destroy instead of delete
+	pageRemoved->Destroy();
+
 	Thaw();
 
 	m_pages->DoDeletePage(page);
@@ -304,6 +322,16 @@
 	return m_windows[page];
 }
 
+int wxFlatNotebook::GetPageIndex(wxWindow* win) const
+{
+    for (size_t i = 0; i < m_windows.size(); ++i)
+    {
+        if (m_windows[i] == win)
+            return (int)i;
+    }
+    return -1;
+}
+
 int wxFlatNotebook::GetSelection() const 
 { 
 	return m_pages->GetSelection(); 
@@ -391,11 +419,13 @@
 	return m_pages->m_nStyle;
 }
 
-bool wxFlatNotebook::RemovePage(size_t page)
+bool wxFlatNotebook::RemovePage(size_t page, bool notify)
 {
 	if(page >= m_windows.size())
 		return false;
 
+    if (notify)
+    {
 	// Fire a closing event
 	wxFlatNotebookEvent event(wxEVT_COMMAND_FLATNOTEBOOK_PAGE_CLOSING, GetId());
 	event.SetSelection((int)page);
@@ -405,6 +435,7 @@
 	// The event handler allows it?
     if (!event.IsAllowed())
         return false;
+    }
 
 	Freeze();
 
@@ -497,12 +528,12 @@
 wxPageContainer::wxPageContainer(wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style)
 : m_ImageList(NULL) 
 , m_iActivePage(-1)
+, m_bHoverX(false)
 , m_bHoverLeftArrow(false)
 , m_bHoverRightArrow(false)
-, m_bHoverX(false)
+, m_pDropTarget(NULL)
 , m_pParent(parent)
 , m_pRightClickMenu(NULL)
-, m_pDropTarget(NULL)
 {
 	m_colorTo = wxColor(255, 255, 255);
 	m_colorFrom   = wxColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE));
@@ -828,7 +859,9 @@
 	{
 		m_iActivePage = (int)m_pagesInfoVec.size();
 	}
-	m_pagesInfoVec.push_back(wxPageInfo(caption, imgindex));
+	wxPageInfo pg(caption, imgindex);
+	pg.SetPosition(wxPoint(1,1));
+	m_pagesInfoVec.push_back(pg);
 	Refresh();
 }
 
@@ -838,8 +871,10 @@
 	{
 		m_iActivePage = (int)m_pagesInfoVec.size();
 	}
+	wxPageInfo pg(text, imgindex);
+	pg.SetPosition(wxPoint(1,1));
 	std::vector<wxPageInfo>::iterator iter = m_pagesInfoVec.begin() + index;
-	m_pagesInfoVec.insert(iter, wxPageInfo(text, imgindex));
+	m_pagesInfoVec.insert(iter, pg);
 	Refresh();
 	return true;
 }
@@ -862,9 +897,16 @@
 	{
 	case wxFNB_TAB:
 		{
+			wxFlatNotebookEvent event(wxEVT_COMMAND_FLATNOTEBOOK_PAGE_CLOSING, GetParent()->GetId());
+			event.SetSelection(tabIdx);
+			event.SetEventObject(GetParent());
+			GetParent()->GetEventHandler()->ProcessEvent(event);
+			if (event.IsAllowed())
+			{
 			// Set the current tab to be active
 			SetSelection((size_t)tabIdx);
-			DeletePage((size_t)tabIdx);
+                DeletePage((size_t)tabIdx, false);
+			}
 			break;
 		}
 	default:
@@ -875,24 +917,34 @@
 
 void wxPageContainer::OnRightDown(wxMouseEvent& event)
 {
-	if(m_pRightClickMenu)
-	{
 		wxPageInfo pgInfo;
 		int tabIdx;
 		int where = HitTest(event.GetPosition(), pgInfo, tabIdx);
 		switch(where)
 		{
 		case wxFNB_TAB:
+        {
 			// Set the current tab to be active
 			SetSelection((size_t)tabIdx);
 
-			// Popup the right click menu
+            // If the owner has defined a context menu for the tabs,
+            // popup the right click menu
+            if (m_pRightClickMenu)
 			PopupMenu(m_pRightClickMenu);
+            else
+            {
+                // send a message to popup a custom menu
+                wxFlatNotebookEvent event(wxEVT_COMMAND_FLATNOTEBOOK_CONTEXT_MENU, GetParent()->GetId());
+                event.SetSelection((int)tabIdx);
+                event.SetOldSelection((int)m_iActivePage);
+                event.SetEventObject(GetParent());
+                GetParent()->GetEventHandler()->ProcessEvent(event);
+            }
+        }
 			break;
 		default:
 			break;
 		}
-	}
 	event.Skip();
 }
 
@@ -966,7 +1018,8 @@
 			event.SetSelection(m_iActivePage);
 			event.SetEventObject(GetParent());
 			GetParent()->GetEventHandler()->ProcessEvent(event);
-			DeletePage((size_t)m_iActivePage);
+			if (event.IsAllowed())
+                DeletePage((size_t)m_iActivePage, false);
 			break;
 		}
 	}
@@ -1068,10 +1121,10 @@
 	}
 }
 
-void wxPageContainer::DeletePage(size_t page)
+void wxPageContainer::DeletePage(size_t page, bool notify)
 {
 	wxFlatNotebook* book = (wxFlatNotebook*)GetParent();
-	book->DeletePage(page);
+	book->DeletePage(page, notify);
 	book->Refresh();
 }
 
@@ -1705,3 +1758,4 @@
 	}
 	return counter;
 }
+
