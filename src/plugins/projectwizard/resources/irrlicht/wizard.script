////////////////////////////////////////////////////////////////////////////////
//
// Irrlicht project wizard
//
////////////////////////////////////////////////////////////////////////////////

// globals
wxString IrrlichtPath;

void BeginWizard()
{
    wxString intro_msg = "Welcome to the new Irrlicht project wizard!\n\n"
                        "This wizard will guide you to create a new project\n"
                        "using the Irrlicht 3D real-time engine.\n\n"
                        "When you 're ready to proceed, please click \"Next\"...";

	Wizard.AddIntroPage(intro_msg);
	Wizard.AddProjectPathPage();
	Wizard.AddPage("IrrPath");
	Wizard.AddCompilerPage("", "*", true, true);
}

////////////////////////////////////////////////////////////////////////////////
// Irrlicht's path page
////////////////////////////////////////////////////////////////////////////////

void OnEnter_IrrPath(bool fwd)
{
	if (fwd)
	{
        wxString dir = Wizard.GetTextControlValue("txtIrrPath");
        if (dir.length() == 0)
        {
            // first time here, set default value
            dir = ConfigManager.Read("/irrlicht_project_wizard/path", "");
            if (dir.IsEmpty()) // try global var
                dir = ReplaceMacros("$(#irr)", true);
            Wizard.SetTextControlValue("txtIrrPath", dir);
        }
	}
}

bool OnLeave_IrrPath(bool fwd)
{
	if (fwd)
	{
	    wxString dir = Wizard.GetTextControlValue("txtIrrPath");
		if (!IO.DirectoryExists(dir))
		{
            ShowError("Please select a valid path to Irrlicht...");
            return false;
		}
        if (!IO.FileExists(dir + "/include/irrlicht.h"))
        {
            ShowError("The path you entered seems valid, but this wizard "
                    "can't locate Irrlicht's files in it...");
            return false;
        }
        IrrlichtPath = dir;
        ConfigManager.Write("/irrlicht_project_wizard/path", dir, true);
	}
	return true;
}

void OnClick_btnIrrPathBrowse()
{
    wxString dir = Wizard.GetTextControlValue("txtIrrPath");
    dir = IO.SelectDirectory("Please select Irrlicht's top-level folder", dir, false);

    if (IO.DirectoryExists(dir))
        Wizard.SetTextControlValue("txtIrrPath", dir);
}

// return the files this project contains
bool GetFilesDir(wxString& out result)
{
    result = "irrlicht/files";
    return true;
}

// setup the already created project
bool SetupProject(Project@ project)
{
    // set project options
    
    // calculate the final lib directory, based on current platform and compiler
    wxString IrrlichtLibDir;
    if (PLATFORM == PLATFORM_MSW)
    {
        if (Wizard.GetCompilerID() == "msvctk")
            IrrlichtLibDir = "Win32-VisualStudio";
        else if (Wizard.GetCompilerID() == "gcc")
            IrrlichtLibDir = "Win32-gcc";
        else
        {
            IrrlichtLibDir = "Win32-gcc"; // fallback is GCC
            ShowWarning("This wizard only knows how to setup a project for GCC (windows+linux) or Free Microsoft VisualC++ Toolkit 2003.\n"
                        "Continuing but you 're on your own...");
        }
    }
    else
        IrrlichtLibDir = "Linux";

    // set compiler/linker search paths
    project.AddIncludeDir(IrrlichtPath + "/include");
    project.AddLibDir(IrrlichtPath + "/lib/" + IrrlichtLibDir);

    // add link libraries
    project.AddLinkLib("Irrlicht");
    if (PLATFORM == PLATFORM_MSW)
    {
        project.AddLinkLib("opengl32");
        project.AddLinkLib("glu32");
        project.AddLinkLib("gdi32");
    }
    else
    {
        project.AddLinkLib("GL");
        project.AddLinkLib("GLU");
        project.AddLinkLib("Xxf86vm");
    }

    // enable compiler warnings (project-wide)
    WarningsOn(Cast_CompileOptionsBase(project), Wizard.GetCompilerID());

    // Debug
    BuildTarget@ target = project.GetBuildTarget(Wizard.GetDebugName());
    if (target != null)
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        target.SetWorkingDir(IrrlichtPath + "/bin/" + IrrlichtLibDir);
        // enable generation of debugging symbols for target
        DebugSymbolsOn(Cast_CompileOptionsBase(target), Wizard.GetCompilerID());
    }

    // Release
    @target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (target != null)
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        target.SetWorkingDir(IrrlichtPath + "/bin/" + IrrlichtLibDir);
        // enable optimizations for target
        OptimizationsOn(Cast_CompileOptionsBase(target), Wizard.GetCompilerID());
    }

    return true;
}
