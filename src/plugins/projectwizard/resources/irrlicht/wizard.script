////////////////////////////////////////////////////////////////////////////////
//
// Irrlicht project wizard
//
////////////////////////////////////////////////////////////////////////////////

// globals
IrrlichtPath <- _T("");

function BeginWizard()
{
    local intro_msg = _T("Welcome to the new Irrlicht project wizard!\n\n" +
                        "This wizard will guide you to create a new project\n" +
                        "using the Irrlicht 3D real-time engine.\n\n" +
                        "When you 're ready to proceed, please click \"Next\"...");

	Wizard.AddIntroPage(intro_msg);
	Wizard.AddProjectPathPage();
	Wizard.AddPage(_T("IrrPath"));
	Wizard.AddCompilerPage(_T(""), _T("*"), true, true);
}

////////////////////////////////////////////////////////////////////////////////
// Irrlicht's path page
////////////////////////////////////////////////////////////////////////////////

function OnEnter_IrrPath(fwd)
{
	if (fwd)
	{
        local dir = Wizard.GetTextControlValue(_T("txtIrrPath"));
        if (dir.length() == 0)
        {
            // first time here, set default value
            dir = ConfigManager.Read(_T("/irrlicht_project_wizard/path"), _T(""));
            if (dir.IsEmpty() && GetUserVariableManager().Exists(_T("#irr"))) // try global var
                dir = ReplaceMacros(_T("$(#irr)"), true);
            Wizard.SetTextControlValue(_T("txtIrrPath"), dir);
        }
	}
}

function OnLeave_IrrPath(fwd)
{
	if (fwd)
	{
	    local dir = Wizard.GetTextControlValue(_T("txtIrrPath"));
		if (!IO.DirectoryExists(dir))
		{
            ShowError(_T("Please select a valid path to Irrlicht..."));
            return false;
		}
        if (!IO.FileExists(dir + _T("/include/irrlicht.h")))
        {
            ShowError(_T("The path you entered seems valid, but this wizard " +
                    "can't locate Irrlicht's files in it..."));
            return false;
        }
        IrrlichtPath = dir;
        ConfigManager.Write(_T("/irrlicht_project_wizard/path"), dir, true);
	}
	return true;
}

function OnClick_btnIrrPathBrowse()
{
    local dir = Wizard.GetTextControlValue(_T("txtIrrPath"));
    dir = IO.SelectDirectory(_T("Please select Irrlicht's top-level folder"), dir, false);

    if (IO.DirectoryExists(dir))
        Wizard.SetTextControlValue(_T("txtIrrPath"), dir);
}

// return the files this project contains
function GetFilesDir()
{
    return _T("irrlicht/files");
}

// setup the already created project
function SetupProject(project)
{
    // set project options

    // calculate the final lib directory, based on current platform and compiler
    local IrrlichtLibDir;
    if (PLATFORM == PLATFORM_MSW)
    {
        if (Wizard.GetCompilerID().Matches(_T("msvctk")))
            IrrlichtLibDir = _T("Win32-VisualStudio");
        else if (Wizard.GetCompilerID().Matches(_T("gcc")))
            IrrlichtLibDir = _T("Win32-gcc");
        else
        {
            IrrlichtLibDir = _T("Win32-gcc"); // fallback is GCC
            ShowWarning(_T("This wizard only knows how to setup a project for GCC (windows+linux) or Free Microsoft VisualC++ Toolkit 2003.\n" +
                        "Continuing but you 're on your own..."));
        }
    }
    else
        IrrlichtLibDir = _T("Linux");

    // set compiler/linker search paths
    project.AddIncludeDir(IrrlichtPath + _T("/include"));
    project.AddLibDir(IrrlichtPath + _T("/lib/") + IrrlichtLibDir);

    // add link libraries
    project.AddLinkLib(_T("Irrlicht"));
    if (PLATFORM == PLATFORM_MSW)
    {
        project.AddLinkLib(_T("opengl32"));
        project.AddLinkLib(_T("glu32"));
        project.AddLinkLib(_T("gdi32"));
    }
    else
    {
        project.AddLinkLib(_T("GL"));
        project.AddLinkLib(_T("GLU"));
        project.AddLinkLib(_T("Xxf86vm"));
    }

    // enable compiler warnings (project-wide)
    WarningsOn(project, Wizard.GetCompilerID());

    // Debug
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        target.SetWorkingDir(IrrlichtPath + _T("/bin/") + IrrlichtLibDir);
        // enable generation of debugging symbols for target
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }

    // Release
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        target.SetWorkingDir(IrrlichtPath + _T("/bin/") + IrrlichtLibDir);
        // enable optimizations for target
        OptimizationsOn(target, Wizard.GetCompilerID());
    }

    return true;
}
