////////////////////////////////////////////////////////////////////////////////
//
// Ogre3D project wizard
//
// TODO: make it work with both available SDKs: MinGW & MSVS
//
////////////////////////////////////////////////////////////////////////////////

// globals
wxString OgrePath;

void BeginWizard()
{
    wxString intro_msg = "Welcome to the new OGRE project wizard!\n\n"
                        "This wizard will guide you to create a new project\n"
                        "using the OGRE 3D rendering engine.\n\n"
                        "When you 're ready to proceed, please click \"Next\"...";

	Wizard.AddIntroPage(intro_msg);
	Wizard.AddProjectPathPage();
	Wizard.AddPage("OgrePath");
	Wizard.AddCompilerPage("");
}

////////////////////////////////////////////////////////////////////////////////
// OGRE's path page
////////////////////////////////////////////////////////////////////////////////

void OnEnter_OgrePath(bool fwd)
{
	if (fwd)
	{
        wxString dir = Wizard.GetTextControlValue("txtOgrePath");
        if (dir.IsEmpty())
        {
            // first time here, set default value
            dir = ConfigManager.Read("/ogre_project_wizard/path", "");
            if (dir.IsEmpty()) // try env var
                dir = ReplaceMacros("$(OGRE_HOME)", true);
            Wizard.SetTextControlValue("txtOgrePath", dir);
        }
	}
}

bool OnLeave_OgrePath(bool fwd)
{
	if (fwd)
	{
	    wxString dir = Wizard.GetTextControlValue("txtOgrePath");
		if (!IO.DirectoryExists(dir))
		{
            ShowError("Please select a valid path to OGRE...");
            return false;
		}
        if (!IO.FileExists(dir + "/include/OGRE.h"))
        {
            ShowError("The path you entered seems valid, but this wizard "
                    "can't locate OGRE's files in it...");
            return false;
        }
        OgrePath = dir;
        ConfigManager.Write("/ogre_project_wizard/path", dir, true);
	}
	return true;
}

void OnClick_btnOgrePathBrowse()
{
    wxString dir = Wizard.GetTextControlValue("txtOgrePath");
    dir = IO.SelectDirectory("Please select the OGRE SDK folder", dir, false);

    if (IO.DirectoryExists(dir))
        Wizard.SetTextControlValue("txtOgrePath", dir);
}

// return the files this project contains
bool GetFilesDir(wxString& out result)
{
    result = "ogre/files";
    return true;
}

// setup the already created project
bool SetupProject(Project@ project)
{
    // set project options
    
    project.AddIncludeDir(OgrePath + "/include");
    project.AddIncludeDir(OgrePath + "/samples/include");
    project.AddIncludeDir(OgrePath + "/samples/refapp/include");
    project.AddLibDir(OgrePath + "/lib");

    if (PLATFORM == PLATFORM_MSW)
    {
        project.AddLinkLib("opengl32");
        project.AddLinkLib("gdi32");
        project.AddLinkLib("user32");
        project.AddLinkLib("kernel32");
    }
    else
    {
        project.AddLinkLib("GL");
    }

    // enable compiler warnings (project-wide)
    WarningsOn(Cast_CompileOptionsBase(project), Wizard.GetCompilerID());
    // enable C++ exceptions (project-wide)
    CppExceptionsOn(Cast_CompileOptionsBase(project), Wizard.GetCompilerID());

    // Debug
    BuildTarget@ target = project.GetBuildTarget(Wizard.GetDebugName());
    if (target != null)
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        target.SetWorkingDir(OgrePath + "/bin/Debug");
        target.AddLibDir(OgrePath + "/bin/debug");
        target.AddLinkLib("OgreMain_d");
        // enable generation of debugging symbols for target
        DebugSymbolsOn(Cast_CompileOptionsBase(target), Wizard.GetCompilerID());
    }

    // Release
    @target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (target != null)
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        target.SetWorkingDir(OgrePath + "/bin/Release");
        target.AddLibDir(OgrePath + "/bin/release");
        target.AddLinkLib("OgreMain");
        // enable optimizations for target
        OptimizationsOn(Cast_CompileOptionsBase(target), Wizard.GetCompilerID());
    }
    return true;
}
