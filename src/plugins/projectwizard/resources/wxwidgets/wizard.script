////////////////////////////////////////////////////////////////////////////////
//
// Ogre3D project wizard
//
////////////////////////////////////////////////////////////////////////////////

// globals
wxString WxPath;
// targets
bool WantPCH;
// wx settings
bool IsDLL;
bool IsMonolithic;
bool IsUnicode;
bool IsDebug;
wxString Configuration;

wxString LibPath;
wxString LibName;

void BeginWizard()
{
    wxString intro_msg = "Welcome to the new wxWidgets 2.6.x project wizard!\n\n"
                        "This wizard will guide you to create a new project\n"
                        "using the wxWidgets cross-platform GUI library.\n\n"
                        "When you 're ready to proceed, please click \"Next\"...";

	Wizard.AddIntroPage(intro_msg);
	Wizard.AddProjectPathPage();
	Wizard.AddPage("WxPath");
	// we need the compiler selection before wx settings, because we 'll have
	// to validate the settings. To do this we must know the compiler beforehand...
	Wizard.AddCompilerPage("", "*", true, true);
    if (PLATFORM == PLATFORM_MSW)
        Wizard.AddPage("WxConf"); // only for windows
}

////////////////////////////////////////////////////////////////////////////////
// wxWidgets' path page
////////////////////////////////////////////////////////////////////////////////

void OnEnter_WxPath(bool fwd)
{
	if (fwd)
	{
        wxString dir = Wizard.GetTextControlValue("txtWxPath");
        if (dir.length() == 0)
        {
            // first time here, set default value
            dir = ConfigManager.Read("/wx_project_wizard/path", "");
            if (dir.IsEmpty()) // try global var
                dir = ReplaceMacros("$(#wx)", true);
            Wizard.SetTextControlValue("txtWxPath", dir);
        }
	}
}

bool OnLeave_WxPath(bool fwd)
{
	if (fwd)
	{
	    wxString dir = Wizard.GetTextControlValue("txtWxPath");
		if (!IO.DirectoryExists(dir))
		{
            ShowError("Please select a valid path to wxWidgets...");
            return false;
		}
        if (!IO.FileExists(dir + "/include/wx/wx.h"))
        {
            ShowError("The path you entered seems valid, but this wizard "
                    "can't locate wxWidgets' files in it...");
            return false;
        }

        // see if it matches the global var. if it does, use the var instead...
        wxString gvar = ReplaceMacros("$(#wx)", true);
        if (gvar == dir)
            dir = gvar;
        WxPath = dir;
        ConfigManager.Write("/wx_project_wizard/path", dir, true);
	}
	return true;
}

void OnClick_btnWxPathBrowse()
{
    wxString dir = Wizard.GetTextControlValue("txtWxPath");
    dir = IO.SelectDirectory("Please select wxWidgets' top-level folder", dir, false);

    if (IO.DirectoryExists(dir))
        Wizard.SetTextControlValue("txtWxPath", dir);
}

////////////////////////////////////////////////////////////////////////////////
// wxWidgets' settings
////////////////////////////////////////////////////////////////////////////////

void OnEnter_WxConf(bool fwd)
{
	if (fwd)
	{
	    Wizard.CheckCheckbox("chkWxConfDLL", ConfigManager.Read("/wx_project_wizard/dll", true));
	    Wizard.CheckCheckbox("chkWxConfMono", ConfigManager.Read("/wx_project_wizard/monolithic", true));
	    Wizard.CheckCheckbox("chkWxConfUni", ConfigManager.Read("/wx_project_wizard/unicode", true));
	    Wizard.CheckCheckbox("chkWxConfDebug", ConfigManager.Read("/wx_project_wizard/debug", false));
	    Wizard.CheckCheckbox("chkWxConfPCH", ConfigManager.Read("/wx_project_wizard/pch", true));
	    Wizard.SetTextControlValue("txtWxConfConfig", ConfigManager.Read("/wx_project_wizard/configuration", ""));
	}
}

bool OnLeave_WxConf(bool fwd)
{
	if (fwd)
	{
	    IsDLL = Wizard.IsCheckboxChecked("chkWxConfDLL");
	    IsMonolithic = Wizard.IsCheckboxChecked("chkWxConfMono");
	    IsUnicode = Wizard.IsCheckboxChecked("chkWxConfUni");
	    IsDebug = Wizard.IsCheckboxChecked("chkWxConfDebug");
	    WantPCH = Wizard.IsCheckboxChecked("chkWxConfPCH");
        Configuration = Wizard.GetTextControlValue("txtWxConfConfig");

	    // validate settings
	    wxString lib_prefix;
	    wxString lib_suffix;
	    wxString lib = WxPath + "/lib/";
	    if (Wizard.GetCompilerID() == "gcc")
	    {
            lib += "gcc_";
            lib_prefix = "lib";
            lib_suffix = ".a";
	    }
	    else if (Wizard.GetCompilerID() == "msvctk")
	    {
            lib += "vc_";
            lib_prefix = "";
            lib_suffix = ".lib";
	    }

        if (IsDLL)
            lib += "dll";

        lib += Configuration;

        // at this point we have the full path to the link libraries
        LibPath = lib;

        lib += "/";

        wxString lib_name = lib_prefix;

        if (IsMonolithic)
            lib_name += "wxmsw26";
        else
            lib_name += "wxcore26"; // TODO: how are non-monolithic files named???

        if (IsUnicode)
            lib_name += "u";

        if (IsDebug)
            lib_name += "d";

        lib_name += lib_suffix;

        LibName = lib_name;

        // we can finally check for existence :)
        if (!IO.FileExists(lib + lib_name))
        {
            // alarm!
            if (Message("A matching configuration cannot be found in the wxWidgets directory "
                        "you specified.\n"
                        "This means that your project will not build.\n\n"
                        "Are you sure you want to continue with these settings?",
                        "Warning", wxYES_NO) == wxID_NO)
            {
                return false;
            }
        }
	}

    if (Wizard.GetCompilerID() != "gcc" && WantPCH)
    {
        ShowWarning("Precompiled headers currently only work for GNU GCC.\n"
                    "They are disabled for all other compilers.");
        WantPCH = false;
        Wizard.CheckCheckbox("chkConfPCH", false);
    }
	return true;
}

// return the files this project contains
bool GetFilesDir(wxString& out result)
{
    result = "wxwidgets/common";
    if (WantPCH)
        result += ";wxwidgets/pch";
    return true;
}

// setup the already created project
bool SetupProject(Project@ project)
{
    // set project options
    if (PLATFORM != PLATFORM_MSW)
    {
        project.AddCompilerOption("`wx-config --cflags`");
        project.AddLinkerOption("`wx-config --libs`");
    }
    else
    {
        project.AddIncludeDir(WxPath + "/include");
        wxString libdir = LibPath + "/msw";
        if (IsUnicode)
            libdir += "u";
        if (IsDebug)
            libdir += "d";
        project.AddIncludeDir(libdir);
        project.AddIncludeDir(WxPath + "/contrib/include");
        project.AddLibDir(LibPath);
        project.AddLinkLib(LibName);
        project.AddLinkLib("gdi32");
        if (Wizard.GetCompilerID() == "msvctk")
        {
            project.AddCompilerOption("/D__WXMSW__");
            if (IsDLL)
                project.AddCompilerOption("/DWXUSINGDLL");
            if (IsUnicode)
                project.AddCompilerOption("/DwxUSE_UNICODE");
        }
        else
        {
            project.AddCompilerOption("-pipe");
            project.AddCompilerOption("-mthreads");
            project.AddCompilerOption("-D__GNUWIN32__");
            project.AddCompilerOption("-D__WXMSW__");
            if (IsDLL)
                project.AddCompilerOption("-DWXUSINGDLL");
            if (IsUnicode)
                project.AddCompilerOption("-DwxUSE_UNICODE");
            if (WantPCH)
            {
                project.SetModeForPCH(pchSourceDir); // pch dir
//                project.AddCompilerOption("-Winvalid-pch");
                project.AddCompilerOption("-include wx_pch.h");
                project.AddCompilerOption("-DUSE_PCH");
            }
        }
    }

    // enable compiler warnings (project-wide)
    WarningsOn(Cast_CompileOptionsBase(project), Wizard.GetCompilerID());

    // Debug
    BuildTarget@ target = project.GetBuildTarget(Wizard.GetDebugName());
    if (target != null)
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable generation of debugging symbols for target
        DebugSymbolsOn(Cast_CompileOptionsBase(target), Wizard.GetCompilerID());
    }

    // Release
    @target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (target != null)
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable optimizations for target
        OptimizationsOn(Cast_CompileOptionsBase(target), Wizard.GetCompilerID());
    }

    return true;
}
