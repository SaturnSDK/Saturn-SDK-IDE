////////////////////////////////////////////////////////////////////////////////
//
// wxWidgets project wizard
//
////////////////////////////////////////////////////////////////////////////////

// globals
WxPath <- _T("");
WantPCH <- false;
IsDLL <- false;
IsMonolithic <- false;
IsUnicode <- false;
IsDebug <- false;
Configuration <- _T("");
LibPath <- _T("");
LibName <- _T("");

function BeginWizard()
{
    local intro_msg = _T("Welcome to the new wxWidgets 2.6.x project wizard!\n\n" +
                        "This wizard will guide you to create a new project\n" +
                        "using the wxWidgets cross-platform GUI library.\n\n" +
                        "When you 're ready to proceed, please click \"Next\"...");

    local wxpath_msg = _T("Please select the location of wxWidgets on your computer.\n" +
                            "This is the top-level folder where wxWidgets was unpacked.\n" +
                            "To help you, this folder must contain the subfolders\n" +
                            "\"include\" and \"lib\".");

    Wizard.AddInfoPage(_T("WxIntro"), intro_msg);
    Wizard.AddProjectPathPage();
    if (PLATFORM == PLATFORM_MSW)
        Wizard.AddGenericSelectPathPage(_T("WxPath"), wxpath_msg, _T("wxWidgets' location:"), _T("$(#wx)"));
    // we need the compiler selection before wx settings, because we 'll have
    // to validate the settings. To do this we must know the compiler beforehand...
    Wizard.AddCompilerPage(_T(""), _T("*"), true, true);
    if (PLATFORM == PLATFORM_MSW)
        Wizard.AddPage(_T("WxConf")); // only for windows
    else
        Wizard.AddPage(_T("WxConfUnix")); // just PCH option
}

////////////////////////////////////////////////////////////////////////////////
// wxWidgets' path page
////////////////////////////////////////////////////////////////////////////////

function OnLeave_WxPath(fwd)
{
    if (fwd)
    {
        local dir         = Wizard.GetTextControlValue(_T("txtFolder"));
        local dir_nomacro = ReplaceMacros(dir, true);
        if (!IO.FileExists(dir_nomacro + _T("/include/wx/wx.h")))
        {
            ShowError(_T("The path you entered seems valid, but this wizard " +
                    "can't locate wxWidgets' files in it..."));
            return false;
        }

        // see if it matches the global var. if it does, use the var instead...
        if (GetUserVariableManager().Exists(_T("#wx")))
        {
            local gvar = ReplaceMacros(_T("$(#wx)"), true);
            if (gvar.Matches(dir_nomacro))
                dir = gvar;
        }
        WxPath = dir;
    }
    return true;
}

////////////////////////////////////////////////////////////////////////////////
// wxWidgets' settings
////////////////////////////////////////////////////////////////////////////////

function OnEnter_WxConf(fwd)
{
    if (fwd)
    {
        Wizard.CheckCheckbox(_T("chkWxConfDLL"), ConfigManager.Read(_T("/wx_project_wizard/dll"), true));
        Wizard.CheckCheckbox(_T("chkWxConfMono"), ConfigManager.Read(_T("/wx_project_wizard/monolithic"), true));
        Wizard.CheckCheckbox(_T("chkWxConfUni"), ConfigManager.Read(_T("/wx_project_wizard/unicode"), true));
        Wizard.CheckCheckbox(_T("chkWxConfDebug"), ConfigManager.Read(_T("/wx_project_wizard/debug"), false));
        Wizard.CheckCheckbox(_T("chkWxConfPCH"), ConfigManager.Read(_T("/wx_project_wizard/pch"), true));
        Wizard.SetTextControlValue(_T("txtWxConfConfig"), ConfigManager.Read(_T("/wx_project_wizard/configuration"), _T("")));
    }
    return true;
}

function OnLeave_WxConf(fwd)
{
    if (fwd)
    {
        IsDLL = Wizard.IsCheckboxChecked(_T("chkWxConfDLL"));
        IsMonolithic = Wizard.IsCheckboxChecked(_T("chkWxConfMono"));
        IsUnicode = Wizard.IsCheckboxChecked(_T("chkWxConfUni"));
        IsDebug = Wizard.IsCheckboxChecked(_T("chkWxConfDebug"));
        WantPCH = Wizard.IsCheckboxChecked(_T("chkWxConfPCH"));
        Configuration = Wizard.GetTextControlValue(_T("txtWxConfConfig"));

        // validate settings
        local lib_prefix;
        local lib_suffix;
        local lib = WxPath + _T("/lib/");
        if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("gcc*")))
        {
            lib = lib + _T("gcc_");
            lib_prefix = _T("lib");
            lib_suffix = _T(".a");
        }
        else if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("msvc*")))
        {
            lib = lib + _T("vc_");
            lib_prefix = _T("");
            lib_suffix = _T(".lib");
        }

        if (IsDLL)
            lib = lib + _T("dll");
        else
            lib = lib + _T("lib");

        lib = lib + Configuration;

        // at this point we have the full path to the link libraries
        LibPath = lib;

        lib = lib + _T("/");

        local lib_name = lib_prefix;

        if (IsMonolithic)
            lib_name = lib_name + _T("wxmsw26");
        else
            lib_name = lib_name + _T("wxcore26"); // TODO: how are non-monolithic files named???

        if (IsUnicode)
            lib_name = lib_name + _T("u");

        if (IsDebug)
            lib_name = lib_name + _T("d");

        lib_name = lib_name + lib_suffix;

        LibName = lib_name;

        // we can finally check for existence :)
        if (!IO.FileExists(lib + lib_name))
        {
            // alarm!
            if (Message(_T("A matching configuration cannot be found in the wxWidgets directory " +
                        "you specified.\n" +
                        "This means that your project will not build.\n\n" +
                        "Are you sure you want to continue with these settings?"),
                        _T("Warning"), wxYES_NO) == wxID_NO)
            {
                return false;
            }
        }
    }

    if (!GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("gcc*")) && WantPCH)
    {
        ShowWarning(_T("Precompiled headers currently only work for GNU GCC.\n" +
                    "They are disabled for all other compilers."));
        WantPCH = false;
        Wizard.CheckCheckbox(_T("chkConfPCH"), false);
    }
    return true;
}

////////////////////////////////////////////////////////////////////////////////
// wxWidgets' settings (unix page)
////////////////////////////////////////////////////////////////////////////////

function OnEnter_WxConfUnix(fwd)
{
    if (fwd)
    {
        Wizard.CheckCheckbox(_T("chkWxConfPCH"), ConfigManager.Read(_T("/wx_project_wizard/pch"), true));
    }
    return true;
}

function OnLeave_WxConfUnix(fwd)
{
    if (fwd)
    {
        WantPCH = Wizard.IsCheckboxChecked(_T("chkWxConfPCH"));
    }

    if (!GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("gcc*")) && WantPCH)
    {
        ShowWarning(_T("Precompiled headers currently only work for GNU GCC.\n" +
                    "They are disabled for all other compilers."));
        WantPCH = false;
        Wizard.CheckCheckbox(_T("chkConfPCH"), false);
    }
    return true;
}

// return the files this project contains
function GetFilesDir()
{
    local result = _T("wxwidgets/common");
    if (WantPCH)
        result = result + _T(";wxwidgets/pch");
    return result;
}

// setup the already created project
function SetupProject(project)
{
    // set project options
    if (PLATFORM != PLATFORM_MSW)
    {
        project.AddCompilerOption(_T("`wx-config --cflags`"));
        project.AddLinkerOption(_T("`wx-config --libs`"));
    }
    else
    {
        project.AddIncludeDir(WxPath + _T("/include"));
        local libdir = LibPath + _T("/msw");
        if (IsUnicode)
            libdir = libdir + _T("u");
        if (IsDebug)
            libdir = libdir + _T("d");
        project.AddIncludeDir(libdir);
        project.AddIncludeDir(WxPath + _T("/contrib/include"));
        project.AddLibDir(LibPath);
        project.AddLinkLib(LibName);
        project.AddLinkLib(_T("comctl32"));
        project.AddLinkLib(_T("gdi32"));
        project.AddLinkLib(_T("ole32"));
        project.AddLinkLib(_T("oleaut32"));
        project.AddLinkLib(_T("uuid"));

        if (GetCompilerFactory().CompilerInheritsFrom(Wizard.GetCompilerID(), _T("msvc*")))
        {
            project.AddCompilerOption(_T("/D__WXMSW__"));
            if (IsDLL)
                project.AddCompilerOption(_T("/DWXUSINGDLL"));
            if (IsUnicode)
                project.AddCompilerOption(_T("/DwxUSE_UNICODE"));
            if (IsDebug)
                project.AddCompilerOption(_T("/D__WXDEBUG__"));
        }
        else
        {
            project.AddCompilerOption(_T("-pipe"));
            project.AddCompilerOption(_T("-mthreads"));
            project.AddCompilerOption(_T("-D__GNUWIN32__"));
            project.AddCompilerOption(_T("-D__WXMSW__"));
            if (IsDLL)
                project.AddCompilerOption(_T("-DWXUSINGDLL"));
            if (IsUnicode)
                project.AddCompilerOption(_T("-DwxUSE_UNICODE"));
            if (IsDebug)
                project.AddCompilerOption(_T("-D__WXDEBUG__"));
        }
    }

    // enable PCH
    if (WantPCH)
    {
        local pchfile = project.GetFileByFilename(_T("wx_pch.h"), true, true);
        if (!IsNull(pchfile))
        {
            pchfile.compile = true;
            pchfile.link = false;
            pchfile.weight = 0;
            project.SetModeForPCH(pchSourceDir); // pch dir
            project.AddCompilerOption(_T("-Winvalid-pch"));
            project.AddCompilerOption(_T("-include wx_pch.h"));
            project.AddCompilerOption(_T("-DUSE_PCH"));
        }
    }

    // enable compiler warnings (project-wide)
    WarningsOn(project, Wizard.GetCompilerID());

    // Debug
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable generation of debugging symbols for target
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }

    // Release
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable optimizations for target
        OptimizationsOn(target, Wizard.GetCompilerID());
    }

    return true;
}
