<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=UTF-8">
<title>wxPropertyGrid: wxPropertyGrid 1.2.12 Overview</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
<link href="tabs.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.5.5 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li class="current"><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="modules.htm"><span>Modules</span></a></li>
      <li><a href="classes.htm"><span>Classes</span></a></li>
    <li>
      <form action="search.php" method="get">
        <table cellspacing="0" cellpadding="0" border="0">
          <tr>
            <td><label>&nbsp;<u>S</u>earch&nbsp;for&nbsp;</label></td>
            <td><input type="text" name="query" value="" size="20" accesskey="s"/></td>
          </tr>
        </table>
      </form>
    </li>
    </ul>
  </div>
</div>
<div class="contents">
<h1>wxPropertyGrid 1.2.12 Overview</h1>
<p>
<a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> is a specialized two-column grid for editing properties such as strings, numbers, flagsets, fonts, and colours. It allows hierarchial, collapsible properties ( via so-called categories that can hold child properties), sub-properties, and has strong wxVariant support (for example, allows populating from near-arbitrary list of wxVariants).<p>
<b>Documentation for wxPython bindings:</b> For a tutorial see the accompanied wxPython readme file and the test_propgrid.py sample. Otherwise, individual member functions should work very much the same as with the C++ wxWidgets, so you'll probably find <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> and <a class="el" href="classwxPropertyGridManager.htm" title="wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid, which...">wxPropertyGridManager</a> class references handy.<p>
Classes:<br>
 <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a><br>
 <a class="el" href="classwxPropertyGridManager.htm" title="wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid, which...">wxPropertyGridManager</a><br>
 <a class="el" href="classwxPropertyGridEvent.htm" title="A propertygrid event holds information about events associated with wxPropertyGrid...">wxPropertyGridEvent</a><br>
<p>
Header files:<br>
 <b>wx/propgrid/propgrid.h:</b> Mandatory when using <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>.<br>
 <b>wx/propgrid/advprops.h:</b> For less often used property classes.<br>
 <b>wx/propgrid/manager.h:</b> Mandatory when using <a class="el" href="classwxPropertyGridManager.htm" title="wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid, which...">wxPropertyGridManager</a>.<br>
 <b>wx/propgrid/propdev.h:</b> Mandatory when implementing custom property classes.<br>
<p>
<a class="el" href="index.htm#featurelist">wxPropertyGrid Features</a><br>
 <a class="el" href="index.htm#basics">Creating and Populating wxPropertyGrid (updated!)</a><br>
 <a class="el" href="index.htm#categories">Categories</a><br>
 <a class="el" href="index.htm#parentprops">Parent Properties</a> <a class="el" href="index.htm#enumandflags">wxEnumProperty and wxFlagsProperty</a><br>
 <a class="el" href="index.htm#advprops">Advanced Properties</a><br>
 <a class="el" href="index.htm#operations">More About Operating with Properties</a><br>
 <a class="el" href="index.htm#events">Event Handling</a><br>
 <a class="el" href="index.htm#populating">Populating wxPropertyGrid Automatically</a><br>
 <a class="el" href="index.htm#customizing">Customizing Properties (without sub-classing)</a><br>
 <a class="el" href="index.htm#custprop">wxCustomProperty</a><br>
 <a class="el" href="index.htm#usage2">Using wxPropertyGridManager (Updated!)</a><br>
 <a class="el" href="index.htm#subclassing">Subclassing wxPropertyGrid and wxPropertyGridManager (New!)</a><br>
 <a class="el" href="index.htm#misc">Miscellaneous Topics (Updated!)</a><br>
 <a class="el" href="index.htm#proplist">Property Type Descriptions (Updated!)</a><br>
 <a class="el" href="index.htm#userhelp">Using wxPropertyGrid (Updated!)</a><br>
 <a class="el" href="index.htm#bugs">Known Bugs</a><br>
 <a class="el" href="index.htm#issues">Issues</a><br>
 <a class="el" href="index.htm#todo">Todo</a><br>
 <a class="el" href="index.htm#notes">Design Notes</a><br>
 <a class="el" href="index.htm#newprops">Creating New Properties (Updated!)</a><br>
 <a class="el" href="index.htm#neweditors">Creating Custom Property Editor</a><br>
<h2><a class="anchor" name="featurelist">
wxPropertyGrid Features</a></h2>
Following is a non-exhaustive list of various <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> features and classes or methods necessary to use them.<p>
<ul>
<li>Hiding property editor: You can either use limited editing mode (wxPG_LIMITED_EDITING window style, <a class="el" href="classwxPropertyGrid.htm#a3feb4f21f6a33e588479809481d0df0" title="Disables (limit = true) or enables (limit = false) wxTextCtrl editor of a property...">wxPropertyGrid::LimitPropertyEditing</a>), which hides wxTextCtrl based editor when other methods (dialog or sub-properties) are available, <b>or</b> you can disable the property, which effectively hides the editor and makes the property label to be drawn in grey colour.</li><li>Unspecified, empty values (<a class="el" href="classwxPropertyGrid.htm#c91cce2147bfe96879d488bf80495897" title="Sets property&#39;s value to unspecified.">wxPropertyGrid::SetPropertyUnspecified</a>, <a class="el" href="classwxPropertyContainerMethods.htm#15e86860c4dde7c25cd4ccc795922d0a" title="Returns true if property value is set to unspecified.">wxPropertyGrid::IsPropertyUnspecified</a>).</li><li>Client data (void*) (<a class="el" href="classwxPropertyContainerMethods.htm#5aeaf8e04775371e538eb03b9f6de5d8" title="Sets client data (void*) of a property.">wxPropertyGrid::SetPropertyClientData</a>, <a class="el" href="classwxPropertyContainerMethods.htm#05b9ee1e821db7be7fac1883c53958cc" title="Returns client data (void*) of a property.">wxPropertyGrid::GetPropertyClientData</a>).</li><li>Multi-page management (<a class="el" href="index.htm#usage2">Using wxPropertyGridManager (Updated!)</a>).</li><li>Setting wxValidator for editor (<a class="el" href="classwxPropertyContainerMethods.htm#b2817bae8743408b308064fbf669e99f" title="Sets validator of a property.">wxPropertyGrid::SetPropertyValidator</a>).</li><li>Changing editor of property (<a class="el" href="classwxPropertyContainerMethods.htm#13127b43df2394954d25b6b2cae23d37" title="Sets editor control of a property.">wxPropertyGrid::SetPropertyEditor</a>).</li><li>Property's value bitmap - small image shown in front of the value text (<a class="el" href="classwxPropertyContainerMethods.htm#d7b6373118833ba4a162c0836cc3d730" title="Set wxBitmap in front of the value.">wxPropertyGrid::SetPropertyImage</a>).</li><li>Help text shown in parent frame's status bar or in manager's description text box (<a class="el" href="classwxPropertyContainerMethods.htm#da116c071212dfb5e4c49945cb1c6fde" title="Associates the help string with property.">wxPropertyGrid::SetPropertyHelpString</a>, <a class="el" href="classwxPropertyContainerMethods.htm#a8da4a084e2b9c2528365df52840d81c" title="Returns help string associated with a property.">wxPropertyGrid::GetPropertyHelpString</a>).</li><li>Changing set of choices used by wxEnumProperty, wxEditEnumProperty or wxMultiChoiceProperty (<a class="el" href="classwxPropertyContainerMethods.htm#4f94f9a84450917f10e4bf204ebb5b5f" title="Set choices of a property to specified set of labels and values.">wxPropertyGrid::SetPropertyChoices</a>).</li><li>Changing background colour of property's cell (<a class="el" href="classwxPropertyGrid.htm#995f8cca8d8afaf00a328c603786979c" title="Sets background colour of property and all its children.">wxPropertyGrid::SetPropertyColour</a>).</li><li>Setting property text max length (<a class="el" href="classwxPropertyContainerMethods.htm#4d032bcd7c62772e080b47eb203b99f6" title="Sets max length of property&#39;s text.">wxPropertyGrid::SetPropertyMaxLength</a>)</li><li>Hiding a property (<a class="el" href="classwxPropertyContainerMethods.htm#7e6d44853b60c0ca0063c4558b03bddd" title="Hides or reveals a property.">wxPropertyGrid::HideProperty</a>)</li><li>Setting property attributes (<a class="el" href="index.htm#attributes">Property Attributes</a>)</li><li>Populating <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> (<a class="el" href="index.htm#populating">Populating wxPropertyGrid Automatically</a>).</li></ul>
<h2><a class="anchor" name="basics">
Creating and Populating wxPropertyGrid (updated!)</a></h2>
As seen here, <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> is constructed in the same way as other wxWidgets controls:<p>
<div class="fragment"><pre class="fragment">    <span class="comment">// Necessary header file</span>
<span class="preprocessor">    #include &lt;wx/propgrid/propgrid.h&gt;</span>

    ...

        <span class="comment">// Assumes code is in frame/dialog constructor</span>

        <span class="comment">// Construct wxPropertyGrid control</span>
        <a class="code" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>* pg = <span class="keyword">new</span> <a class="code" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>(
            <span class="keyword">this</span>, <span class="comment">// parent</span>
            PGID, <span class="comment">// id</span>
            wxDefaultPosition, <span class="comment">// position</span>
            wxDefaultSize, <span class="comment">// size</span>
            <span class="comment">// Some specific window styles - for all additional styles,</span>
            <span class="comment">// see Modules-&gt;PropertyGrid Window Styles</span>
            <a class="code" href="group__wndflags.htm#gbc7fe15d246df3106fd563b9f2ab94fc" title="This will cause Sort() automatically after an item is added.">wxPG_AUTO_SORT</a> | <span class="comment">// Automatic sorting after items added</span>
            <a class="code" href="group__wndflags.htm#g15dc4929194a3f0bd94bfd040a52e684" title="When wxPropertyGrid is resized, splitter moves to the center.">wxPG_SPLITTER_AUTO_CENTER</a> | <span class="comment">// Automatically center splitter until user manually adjusts it</span>
            <span class="comment">// Default style</span>
            <a class="code" href="group__wndflags.htm#gcf768b936525faa42392f653a3296eb4" title="Combines various styles.">wxPG_DEFAULT_STYLE</a> );

        <span class="comment">// Window style flags are at premium, so some less often needed ones are</span>
        <span class="comment">// available as extra window styles (wxPG_EX_xxx) which must be set using</span>
        <span class="comment">// SetExtraStyle member function. wxPG_EX_HELP_AS_TOOLTIPS, for instance,</span>
        <span class="comment">// allows displaying help strings as tooltips.</span>
        pg-&gt;SetExtraStyle( <a class="code" href="group__wndflags.htm#gf3ba8a5b97585dac004501c908221994" title="Show property help strings as tool tips instead as text on the status bar.">wxPG_EX_HELP_AS_TOOLTIPS</a> );
</pre></div><p>
(for complete list of new window styles: <a class="el" href="group__wndflags.htm">Additional Window Styles</a>)<p>
<a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> is usually populated with lines like this:<p>
<div class="fragment"><pre class="fragment">        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxStringProperty(wxT(<span class="stringliteral">"Label"</span>),wxT(<span class="stringliteral">"Name"</span>),wxT(<span class="stringliteral">"Initial Value"</span>)) );
</pre></div><p>
wxStringProperty is a factory function that creates a property instance of a property class "wxStringProperty". Only the first function argument (label) is mandatory. When necessary, name defaults to label and initial value to default value. If wxPG_LABEL is used as the name argument, then the label is automatically used as a name as well (this is more efficient than manually defining both as the same). Empty name is also allowed, but in this case the property cannot be accessed by its name.<p>
To demonstrate other common property classes, here's another code snippet:<p>
<div class="fragment"><pre class="fragment">        <span class="comment">// Add int property</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"IntProperty"</span>), wxPG_LABEL, 12345678) );

        <span class="comment">// Add float property (value type is actually double)</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxFloatProperty(wxT(<span class="stringliteral">"FloatProperty"</span>), wxPG_LABEL, 12345.678) );

        <span class="comment">// Add a bool property</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxBoolProperty(wxT(<span class="stringliteral">"BoolProperty"</span>), wxPG_LABEL, <span class="keyword">false</span>) );

        <span class="comment">// A string property that can be edited in a separate editor dialog.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxLongStringProperty(wxT(<span class="stringliteral">"LongStringProperty"</span>),
                                         wxPG_LABEL,
                                         wxT(<span class="stringliteral">"This is much longer string than the "</span>)
                                         wxT(<span class="stringliteral">"first one. Edit it by clicking the button."</span>)));

        <span class="comment">// String editor with dir selector button.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxDirProperty(wxT(<span class="stringliteral">"DirProperty"</span>), wxPG_LABEL, ::wxGetUserHome()) );

        <span class="comment">// A file selector property.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxFileProperty(wxT(<span class="stringliteral">"FileProperty"</span>), wxPG_LABEL, wxEmptyString) );

        <span class="comment">// Extra: set wildcard for file property (format same as in wxFileDialog).</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#7e412a0ff4ab53a4fc7854492f8a33f2" title="Sets an attribute of a property.">SetPropertyAttribute</a>(wxT(<span class="stringliteral">"FileProperty"</span>),
                                 <a class="code" href="group__attrids.htm#g1817e1bea592d9cda7a330ea3a25f851" title="wxFileProperty/wxImageFileProperty specific, wxChar*, default is detected/varies...">wxPG_FILE_WILDCARD</a>,
                                 wxT(<span class="stringliteral">"All files (*.*)|*.*"</span>));
</pre></div><p>
All operations on properties should be done via wxPropertyGrid's (or wxPropertyGridManager's) methods. Class reference of the base property class should only be interesting for those creating custom property classes.<p>
Property operations, such as SetPropertyValue or DisableProperty, all have two versions: one which accepts property id (of type <a class="el" href="classwxPGId.htm" title="Simple wrapper for the wxPGProperty pointer.">wxPGId</a>) and another that accepts property name. Id is faster since it doesn't require hash map lookup, but name is often much more convenient.<p>
You can get property id as Append/Insert return value, or by calling GetPropertyByName.<p>
Below are samples for using some of the more commong operations. See <a class="el" href="classwxPropertyContainerMethods.htm" title="In order to have most same base methods, both wxPropertyGrid and wxPropertyGridManager...">wxPropertyContainerMethods</a> and <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> class references for complete list.<p>
<div class="fragment"><pre class="fragment">        <a class="code" href="classwxPGId.htm" title="Simple wrapper for the wxPGProperty pointer.">wxPGId</a> MyPropertyId = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#10c17a66f01d12f35d71b5c3ed8b8bc8" title="Returns id of property with given name (case-sensitive).">GetPropertyByName</a>( wxT(<span class="stringliteral">"MyProperty"</span>) );

        <span class="comment">// There are many overloaded versions of this method, of which each accept</span>
        <span class="comment">// different type of value.</span>
        <span class="comment">// NOTE: If type of MyProperty is not "long", then this will yield a</span>
        <span class="comment">//       run-time error message.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#d73145d215e7ef18255716739a083132" title="Sets value (long integer) of a property.">SetPropertyValue</a>( wxT(<span class="stringliteral">"MyProperty"</span>), 200 );

        <span class="comment">// Setting a string works for all properties - conversion is done</span>
        <span class="comment">// automatically.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#d73145d215e7ef18255716739a083132" title="Sets value (long integer) of a property.">SetPropertyValue</a>( MyPropertyId, wxT(<span class="stringliteral">"400"</span>) );

        <span class="comment">// Getting property value as wxVariant.</span>
        wxVariant value = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#1db1307fd33666b6cbebcfe172be1e2f" title="Returns value as wxVariant.">GetPropertyValue</a>( wxT(<span class="stringliteral">"MyProperty"</span>) );

        <span class="comment">// Getting property value as String (again, works for all typs).</span>
        wxString value = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#67d120997842598fcd5c46927f945a10">GetPropertyValueAsString</a>( MyPropertyId );

        <span class="comment">// Getting property value as int. Provokes a run-time error</span>
        <span class="comment">// if used with property which value type is not "long".</span>
        <span class="keywordtype">long</span> value = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#4491c2c17efaf3b95d0de646bb2aa8d3">GetPropertyValueAsLong</a>( wxT(<span class="stringliteral">"MyProperty"</span>) );

        <span class="comment">// Set new name.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#280472021c791e16044e4998ae1944d4" title="Sets name of a property.">SetPropertyName</a>( wxT(<span class="stringliteral">"MyProperty"</span>), wxT(<span class="stringliteral">"X"</span>) );

        <span class="comment">// Set new label - we need to use the new name.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#88ca8475d21e4290d7040d6a2fd0033c" title="Sets label of a property.">SetPropertyLabel</a>( wxT(<span class="stringliteral">"X"</span>), wxT(<span class="stringliteral">"New Label"</span>) );

        <span class="comment">// Disable the property.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#9e9d970ca20644640b379ff3f944d508" title="Disables property.">DisableProperty</a>( MyPropertyId );

        <span class="comment">// Set property as read-only.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#60e876bc68b873247a8eca29c33b0b44" title="Sets property as read-only.">SetPropertyReadOnly</a>( MyPropertyId );
</pre></div><h2><a class="anchor" name="categories">
Categories</a></h2>
<a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> has a hierarchial property storage and display model, which allows property categories to hold child properties and even other categories. Other than that, from the programmer's point of view, categories can be treated exactly the same as "other" properties. For example, despite its name, GetPropertyByName also returns a category by name, and SetPropertyLabel also sets label of a category. Note however that sometimes the label of a property category may be referred as caption (for example, there is SetCaptionForegroundColour method that sets text colour of a property category's label).<p>
When category is added at the top (i.e. root) level of the hierarchy, it becomes a *current category*. This means that all other (non-category) properties after it are automatically added to it. You may add properties to specific categories by using <a class="el" href="classwxPropertyGrid.htm#637a3bbf1b34ae9f456ffbd1f20d492d" title="Inserts property to the list.">wxPropertyGrid::Insert</a> or wxPropertyGrid::AppendIn.<p>
Category code sample:<p>
<div class="fragment"><pre class="fragment">        <span class="comment">// One way to add category (similar to how other properties are added)</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxPropertyCategory(wxT(<span class="stringliteral">"Main"</span>)) );

        <span class="comment">// All these are added to "Main" category</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxStringProperty(wxT(<span class="stringliteral">"Name"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Age"</span>),wxPG_LABEL,25) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Height"</span>),wxPG_LABEL,180) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Weight"</span>)) );

        <span class="comment">// Another way</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#07564444d7e678d8d831e05d35f4834b">AppendCategory</a>( wxT(<span class="stringliteral">"Attributes"</span>) );

        <span class="comment">// All these are added to "Attributes" category</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Intelligence"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Agility"</span>)) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxIntProperty(wxT(<span class="stringliteral">"Strength"</span>)) );
</pre></div><h2><a class="anchor" name="parentprops">
Parent Properties</a></h2>
If you want to combine number of properties under single parent (just like wxFontProperty combines font attributes), then the easiest way to proceed is to use wxParentProperty.<p>
<dl class="remark" compact><dt><b>Remarks:</b></dt><dd><ul>
<li>wxParentProperty's value type is string, in which a child property that has children of its own will be embedded in braces ([]).</li><li>Children of wxParentProperty cannot be accessed globally by their name. Instead, use "Parent.Child" format.</li><li>However, events occur for the children, not the parent. In addition to GetPropertyParent, You can use wxPropertyGridEvent::GetMainParent() to find out property's highest wxParentProperty or wxCustomProperty.</li></ul>
</dd></dl>
Sample:<p>
<div class="fragment"><pre class="fragment">        <a class="code" href="classwxPGId.htm" title="Simple wrapper for the wxPGProperty pointer.">wxPGId</a> pid = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxParentProperty(wxT(<span class="stringliteral">"Car"</span>),wxPG_LABEL) );

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#e63fbeeb19328b083ac586080a254c83">AppendIn</a>( pid, wxStringProperty(wxT(<span class="stringliteral">"Model"</span>),
                                            wxPG_LABEL,
                                            wxT(<span class="stringliteral">"Lamborghini Diablo SV"</span>)) );

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#e63fbeeb19328b083ac586080a254c83">AppendIn</a>( pid, wxIntProperty(wxT(<span class="stringliteral">"Engine Size (cc)"</span>),
                                         wxPG_LABEL,
                                         5707) );

        <a class="code" href="classwxPGId.htm" title="Simple wrapper for the wxPGProperty pointer.">wxPGId</a> speedId = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#e63fbeeb19328b083ac586080a254c83">AppendIn</a>( pid, wxParentProperty(wxT(<span class="stringliteral">"Speeds"</span>),wxPG_LABEL) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#e63fbeeb19328b083ac586080a254c83">AppendIn</a>( speedId, wxIntProperty(wxT(<span class="stringliteral">"Max. Speed (mph)"</span>),wxPG_LABEL,300) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#e63fbeeb19328b083ac586080a254c83">AppendIn</a>( speedId, wxFloatProperty(wxT(<span class="stringliteral">"0-100 mph (sec)"</span>),wxPG_LABEL,3.9) );
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#e63fbeeb19328b083ac586080a254c83">AppendIn</a>( speedId, wxFloatProperty(wxT(<span class="stringliteral">"1/4 mile (sec)"</span>),wxPG_LABEL,8.6) );

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#e63fbeeb19328b083ac586080a254c83">AppendIn</a>( pid, wxIntProperty(wxT(<span class="stringliteral">"Price ($)"</span>),
                                         wxPG_LABEL,
                                         300000) );

        <span class="comment">// Displayed value of "Car" property is now:</span>
        <span class="comment">// "Lamborghini Diablo SV; [300; 3.9; 8.6]; 300000"</span>
</pre></div><h2><a class="anchor" name="enumandflags">
wxEnumProperty and wxFlagsProperty</a></h2>
wxEnumProperty is used when you want property's (integer) value to be selected from a popup list of choices.<p>
Creating wxEnumProperty is more complex than those described earlier. You have to provide list of constant labels, and optionally relevant values (if label indexes are not sufficient).<p>
<dl class="remark" compact><dt><b>Remarks:</b></dt><dd></dd></dl>
<ul>
<li>Value wxPG_INVALID_VALUE (equals 2147483647 which usually equals INT_MAX) is not allowed as value.</li></ul>
<p>
A very simple example:<p>
<div class="fragment"><pre class="fragment">        <span class="comment">//</span>
        <span class="comment">// Using wxArrayString</span>
        <span class="comment">//</span>
        wxArrayString arrDiet;
        arr.Add(wxT(<span class="stringliteral">"Herbivore"</span>));
        arr.Add(wxT(<span class="stringliteral">"Carnivore"</span>));
        arr.Add(wxT(<span class="stringliteral">"Omnivore"</span>));

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxEnumProperty(wxT(<span class="stringliteral">"Diet"</span>),
                                   wxPG_LABEL,
                                   arrDiet) );



        <span class="comment">//</span>
        <span class="comment">// Using wxChar* array</span>
        <span class="comment">//</span>
        <span class="keyword">const</span> wxChar* arrayDiet[] =
        { wxT(<span class="stringliteral">"Herbivore"</span>), wxT(<span class="stringliteral">"Carnivore"</span>), wxT(<span class="stringliteral">"Omnivore"</span>), NULL };

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxEnumProperty(wxT(<span class="stringliteral">"Diet"</span>),
                                   wxPG_LABEL,
                                   arrayDiet) );
</pre></div><p>
Here's extended example using values as well:<p>
<div class="fragment"><pre class="fragment">        <span class="comment">//</span>
        <span class="comment">// Using wxArrayString and wxArrayInt</span>
        <span class="comment">//</span>
        wxArrayString arrDiet;
        arr.Add(wxT(<span class="stringliteral">"Herbivore"</span>));
        arr.Add(wxT(<span class="stringliteral">"Carnivore"</span>));
        arr.Add(wxT(<span class="stringliteral">"Omnivore"</span>));

        wxArrayInt arrIds;
        arrIds.Add(40);
        arrIds.Add(45);
        arrIds.Add(50);

        <span class="comment">// Note that the initial value (the last argument) is the actual value,</span>
        <span class="comment">// not index or anything like that. Thus, our value selects "Omnivore".</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxEnumProperty(wxT(<span class="stringliteral">"Diet"</span>),
                                   wxPG_LABEL,
                                   arrDiet,
                                   arrIds,
                                   50) );


        <span class="comment">//</span>
        <span class="comment">// Using wxChar* and long arrays</span>
        <span class="comment">//</span>
        <span class="keyword">const</span> wxChar* array_diet[] =
        { wxT(<span class="stringliteral">"Herbivore"</span>), wxT(<span class="stringliteral">"Carnivore"</span>), wxT(<span class="stringliteral">"Omnivore"</span>), NULL };

        <span class="keywordtype">long</span> array_diet_ids[] =
        { 40, 45, 50 };

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxEnumProperty(wxT(<span class="stringliteral">"Diet"</span>),
                                   wxPG_LABEL,
                                   array_diet,
                                   array_diet_ids) );
</pre></div><p>
<a class="el" href="classwxPGChoices.htm" title="Helper class for managing constant (key=value) sequences.">wxPGChoices</a> is a class where wxEnumProperty, and other properties which require label storage, actually stores strings and values. It is used to facilitiate reference counting, and therefore recommended way of adding items when multiple properties share the same set.<p>
You can use it directly as well, filling it and then passing it to the factory function.<p>
<div class="fragment"><pre class="fragment">        <a class="code" href="classwxPGChoices.htm" title="Helper class for managing constant (key=value) sequences.">wxPGChoices</a> chs;
        chs.<a class="code" href="classwxPGChoices.htm#a34902d07e5017e738cf7e13093f096d" title="Adds to current.">Add</a>(wxT(<span class="stringliteral">"Herbivore"</span>),40);
        chs.<a class="code" href="classwxPGChoices.htm#a34902d07e5017e738cf7e13093f096d" title="Adds to current.">Add</a>(wxT(<span class="stringliteral">"Carnivore"</span>),45);
        chs.<a class="code" href="classwxPGChoices.htm#a34902d07e5017e738cf7e13093f096d" title="Adds to current.">Add</a>(wxT(<span class="stringliteral">"Omnivore"</span>),50);

        <span class="comment">// Note: you can add even whole arrays to wxPGChoices</span>

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxEnumProperty(wxT(<span class="stringliteral">"Diet"</span>),
                                   wxPG_LABEL,
                                   chs) );

        <span class="comment">// Add same choices to another property as well - this is efficient due</span>
        <span class="comment">// to reference counting</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxEnumProperty(wxT(<span class="stringliteral">"Diet 2"</span>),
                                   wxPG_LABEL,
                                   chs) );
</pre></div><p>
If you later need to change choices used by a property, there is function for that as well.<p>
<div class="fragment"><pre class="fragment">        <span class="comment">//</span>
        <span class="comment">// Example 1: Add one extra item</span>
        <a class="code" href="classwxPGChoices.htm" title="Helper class for managing constant (key=value) sequences.">wxPGChoices</a>&amp; choices = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#e8391f3a86be593187792a3eee1daa10" title="Returns writable reference to property&amp;#39;s list of choices (and relevant values)...">GetPropertyChoices</a>(wxT(<span class="stringliteral">"Diet"</span>));
        choices.<a class="code" href="classwxPGChoices.htm#a34902d07e5017e738cf7e13093f096d" title="Adds to current.">Add</a>(wxT(<span class="stringliteral">"Custom"</span>),55);

        <span class="comment">//</span>
        <span class="comment">// Example 2: Replace all the choices</span>
        <a class="code" href="classwxPGChoices.htm" title="Helper class for managing constant (key=value) sequences.">wxPGChoices</a> chs;
        chs.<a class="code" href="classwxPGChoices.htm#a34902d07e5017e738cf7e13093f096d" title="Adds to current.">Add</a>(wxT(<span class="stringliteral">"&lt;No valid items yet&gt;"</span>),0);
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#4f94f9a84450917f10e4bf204ebb5b5f" title="Set choices of a property to specified set of labels and values.">SetPropertyChoices</a>(wxT(<span class="stringliteral">"Diet"</span>),chs);
</pre></div><p>
If you want to create your enum properties with simple (label,name,value) constructor, then you need to create a new property class using one of the supplied macro pairs. See <a class="el" href="index.htm#newprops">Creating New Properties (Updated!)</a> for details.<p>
<b>wxEditEnumProperty</b> is works exactly like wxEnumProperty, except is uses non-readonly combobox as default editor, and has string values.<p>
wxFlagsProperty is similar:<p>
<div class="fragment"><pre class="fragment">        <span class="keyword">const</span> wxChar* flags_prop_labels[] = { wxT(<span class="stringliteral">"wxICONIZE"</span>),
            wxT(<span class="stringliteral">"wxCAPTION"</span>), wxT(<span class="stringliteral">"wxMINIMIZE_BOX"</span>), wxT(<span class="stringliteral">"wxMAXIMIZE_BOX"</span>), NULL };

        <span class="comment">// this value array would be optional if values matched string indexes</span>
        <span class="keywordtype">long</span> flags_prop_values[] = { wxICONIZE, wxCAPTION, wxMINIMIZE_BOX,
            wxMAXIMIZE_BOX };

        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxFlagsProperty(wxT(<span class="stringliteral">"Window Style"</span>),
                                    wxPG_LABEL,
                                    flags_prop_labels,
                                    flags_prop_values,
                                    wxDEFAULT_FRAME_STYLE) );
</pre></div><p>
wxFlagsProperty can use <a class="el" href="classwxPGChoices.htm" title="Helper class for managing constant (key=value) sequences.">wxPGChoices</a> just the same way as wxEnumProperty (and also custom property classes can be created with similar macro pairs). <b>Note: </b> When changing "choices" (ie. flag labels) of wxFlagsProperty, you will need to use SetPropertyChoices - otherwise they will not get updated properly.<h2><a class="anchor" name="advprops">
Advanced Properties</a></h2>
This section describes the use of less often needed property classes. To use them, you have to include &lt;wx/propgrid/advprops.h&gt;.<p>
<div class="fragment"><pre class="fragment">    <span class="comment">// Necessary extra header file</span>
<span class="preprocessor">    #include &lt;wx/propgrid/advprops.h&gt;</span>

    ...

        <span class="comment">// wxArrayStringProperty embeds a wxArrayString.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxArrayStringProperty(wxT(<span class="stringliteral">"Label of ArrayStringProperty"</span>),
                                          wxT(<span class="stringliteral">"NameOfArrayStringProp"</span>)));

        <span class="comment">// Date property.</span>
        <span class="comment">// NB: This will use wxDatePickerCtrl only if wxPG_ALLOW_WXADV is defined</span>
        <span class="comment">//     in propgrid.h or in the library project settings.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxDateProperty(wxT(<span class="stringliteral">"MyDateProperty"</span>),
                                   wxPG_LABEL,
                                   wxDateTime::Now()) );

        <span class="comment">// Image file property. Wildcard is auto-generated from available</span>
        <span class="comment">// image handlers, so it is not set this time.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxImageFileProperty(wxT(<span class="stringliteral">"Label of ImageFileProperty"</span>),
                                        wxT(<span class="stringliteral">"NameOfImageFileProp"</span>)));

        <span class="comment">// Font property has sub-properties. Note that we give window's font as</span>
        <span class="comment">// initial value.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxFontProperty(wxT(<span class="stringliteral">"Font"</span>),
                    wxPG_LABEL,
                    GetFont()) );

        <span class="comment">// Colour property with arbitrary colour.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxColourProperty(wxT(<span class="stringliteral">"My Colour 1"</span>),
                                     wxPG_LABEL,
                                     wxColour(242,109,0) ) );

        <span class="comment">// System colour property.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxSystemColourProperty (wxT(<span class="stringliteral">"My SysColour 1"</span>),
                                            wxPG_LABEL,
                                            wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW)) );

        <span class="comment">// System colour property with custom colour.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxSystemColourProperty (wxT(<span class="stringliteral">"My SysColour 2"</span>),
                                            wxPG_LABEL,
                                            wxColour(0,200,160) ) );

        <span class="comment">// Cursor property</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( wxCursorProperty (wxT(<span class="stringliteral">"My Cursor"</span>),
                                      wxPG_LABEL,
                                      wxCURSOR_ARROW));
</pre></div><h2><a class="anchor" name="operations">
More About Operating with Properties</a></h2>
Example of iterating through all properties (that are not category captions or sub-property items):<p>
<div class="fragment"><pre class="fragment">        <a class="code" href="classwxPGId.htm" title="Simple wrapper for the wxPGProperty pointer.">wxPGId</a> <span class="keywordtype">id</span> = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#fbdca2d7eda19f25d9d5e0bf54d7bb37" title="Returns id of first property that is not a category.">GetFirstProperty</a>();

        <span class="keywordflow">while</span> ( <span class="keywordtype">id</span>.IsOk() )
        {
            <span class="comment">// Do something with property id</span>

            ...

            <span class="comment">// Get next</span>
            pg-&gt;<a class="code" href="classwxPropertyGrid.htm#f0bf0479bfdd8581a1f98f9c4daea590" title="Returns id of next property.">GetNextProperty</a>( <span class="keywordtype">id</span> );
        }
</pre></div><p>
Getting value of selected wxSystemColourProperty (which value type is derived from wxObject):<p>
<div class="fragment"><pre class="fragment">        <a class="code" href="classwxPGId.htm" title="Simple wrapper for the wxPGProperty pointer.">wxPGId</a> <span class="keywordtype">id</span> = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#dcfe0171cd55e292401490aeccae0048" title="Returns currently selected property.">GetSelection</a>();

        <span class="keywordflow">if</span> ( <span class="keywordtype">id</span>.IsOk() )
        {

            <span class="comment">// Get name of property</span>
            <span class="keyword">const</span> wxString&amp; name = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#bc362bce30df00a089872417921b22a0" title="Returns name of a property.">GetPropertyName</a>( <span class="keywordtype">id</span> );

            <span class="comment">// If type is not correct, GetColour() method will produce run-time error</span>
            <span class="keywordflow">if</span> ( pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#6761b31612cae9c37116a9e03b24d6be" title="Returns true if property&amp;#39;s value type has name typestr.">IsPropertyValueType</a>( <span class="keywordtype">id</span>, CLASSINFO(<a class="code" href="classwxColourPropertyValue.htm" title="Because text, background and other colours tend to differ between platforms, wxSystemColourProperty...">wxColourPropertyValue</a>) ) )
            {
                <a class="code" href="classwxColourPropertyValue.htm" title="Because text, background and other colours tend to differ between platforms, wxSystemColourProperty...">wxColourPropertyValue</a>* pcolval =
                    wxDynamicCast(pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#f50cbf930e13f5f77449539a15293e39">GetPropertyValueAsWxObjectPtr</a>(<span class="keywordtype">id</span>),
                                  <a class="code" href="classwxColourPropertyValue.htm" title="Because text, background and other colours tend to differ between platforms, wxSystemColourProperty...">wxColourPropertyValue</a>);

                <span class="comment">// Report value</span>
                wxString text;
                <span class="keywordflow">if</span> ( pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#42fffa02f3ba7f377168a22b6e9150fe" title="An integer value relating to the colour, and which exact meaning depends on the property...">m_type</a> == wxPG_CUSTOM_COLOUR )
                    text.Printf( wxT(<span class="stringliteral">"It is custom colour: (%i,%i,%i)"</span>),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#40742851ba26cd29450466011e8af4bc" title="Resulting colour.">m_colour</a>.Red(),
                        (int)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#40742851ba26cd29450466011e8af4bc" title="Resulting colour.">m_colour</a>.Green(),
                        (int)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#40742851ba26cd29450466011e8af4bc" title="Resulting colour.">m_colour</a>.Blue());
                <span class="keywordflow">else</span>
                    text.Printf( wxT(<span class="stringliteral">"It is wx system colour (number=%i): (%i,%i,%i)"</span>),
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#42fffa02f3ba7f377168a22b6e9150fe" title="An integer value relating to the colour, and which exact meaning depends on the property...">m_type</a>,
                        (<span class="keywordtype">int</span>)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#40742851ba26cd29450466011e8af4bc" title="Resulting colour.">m_colour</a>.Red(),
                        (int)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#40742851ba26cd29450466011e8af4bc" title="Resulting colour.">m_colour</a>.Green(),
                        (int)pcolval-&gt;<a class="code" href="classwxColourPropertyValue.htm#40742851ba26cd29450466011e8af4bc" title="Resulting colour.">m_colour</a>.Blue());

                wxMessageBox( text );
            }

        }
</pre></div><h2><a class="anchor" name="populating">
Populating wxPropertyGrid Automatically</a></h2>
<h3><a class="anchor" name="fromvariants">
Populating from List of wxVariants</a></h3>
Example of populating an empty <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> from a values stored in an arbitrary list of wxVariants.<p>
<div class="fragment"><pre class="fragment">        <span class="comment">// This is a static method that initializes *all* builtin type handlers</span>
        <span class="comment">// available, including those for wxColour and wxFont. Refers to *all*</span>
        <span class="comment">// included properties, so when compiling with static library, this</span>
        <span class="comment">// method may increase the executable size significantly.</span>
        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#a32f5728f90be6514b01b1f7635860fd" title="Initializes *all* property types.">InitAllTypeHandlers</a> ();

        <span class="comment">// Get contents of the grid as a wxVariant list</span>
        wxVariant all_values = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#ae30b6a387911a12832e730206baa069" title="Returns a wxVariant list containing wxVariant versions of all property values.">GetPropertyValues</a>();

        <span class="comment">// Populate the list with values. If a property with appropriate</span>
        <span class="comment">// name is not found, it is created according to the type of variant.</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#14ac258a05bef8e6da8630e924a62b7a" title="Sets various property values from a list of wxVariants.">SetPropertyValues</a> ( my_list_variant );

        <span class="comment">// In order to get wxObject ptr from a variant value,</span>
        <span class="comment">// wxGetVariantCast(VARIANT,CLASSNAME) macro has to be called.</span>
        <span class="comment">// Like this:</span>
        wxVariant v_txcol = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#1db1307fd33666b6cbebcfe172be1e2f" title="Returns value as wxVariant.">GetPropertyValue</a>(wxT(<span class="stringliteral">"Text Colour"</span>));
        <span class="keyword">const</span> wxColour&amp; txcol = wxGetVariantCast(v_txcol,wxColour);
</pre></div><h2><a class="anchor" name="events">
Event Handling</a></h2>
Probably the most important event is the Changed event which occurs when value of any property is changed by the user. Use EVT_PG_CHANGED(id,func) in your event table to use it. For complete list of event types, see <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> class reference.<p>
The custom event class, <a class="el" href="classwxPropertyGridEvent.htm" title="A propertygrid event holds information about events associated with wxPropertyGrid...">wxPropertyGridEvent</a>, has methods to directly access the property that triggered the event.<p>
Here's a small sample:<p>
<div class="fragment"><pre class="fragment">    <span class="comment">// Portion of an imaginary event table</span>
    BEGIN_EVENT_TABLE(MyForm, wxFrame)

        ...

        <span class="comment">// This occurs when a property value changes</span>
        EVT_PG_CHANGED( PGID, MyForm::OnPropertyGridChange )

        ...

    END_EVENT_TABLE()

    void MyForm::OnPropertyGridChange( <a class="code" href="classwxPropertyGridEvent.htm" title="A propertygrid event holds information about events associated with wxPropertyGrid...">wxPropertyGridEvent</a>&amp; event )
    {

        <span class="comment">// Get name of changed property</span>
        <span class="keyword">const</span> wxString&amp; name = <span class="keyword">event</span>.GetPropertyName();

        <span class="comment">// Get resulting value - wxVariant is convenient here.</span>
        wxVariant value = <span class="keyword">event</span>.GetPropertyValue();

    }
</pre></div><p>
<dl class="remark" compact><dt><b>Remarks:</b></dt><dd>On Sub-property Event Handling<ul>
<li>For wxParentProperty and wxCustomProperty, events will occur for sub-property. For those properties that inherit directly from wxPGPropertyWithChildren/wxBaseParentPropertyClass (wxFontProperty, wxFlagsProperty, etc), events occur for the main parent property only (actually, this has to do whether the children are "private" or not<ul>
<li>see the attributes).</li></ul>
</li><li>When wxParentProperty or wxCustomProperty's child gets changed, you can use wxPropertyGridEvent::GetMainParent to obtain its top non-category parent (useful, if you have wxParentProperty as child of another wxParentProperty, for example).</li></ul>
</dd></dl>
<h3><a class="anchor" name="tofile">
Saving Population to a Text-based Storage</a></h3>
<div class="fragment"><pre class="fragment">    <span class="keyword">static</span> <span class="keywordtype">void</span> WritePropertiesToMyStorage( <a class="code" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>* pg, <a class="code" href="classwxPGId.htm" title="Simple wrapper for the wxPGProperty pointer.">wxPGId</a> <span class="keywordtype">id</span>, wxMyStorage&amp; f, <span class="keywordtype">int</span> depth )
    {
        wxString s;
        wxString s2;

        <span class="keywordflow">while</span> ( <span class="keywordtype">id</span>.IsOk() )
        {

            <span class="comment">// TODO: Save property into text storage using:</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyClassName</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyName</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyLabel</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyValueAsString</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyChoices</span>
            <span class="comment">//   wxPropertyGrid::GetPropertyAttributes</span>

            <span class="comment">// Example for adding choices:</span>
            <a class="code" href="classwxPGChoices.htm" title="Helper class for managing constant (key=value) sequences.">wxPGChoices</a>&amp; choices = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#e8391f3a86be593187792a3eee1daa10" title="Returns writable reference to property&amp;#39;s list of choices (and relevant values)...">GetPropertyChoices</a>(<span class="keywordtype">id</span>);
            <span class="keywordflow">if</span> ( choices.<a class="code" href="classwxPGChoices.htm#e98aadbd919ed1bc31a92e3ed3749613" title="Returns false if this is a constant empty set of choices, which should not be modified...">IsOk</a>() )
            {
                <span class="comment">// First add id of the choices list inorder to optimize</span>
                s2.Printf(wxT(<span class="stringliteral">"\"%X\""</span>),(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)choices.<a class="code" href="classwxPGChoices.htm#e90396f3c305a9670f6651ba4a9d9b4e" title="Gets a unsigned number identifying this list.">GetId</a>());
                s.Append(s2);
                f.AddToken(s2);

                <span class="keywordtype">size_t</span> i;
                wxArrayString&amp; labels = choices.<a class="code" href="classwxPGChoices.htm#d8bdec8b7001ed4cae4464ea18371632" title="Returns reference to wxArrayString of labels for you to modify.">GetLabels</a>();
                wxArrayInt&amp; values = choices.<a class="code" href="classwxPGChoices.htm#21df8ff2f98fd51539c0deb56253daf5" title="Returns reference to wxArrayInt of values for you to modify.">GetValues</a>();
                <span class="keywordflow">if</span> ( values.GetCount() )
                    <span class="keywordflow">for</span> ( i=0; i&lt;labels.GetCount(); i++ )
                    {
                        s2.Printf(wxT(<span class="stringliteral">"\"%s||%i\""</span>),labels[i].c_str(),values[i]);
                        f.AddToken(s2);
                    }
                <span class="keywordflow">else</span>
                    <span class="keywordflow">for</span> ( i=0; i&lt;labels.GetCount(); i++ )
                    {
                        s2.Printf(wxT(<span class="stringliteral">"\"%s\""</span>),labels[i].c_str());
                        f.AddToken(s2);
                    }
            }

            <span class="comment">// Write children, if any</span>
            <a class="code" href="classwxPGId.htm" title="Simple wrapper for the wxPGProperty pointer.">wxPGId</a> firstChild = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#b0cc0b05865498502961478a6576ea95" title="Returns id of first child of given property.">GetFirstChild</a>(<span class="keywordtype">id</span>);
            <span class="keywordflow">if</span> ( firstChild.<a class="code" href="classwxPGId.htm#e5a172da3089d9c513c38a7cef4a1d26">IsOk</a>() )
            {
                WritePropertiesToMyStorage( pg, firstChild, f, depth+1 );

                <span class="comment">// TODO: Add parent's terminator</span>
            }

            <span class="keywordtype">id</span> = pg-&gt;GetNextSibling(<span class="keywordtype">id</span>);
        }
    }

    ...

        <span class="comment">// Then you can use this to store the entire hierarchy</span>
        <a class="code" href="classwxPGId.htm" title="Simple wrapper for the wxPGProperty pointer.">wxPGId</a> firstChild = pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#b0cc0b05865498502961478a6576ea95" title="Returns id of first child of given property.">GetFirstChild</a>(pg-&gt;<a class="code" href="classwxPropertyGrid.htm#3e3e6a954c145c71f1981c92bb6e79f1" title="Returns &amp;quot;root property&amp;quot;.">GetRoot</a>());
        <span class="keywordflow">if</span> ( firstChild.<a class="code" href="classwxPGId.htm#e5a172da3089d9c513c38a7cef4a1d26">IsOk</a>() )
            WritePropertiesToFile(pg,first_child,InstanceOfMyStorage,0);
</pre></div><p>
For more practical'ish example, see FormMain::OnSaveToFileClick in propgridsample.cpp.<h3><a class="anchor" name="fromfile">
Loading Population from a Text-based Storage</a></h3>
<div class="fragment"><pre class="fragment">        <span class="comment">// Recommended when modifying the grid a lot at once</span>
        pg-&gt;Freeze();

        <span class="comment">// Necessary if you want a full-page loading</span>
        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#8bd2ae9a833e499d44086bace02ab613" title="Deletes all properties.">Clear</a>();

        <a class="code" href="classwxPropertyGridPopulator.htm" title="Allows populating wxPropertyGrid from arbitrary text source.">wxPropertyGridPopulator</a> populator(pg);

        <span class="comment">// Store strings from the source here</span>
        wxString s_class;
        wxString s_name;
        wxString s_value;
        wxString s_attr;

        <span class="comment">// Each set of choices loaded must have id</span>
        wxPGChoicesId choicesId;

        wxArrayString choiceLabels;
        wxArrayInt choiceValues;

        <span class="comment">// Pseudo-code loop to parse the source one "line" at a time</span>
        <span class="keywordflow">while</span> ( !source.IsAtEnd() )
        {

            <span class="comment">// Clear stuff that doesn't exist at every "line"</span>
            choicesId = (wxPGChoicesId) 0;
            choiceLabels.Empty();
            choiceValues.Empty();

            <span class="comment">// TODO: Load "line" to variables</span>

            <span class="comment">// TODO: When a sequence of sibling properties is terminated, call this:</span>
            <span class="comment">//   populator.EndChildren();</span>

            <span class="comment">// TODO: If had choices, use following code:</span>
            <span class="comment">//    if ( choicesId &amp;&amp; !populator.HasChoices(choicesId) )</span>
            <span class="comment">//    {</span>
            <span class="comment">//        populator.AddChoices(choicesId,choiceLabels,choiceValues);</span>
            <span class="comment">//    }</span>

            <span class="comment">// TODO: Add the property.</span>
            <span class="comment">//   (for sake of simplicity we use here default name for properties)</span>
            <span class="comment">//    populator.AppendByClass(s_class,</span>
            <span class="comment">//                            s_name,</span>
            <span class="comment">//                            wxPG_LABEL,</span>
            <span class="comment">//                            s_value,</span>
            <span class="comment">//                            s_attr,</span>
            <span class="comment">//                            choicesId);</span>

            <span class="comment">// TODO: When a sequence of sibling properties begins, call this:</span>
            <span class="comment">//   populator.BeginChildren();</span>

        }

        pg-&gt;Thaw();
</pre></div><p>
For more practical'ish example, see FormMain::OnLoadFromFileClick in propgridsample.cpp.<h2><a class="anchor" name="customizing">
Customizing Properties (without sub-classing)</a></h2>
In this section are presented various ways to have custom appearance and behaviour for your properties without all the necessary hassle of sub-classing a property class etc.<h3><a class="anchor" name="customimage">
Setting Value Image</a></h3>
Every property can have a small value image placed in front of the actual value text. Built-in example of this can be seen with wxColourProperty and wxImageFileProperty, but for others it can be set using <a class="el" href="classwxPropertyContainerMethods.htm#d7b6373118833ba4a162c0836cc3d730" title="Set wxBitmap in front of the value.">wxPropertyGrid::SetPropertyImage</a> method.<h3><a class="anchor" name="customvalidator">
Setting Validator</a></h3>
You can set wxValidator for a property using <a class="el" href="classwxPropertyContainerMethods.htm#b2817bae8743408b308064fbf669e99f" title="Sets validator of a property.">wxPropertyGrid::SetPropertyValidator</a>.<h3><a class="anchor" name="customeditor">
Setting Property's Editor Control(s)</a></h3>
You can set editor control (or controls, in case of a control and button), of any property using <a class="el" href="classwxPropertyContainerMethods.htm#13127b43df2394954d25b6b2cae23d37" title="Sets editor control of a property.">wxPropertyGrid::SetPropertyEditor</a>. Editors are passed using wxPG_EDITOR(EditorName) macro, and valid built-in EditorNames are TextCtrl, Choice, ComboBox, CheckBox, TextCtrlAndButton, ChoiceAndButton, SpinCtrl, and DatePickerCtrl. Two last mentioned ones require call to static member function <a class="el" href="classwxPropertyContainerMethods.htm#effb0a6d63b62ea7d38978844591e9a1" title="Initializes additional property editors (SpinCtrl etc.">wxPropertyGrid::RegisterAdditionalEditors()</a>.<p>
Following example changes wxColourProperty's editor from default Choice to TextCtrlAndButton. wxColourProperty has its internal event handling set up so that button click events of the button will be used to trigger colour selection dialog.<p>
<div class="fragment"><pre class="fragment">        <a class="code" href="classwxPGId.htm" title="Simple wrapper for the wxPGProperty pointer.">wxPGId</a> colProp = pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>(wxColourProperty(wxT(<span class="stringliteral">"Text Colour"</span>)));

        pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#13127b43df2394954d25b6b2cae23d37" title="Sets editor control of a property.">SetPropertyEditor</a>(colProp,wxPG_EDITOR(TextCtrlAndButton));
</pre></div><p>
Naturally, creating and setting custom editor classes is a possibility as well. For more information, see <a class="el" href="classwxPGEditor.htm" title="Base for property editor classes.">wxPGEditor</a> class reference.<h3><a class="anchor" name="customeventhandling">
Handling Events Passed from Properties</a></h3>
<b>wxEVT_COMMAND_BUTTON_CLICKED </b>(corresponds to event table macro EVT_BUTTON): Occurs when editor button click is not handled by the property itself (as is the case, for example, if you set property's editor to TextCtrlAndButton from the original TextCtrl).<h3><a class="anchor" name="attributes">
Property Attributes</a></h3>
Miscellaneous values, often specific to a property type, can be set using <a class="el" href="classwxPropertyContainerMethods.htm#7e412a0ff4ab53a4fc7854492f8a33f2" title="Sets an attribute of a property.">wxPropertyGrid::SetPropertyAttribute</a> and <a class="el" href="classwxPropertyGrid.htm#ccf819e4453045356215389b483d9b4c" title="Sets property attribute for all applicapple properties.">wxPropertyGrid::SetPropertyAttributeAll</a> methods.<p>
For complete list of attributes, see <a class="el" href="group__attrids.htm">Property Attributes</a>.<h3><a class="anchor" name="boolcheckbox">
Setting wxBoolProperties to Use Check Box</a></h3>
To have all wxBoolProperties to use CheckBox editor instead of Choice, use following (call after bool properties have been added):<p>
<div class="fragment"><pre class="fragment">        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#ccf819e4453045356215389b483d9b4c" title="Sets property attribute for all applicapple properties.">SetPropertyAttributeAll</a>(<a class="code" href="group__attrids.htm#g9e92f4867bf9fbc7c71779c74d18ccd1" title="wxBoolProperty specific, int, default 0.">wxPG_BOOL_USE_CHECKBOX</a>,(<span class="keywordtype">long</span>)1);
</pre></div><h2><a class="anchor" name="custprop">
wxCustomProperty</a></h2>
wxCustomProperty allows extra customizing.<p>
<ul>
<li>May have children.</li></ul>
<p>
For more info on attributes, see <a class="el" href="group__attrids.htm">wxPropertyGrid Property Attribute Identifiers</a>. In sample application, there is a CustomProperty property that has children that can be used to modify the property itself.<p>
<dl class="remark" compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Children of wxParentProperty cannot be accessed globally by their name. Instead, use "Parent.Child" format.</li><li>However, events occur for the children, not the parent. In addition to GetPropertyParent, You can use wxPropertyGridEvent::GetMainParent() to find out property's highest wxParentProperty or wxCustomProperty.</li></ul>
</dd></dl>
<b>Limitations:</b><ul>
<li>Currently wxCustomProperty is limited to wxString value type.</li><li>As in wxParentProperty: names of child properties are not visible globally. You need to use "Parent.SubProperty" name format to access them.</li></ul>
<h2><a class="anchor" name="usage2">
Using wxPropertyGridManager (Updated!)</a></h2>
<a class="el" href="classwxPropertyGridManager.htm" title="wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid, which...">wxPropertyGridManager</a> is an efficient multi-page version of <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>, which can optionally have toolbar for mode and page selection, help text box, and a compactor button.<p>
<a class="el" href="classwxPropertyGridManager.htm" title="wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid, which...">wxPropertyGridManager</a> mirrors most non-visual methods of <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>, some identically, some so that they can affect a property on any page, and some so that they can only affect selected target page.<p>
Generally, methods that operate on a property ( such as GetPropertyValue, SetPropertyValue, EnableProperty, LimitPropertyEditing, Delete, etc. ), work globally (so the given property can exist on any managed page).<p>
Methods that add properties ( Append, Insert, etc.) or operate on multiple properties (such as GetPropertyValues or SetPropertyValues), will work in target page only. Use SetTargetPage(index) method to set current target page. Changing a displayed page (using SelectPage(index), for example) will automatically set the target page to the one displayed.<p>
Global methods such as ExpandAll generally work on the target page only.<p>
Visual methods, such as SetCellBackgroundColour and GetNextVisible are only available in <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>. Use <a class="el" href="classwxPropertyGridManager.htm#a0c62e680e94493dabdf40ab4642fef6" title="Returns pointer to the contained wxPropertyGrid.">wxPropertyGridManager::GetGrid()</a> to obtain pointer to it.<p>
<a class="el" href="classwxPropertyGridManager.htm" title="wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid, which...">wxPropertyGridManager</a> constructor has exact same format as <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> constructor, and basicly accepts same extra window style flags (albeit also has some extra ones).<p>
Here's some example code for creating and populating a <a class="el" href="classwxPropertyGridManager.htm" title="wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid, which...">wxPropertyGridManager</a>:<p>
<div class="fragment"><pre class="fragment">        <a class="code" href="classwxPropertyGridManager.htm" title="wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid, which...">wxPropertyGridManager</a>* pgMan = <span class="keyword">new</span> <a class="code" href="classwxPropertyGridManager.htm" title="wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid, which...">wxPropertyGridManager</a>(<span class="keyword">this</span>, PGID,
            wxDefaultPosition, wxDefaultSize,
            <span class="comment">// These and other similar styles are automatically</span>
            <span class="comment">// passed to the embedded wxPropertyGrid.</span>
            <a class="code" href="group__wndflags.htm#g850bdaf47523b52677cef5e05922c283" title="Modified values are shown in bold font.">wxPG_BOLD_MODIFIED</a>|<a class="code" href="group__wndflags.htm#g15dc4929194a3f0bd94bfd040a52e684" title="When wxPropertyGrid is resized, splitter moves to the center.">wxPG_SPLITTER_AUTO_CENTER</a>|
            <span class="comment">// Include toolbar.</span>
            <a class="code" href="group__wndflags.htm#g64a30b672f8c34ab3e7a066e3c36b4bd" title="wxPropertyGridManager only: Show toolbar for mode and page selection.">wxPG_TOOLBAR</a> |
            <span class="comment">// Include description box.</span>
            <a class="code" href="group__wndflags.htm#gcd84100a8aa22f6c6d429da8b2a22851" title="wxPropertyGridManager only: Show adjustable text box showing description or help...">wxPG_DESCRIPTION</a> |
            <span class="comment">// Include compactor.</span>
            <a class="code" href="group__wndflags.htm#g834538c7e9aca6068d102c7041974fa6" title="wxPropertyGridManager only: Show compactor button that toggles hidden state of low-priority...">wxPG_COMPACTOR</a> |
            <span class="comment">// Plus defaults.</span>
            <a class="code" href="group__wndflags.htm#g422babdd5ce8058435ed638fd1c486b0" title="Combines various styles.">wxPGMAN_DEFAULT_STYLE</a>
           );

        <span class="comment">// Adding a page sets target page to the one added, so</span>
        <span class="comment">// we don't have to call SetTargetPage if we are filling</span>
        <span class="comment">// it right after adding.</span>
        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#9b2de39af66922100296044f49ddd51e" title="Creates new property page.">AddPage</a>(wxT(<span class="stringliteral">"First Page"</span>));

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#9c6d099a6815da9ba4b177ca6f6babc9" title="See wxPropertyGrid::Append.">AppendCategory</a>(wxT(<span class="stringliteral">"Category A1"</span>));

        <span class="comment">// Remember, the next line equals pgman-&gt;Append( wxIntProperty(wxT("Number"),wxPG_LABEL,1) );</span>
        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#5ce98997e68d79c1c3dd2aa1c5575a98" title="See wxPropertyGrid::Append.">Append</a>( wxT(<span class="stringliteral">"Number"</span>),wxPG_LABEL,1 );

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#5ce98997e68d79c1c3dd2aa1c5575a98" title="See wxPropertyGrid::Append.">Append</a>( wxColourProperty(wxT(<span class="stringliteral">"Colour"</span>),wxPG_LABEL,*wxWHITE) );

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#9b2de39af66922100296044f49ddd51e" title="Creates new property page.">AddPage</a>(wxT(<span class="stringliteral">"Second Page"</span>));

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#5ce98997e68d79c1c3dd2aa1c5575a98" title="See wxPropertyGrid::Append.">Append</a>( wxT(<span class="stringliteral">"Text"</span>),wxPG_LABEL,wxT(<span class="stringliteral">"(no text)"</span>) );

        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#5ce98997e68d79c1c3dd2aa1c5575a98" title="See wxPropertyGrid::Append.">Append</a>( wxFontProperty(wxT(<span class="stringliteral">"Font"</span>),wxPG_LABEL) );

        <span class="comment">// For total safety, finally reset the target page.</span>
        pgMan-&gt;<a class="code" href="classwxPropertyGridManager.htm#796cbac4aeb8e6f8540987ec18fe5e8f" title="Sets page to which append, insert, etc.">SetTargetPage</a>(0);
</pre></div><h3><a class="anchor" name="propgridpage">
wxPropertyGridPage (New!)</a></h3>
<a class="el" href="classwxPropertyGridPage.htm" title="Holder of property grid page information.">wxPropertyGridPage</a> is holder of properties for one page in manager. It is derived from wxEvtHandler, so you can subclass it to process page-specific property grid events. Hand over your page instance in <a class="el" href="classwxPropertyGridManager.htm#9b2de39af66922100296044f49ddd51e" title="Creates new property page.">wxPropertyGridManager::AddPage</a>.<p>
Please note that the <a class="el" href="classwxPropertyGridPage.htm" title="Holder of property grid page information.">wxPropertyGridPage</a> itself only sports subset of <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> API. Naturally it inherits from wxPropertyGridMethods and <a class="el" href="classwxPropertyGridState.htm" title="Contains information of a single wxPropertyGrid page.">wxPropertyGridState</a>, but, for instance, setting property values is not yet supported. Use parent manager (m_manager member) instead when needed. Basic property appending and insertion is supported, however.<h2><a class="anchor" name="subclassing">
Subclassing wxPropertyGrid and wxPropertyGridManager (New!)</a></h2>
Few things to note:<p>
<ul>
<li>Only a small percentage of member functions are virtual. If you need more, just let me know.</li></ul>
<p>
<ul>
<li>Data manipulation is done in <a class="el" href="classwxPropertyGridState.htm" title="Contains information of a single wxPropertyGrid page.">wxPropertyGridState</a> class. So, instead of overriding <a class="el" href="classwxPropertyGrid.htm#637a3bbf1b34ae9f456ffbd1f20d492d" title="Inserts property to the list.">wxPropertyGrid::Insert</a>, you'll probably want to override <a class="el" href="classwxPropertyGridState.htm#01e1ceccf3fea1b0d119c6380d5dcde6" title="Override this member function to add custom behaviour on property insertion.">wxPropertyGridState::DoInsert</a>.</li></ul>
<p>
<ul>
<li>Override <a class="el" href="classwxPropertyGrid.htm#c75d3bf6a0e32c5526af8924a657da89" title="wxPropertyGridState used by the grid is created here.">wxPropertyGrid::CreateState</a> to instantiate your derivative <a class="el" href="classwxPropertyGridState.htm" title="Contains information of a single wxPropertyGrid page.">wxPropertyGridState</a>. For <a class="el" href="classwxPropertyGridManager.htm" title="wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid, which...">wxPropertyGridManager</a>, you'll need to subclass <a class="el" href="classwxPropertyGridPage.htm" title="Holder of property grid page information.">wxPropertyGridPage</a> instead (since it is derived from <a class="el" href="classwxPropertyGridState.htm" title="Contains information of a single wxPropertyGrid page.">wxPropertyGridState</a>), and hand over instances in <a class="el" href="classwxPropertyGridManager.htm#9b2de39af66922100296044f49ddd51e" title="Creates new property page.">wxPropertyGridManager::AddPage</a> calls.</li></ul>
<p>
<ul>
<li>You can use a derivate <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> with manager by overriding <a class="el" href="classwxPropertyGridManager.htm#6980326efa2bfc466aa9a5bbead7fe8c" title="Creates property grid for the manager.">wxPropertyGridManager::CreatePropertyGrid</a> member function.</li></ul>
<h2><a class="anchor" name="misc">
Miscellaneous Topics (Updated!)</a></h2>
<h3><a class="anchor" name="namescope">
Property Name Scope</a></h3>
<ul>
<li>All properties which parent is category or root have their names globally accessible.</li></ul>
<p>
<ul>
<li>Sub-properties (i.e. properties which have parent that is not category or root) can not be accessed globally by their name. Instead, use "&lt;property&gt;.&lt;subproperty&gt;" in place of "&lt;subproperty&gt;".</li></ul>
<h3><a class="anchor" name="boolproperty">
wxBoolProperty</a></h3>
There are few points about wxBoolProperty that require futher discussion:<ul>
<li>wxBoolProperty can be shown as either normal combobox or as a checkbox. Property attribute wxPG_BOOL_USE_CHECKBOX is used to change this. For example, if you have a wxFlagsProperty, you can set its all items to use check box using the following: <div class="fragment"><pre class="fragment">            pg-&gt;<a class="code" href="classwxPropertyContainerMethods.htm#7e412a0ff4ab53a4fc7854492f8a33f2" title="Sets an attribute of a property.">SetPropertyAttribute</a>(wxT(<span class="stringliteral">"MyFlagsProperty"</span>),<a class="code" href="group__attrids.htm#g9e92f4867bf9fbc7c71779c74d18ccd1" title="wxBoolProperty specific, int, default 0.">wxPG_BOOL_USE_CHECKBOX</a>,(<span class="keywordtype">long</span>)1,wxPG_RECURSE);
</pre></div></li></ul>
<p>
<ul>
<li>Default item names for wxBoolProperty are [wxT("False"),wxT("True")]. This can be changed using wxPropertyGrid::SetBoolChoices(trueChoice,falseChoice).</li></ul>
<h3><a class="anchor" name="textctrlupdates">
Updates from wxTextCtrl Based Editor</a></h3>
Changes from wxTextCtrl based property editors are committed (ie. wxEVT_PG_CHANGED is sent etc.) *only* when (1) user presser enter, (2) user moves to edit another property, or (3) when focus or mouse leaves the grid.<p>
Because of this, you may find it useful, in some apps, to monitor wxEVT_COMMAND_TEXT_UPDATED (EVT_TEXT macro) for non-committed changes in editor. However, the current problem is that pressing Esc in editor cancels any changes made, thus possibly rendering your knowledge of changed state incomplete. There is no current, perfect solution for this problem.<h3><a class="anchor" name="splittercentering">
Centering the Splitter (New!)</a></h3>
If you need to center the splitter, but only once when the program starts, then do <b>not</b> use the wxPG_SPLITTER_AUTO_CENTER window style, but the <a class="el" href="classwxPropertyGrid.htm#5615a51771342a624f8f8786bcc2d465" title="Centers the splitter.">wxPropertyGrid::CenterSplitter()</a> method. <b>However, be sure to call it after the sizer setup and SetSize calls!</b> (ie. usually at the end of the frame/dialog constructor)<h3><a class="anchor" name="compilerdefines">
Supported Preprocessor Defines</a></h3>
Here is list of supported preprocessor defines (other than those that relate with wxWidgets core library):<p>
<b>wxPG_USE_WXMODULE:</b> Define as 0 to not use wxModule to manage global variables. This may be needed in cases where <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> is linked as a plugin DLL, or when <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> is linked statically in a DLL.<p>
<b>WXMAKINGLIB_PROPGRID:</b> Define if you are linking <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> statically but wxWidgets itself is DLL.<p>
<b>WXMAKINGDLL_PROPGRID:</b> Define when building <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> as a DLL. This should be automatically defined correctly by the Bakefile-generated makefiles.<p>
<b>wxPG_COMPATIBILITY_1_0_0:</b> Define to make <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> more compatible with the old 1.0.x releases.<h2><a class="anchor" name="proplist">
Property Type Descriptions (Updated!)</a></h2>
Here are descriptions of built-in properties, with attributes (see <a class="el" href="classwxPropertyContainerMethods.htm#7e412a0ff4ab53a4fc7854492f8a33f2" title="Sets an attribute of a property.">wxPropertyGrid::SetPropertyAttribute</a>) that apply to them. Note that not all attributes are necessarily here. For complete list, see <a class="el" href="group__attrids.htm">Property Attributes</a>.<h3><a class="anchor" name="wxPropertyCategory">
wxPropertyCategory</a></h3>
<b>Inheritable Class:</b> <a class="el" href="classwxPropertyCategoryClass.htm" title="Category (caption) property.">wxPropertyCategoryClass</a>.<p>
Not an actual property per se, but a header for a group of properties.<h3><a class="anchor" name="wxParentProperty">
wxParentProperty</a></h3>
Pseudo-property that can have sub-properties inserted under itself. Has textctrl editor that allows editing values of all sub-properties in a one string. In essence, it is a category that has look and feel of a property, and which children can be edited via the textctrl.<h3><a class="anchor" name="wxStringProperty">
wxStringProperty</a></h3>
<b>Inheritable Class:</b> wxStringProperty<p>
Simple string property. wxPG_STRING_PASSWORD attribute may be used to echo value as asterisks and use wxTE_PASSWORD for wxTextCtrl.<h3><a class="anchor" name="wxIntProperty">
wxIntProperty</a></h3>
Like wxStringProperty, but converts text to a signed long integer.<h3><a class="anchor" name="wxUIntProperty">
wxUIntProperty</a></h3>
Like wxIntProperty, but displays value as unsigned int. To set the prefix used globally, manipulate wxPG_UINT_PREFIX string attribute. To set the globally used base, manipulate wxPG_UINT_BASE int attribute. Regardless of current prefix, understands (hex) values starting with both "0x" and "$".<h3><a class="anchor" name="wxFloatProperty">
wxFloatProperty</a></h3>
Like wxStringProperty, but converts text to a double-precision floating point. Default float-to-text precision is 6 decimals, but this can be changed by modifying wxPG_FLOAT_PRECISION attribute.<h3><a class="anchor" name="wxBoolProperty">
wxBoolProperty</a></h3>
Represents a boolean value. wxChoice is used as editor control, by the default. wxPG_BOOL_USE_CHECKBOX attribute can be set to 1 inorder to use check box instead.<h3><a class="anchor" name="wxLongStringProperty">
wxLongStringProperty</a></h3>
<b>Inheritable Class:</b> wxLongStringPropertyClass<p>
Like wxStringProperty, but has a button that triggers a small text editor dialog.<h3><a class="anchor" name="wxDirProperty">
wxDirProperty</a></h3>
Like wxLongStringProperty, but the button triggers dir selector instead.<h3><a class="anchor" name="wxFileProperty">
wxFileProperty</a></h3>
<b>Inheritable Class:</b> wxFilePropertyClass<p>
Like wxLongStringProperty, but the button triggers file selector instead. Default wildcard is "All files..." but this can be changed by setting wxPG_FILE_WILDCARD attribute (see wxFileDialog for format details). Attribute wxPG_FILE_SHOW_FULL_PATH can be set to 0 inorder to show only the filename, not the entire path.<h3><a class="anchor" name="wxEnumProperty">
wxEnumProperty</a></h3>
<b>Inheritable Class:</b> wxEnumPropertyClass<p>
Represents a single selection from a list of choices - custom combobox control is used to edit the value.<h3><a class="anchor" name="wxFlagsProperty">
wxFlagsProperty</a></h3>
<b>Inheritable Class:</b> wxFlagsPropertyClass<p>
Represents a bit set that fits in a long integer. wxBoolProperty sub-properties are created for editing individual bits. Textctrl is created to manually edit the flags as a text; a continous sequence of spaces, commas and semicolons is considered as a flag id separator. <b>Note: </b> When changing "choices" (ie. flag labels) of wxFlagsProperty, you will need to use SetPropertyChoices - otherwise they will not get updated properly.<h3><a class="anchor" name="wxArrayStringProperty">
wxArrayStringProperty</a></h3>
<b>Inheritable Class:</b> wxArrayStringPropertyClass<p>
Allows editing of a list of strings in wxTextCtrl and in a separate dialog.<h3><a class="anchor" name="wxDateProperty">
wxDateProperty</a></h3>
<b>Inheritable Class:</b> wxDatePropertyClass<p>
wxDateTime property. Default editor is DatePickerCtrl, altough TextCtrl should work as well. wxPG_DATE_FORMAT attribute can be used to change string wxDateTime::Format uses (altough default is recommended as it is locale-dependant), and wxPG_DATE_PICKER_STYLE allows changing window style given to DatePickerCtrl (default is wxDP_DEFAULT|wxDP_SHOWCENTURY).<p>
<b> Note that DatePickerCtrl editor depends on wxAdv library, and will only be used if wxPG_ALLOW_WXADV is defined in propgrid.h or in the library project settings. </b><h3><a class="anchor" name="wxEditEnumProperty">
wxEditEnumProperty</a></h3>
Represents a string that can be freely edited or selected from list of choices - custom combobox control is used to edit the value.<h3><a class="anchor" name="wxMultiChoiceProperty">
wxMultiChoiceProperty</a></h3>
<b>Inheritable Class:</b> wxMultiChoicePropertyClass<p>
Allows editing a multiple selection from a list of strings. This is property is pretty much built around concept of wxMultiChoiceDialog.<h3><a class="anchor" name="wxImageFileProperty">
wxImageFileProperty</a></h3>
<b>Inheritable Class:</b> wxImageFilePropertyClass<p>
Like wxFileProperty, but has thumbnail of the image in front of the filename and autogenerates wildcard from available image handlers.<h3><a class="anchor" name="wxColourProperty">
wxColourProperty</a></h3>
<b>Inheritable Class:</b> None - instead, see <a class="el" href="index.htm#custcolprop">Custom ColourProperty</a>.<p>
<b>Useful alternate editor:</b> Choice.<p>
Represents wxColour. wxButton is used to trigger a colour picker dialog.<h3><a class="anchor" name="wxFontProperty">
wxFontProperty</a></h3>
<b>Inheritable Class:</b> wxFontPropertyClass<p>
Represents wxFont. Various sub-properties are used to edit individual subvalues.<h3><a class="anchor" name="wxSystemColourProperty">
wxSystemColourProperty</a></h3>
<b>Inheritable Class:</b> wxSystemColourPropertyClass<p>
Represents wxColour and a system colour index. wxChoice is used to edit the value. Drop-down list has color images.<h3><a class="anchor" name="wxCursorProperty">
wxCursorProperty</a></h3>
<b>Inheritable Class:</b> wxCursorPropertyPropertyClass<p>
Represents a wxCursor. wxChoice is used to edit the value. Drop-down list has cursor images under some (wxMSW) platforms.<h3><a class="anchor" name="wxCustomProperty">
wxCustomProperty</a></h3>
<b>Inheritable Class:</b> <a class="el" href="classwxCustomPropertyClass.htm" title="This is a rather inefficient but very versatile property class.">wxCustomPropertyClass</a><p>
A customizable property class with string data type. Value image, Editor class, and children can be modified.<h3><a class="anchor" name="Additional">
Sample Properties</a></h3>
Sample application has following additional examples of custom properties:<ul>
<li>wxFontDataProperty ( edits wxFontData )</li><li>wxPointProperty ( edits wxPoint )</li><li>wxSizeProperty ( edits wxSize )</li><li>wxAdvImageFileProperty ( like wxImageFileProperty, but also has a drop-down for recent image selection)</li><li>wxDirsProperty ( edits a wxArrayString consisting of directory strings)</li><li>wxArrayDoubleProperty ( edits wxArrayDouble )</li></ul>
<h2><a class="anchor" name="userhelp">
Using wxPropertyGrid (Updated!)</a></h2>
This is a short summary of how a <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> is used (not how it is programmed), or, rather, how it <b>should</b> behave in practice.<p>
<ul>
<li>Basic mouse usage is as follows:<br>
<ul>
<li>Clicking property label selects it.</li><li>Clicking property value selects it and focuses to editor control.</li><li>Clicking category label selects the category.</li><li>Double-clicking category label selects the category and expands/collapses it.</li><li>Double-clicking labels of a property with children expands/collapses it.</li></ul>
</li></ul>
<p>
<ul>
<li>Keyboard usage is as follows:<br>
<ul>
<li>alt + down (or right) - displays editor dialog (if any) for a property. Note that this shortcut can be changed using <a class="el" href="classwxPropertyGrid.htm#523f90a749685d6d97ca247907f1793a" title="Changes keyboard shortcut to push the editor button.">wxPropertyGrid::SetButtonShortcut</a>.<br>
 Only when editor control is not focused:<br>
</li><li>cursor up - moves to previous visible property<br>
</li><li>cursor down - moves to next visible property<br>
</li><li>cursor left - if collapsible, collapses, otherwise moves to previous property<br>
</li><li>cursor right - if expandable, expands, otherwise moves to next property<br>
</li><li>tab (if enabled) - focuses keyboard to the editor control of selected property<br>
 Only when editor control is focused:<br>
</li><li>return/enter - confirms changes made to a wxTextCtrl based editor<br>
</li><li>tab - moves to next visible property (or, if in last one, moves out of grid)<br>
</li><li>shift-tab - moves to previous visible property (or, if in first one, moves out of grid)<br>
</li><li>escape - unfocuses from editor control and cancels any changes made (latter for wxTextCtrl based editor only)<br>
</li></ul>
</li></ul>
<p>
<ul>
<li>In long strings tabs are represented by "\t" and line break by "\n".</li></ul>
<h2><a class="anchor" name="bugs">
Known Bugs</a></h2>
NOTE! This section is severely out of date. TODO section in propgrid.cpp has a lot more of these. Any insight on these is more than welcome.<ul>
<li>wxGTK: Pressing ESC to unfocus an editor control will screw the focusing (either focuses back to the editor or moves focus to limbo; works perfectly on wxMSW though).</li><li>I have experienced a complete freeze when toying with the popup of wxAdvImageProperty. Visiting another window will end it.</li><li>wxGTK: in sample application, property text colour is not set correct from wxSystemColourProperty. Value is correct, but the resulting text colour is sometimes a bit skewed if it is not a shade of gray. This may be GTK's attempt to auto-adjust it.</li><li>wxGTK: Sometimes '...' text on editor button may disappear (maybe "invisible font" related thingie). wxAdvImageProperty never seem to get the text, while other controls do. Following are wxWidgets or platform bugs:</li><li>wxMSW: After (real) popup window is shown in <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>, grid's scrollbar won't get hilight until another window is visited. This is probably a Windows bug.</li><li>wxGTK+ w/ unicode: image handlers return only the first character of an extension</li><li>wxGTK+ 1.2: Controls sometimes disappear. They reappear when cursor is moved over them.</li><li>wxGTK+ 1.2: Cannot set (multiple) items for wxListBox (affects wxMultiChoiceProperty).</li></ul>
<h2><a class="anchor" name="issues">
Issues</a></h2>
These are not bugs per se, but miscellaneous cross-platform issues that have been resolved in a less-than-satisfactory manner.<ul>
<li>wxGTK: When selecting wxCursorProperty in sample, there may be warning: Invalid UTF8 string passed to pango_layout_set_text(). This is probably specific to older versions of GTK.</li><li>Win2K: Pressing Alt+non-registered key combo resulted in app hanging when wxTAB_TRAVERSAL was used directly. Current solution is not to use it, but to use wxWANTS_CHARS alone. Strangely enough, this works on wxMSW (but not wxGTK - precompiler conditional are used to sort things out).</li><li>wxMSW: Toolbar's ToggleTool doesn't disable last item in the same radiogroup. AFAIK, there is no way to do that (though I didn't do extensive research).</li><li>Atleast with wxGTK2+Unicode+Debug Mode File Selector dialog may trigger an assertion failure (line 1060 in string.cpp with 2.5.3) that can be cancelled probably without any ill-effect.</li><li>Under GTK, EVT_MOTION does not trigger for child control. Causes cursor change inconsistencies. Permanent mouse capture is not practical since it causes wxWindow:: SetCursor to fail (and events cannot be relayed to native controls anyway). Easy solution used: Splitter drag detect margin and control do not overlap.</li><li>When splitter is being dragged, active editor control (button as well under wxGTK) is hidden to prevent flickering. This may go unnoticed with some controls (wxTextCtrl) but is very noticeable with others (wxChoice).</li><li>Under MSW, when resizing, editor controls flicker. No easy fix here (wxEVT_ONIDLE might be employed).</li><li>Under GTK 1.2, font may show invisible if it is not bold (so it is forced).</li><li>Under wxGTK, controls may flicker a bit (actually, a lot) when being shown.</li></ul>
<h2><a class="anchor" name="todo">
Todo</a></h2>
For a detailed TODO, see propertygrid.cpp (just search for "todo" and you'll find it).<h2><a class="anchor" name="notes">
Design Notes</a></h2>
<ul>
<li>Currently <a class="el" href="classwxPropertyGridManager.htm" title="wxPropertyGridManager is an efficient multi-page version of wxPropertyGrid, which...">wxPropertyGridManager</a> uses "easy" way to relay events from embedded <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>. That is, the exact same id is used for both.</li></ul>
<p>
<ul>
<li>wxHashMap used to access properties by name uses 'const wxChar*' instead of 'wxString'. Altough this has somewhat lower performance if used mostly with wxStrings, it is much faster if a lot of non-wxString strings are used, since they don't have to be recreated as wxString before using with the hashmap. If you want to change this behaviour, see propertygrid.h. Comment current version (including wxPGNameStr), and uncomment version that uses wxString. Note that with unicode, wxString is always used (due to some weird issues).</li></ul>
<p>
<ul>
<li>If wxPG_DOUBLE_BUFFER is 1 (default for MSW, GTK and MAC), wxPropertyGrid::OnDrawItems composes the image on a wxMemoryDC. This effectively eliminates flicker caused by drawing itself (property editor controls are another matter).</li></ul>
<p>
<ul>
<li>Under wxMSW, flicker freedom when creating native editor controls is achieved by using following undocumented scheme: <div class="fragment"><pre class="fragment">        wxControl* ctrl = <span class="keyword">new</span> wxControl();
<span class="preprocessor">      #ifdef __WXMSW__</span>
<span class="preprocessor"></span>        ctrl-&gt;Hide();
<span class="preprocessor">      #endif</span>
<span class="preprocessor"></span>        ctrl-&gt;Create(parent,<span class="keywordtype">id</span>,...);

        ...further initialize, move, resize, etc...

      #ifdef __WXMSW__
        ctrl-&gt;Show();
<span class="preprocessor">      #endif</span>
</pre></div></li></ul>
<h2><a class="anchor" name="crossplatform">
Crossplatform Notes (not necessarily wxPropertyGrid specific)</a></h2>
<ul>
<li>GTK1: When showing a dialog you may encounter invisible font! Solution: Set parent's font using SetOwnFont instead of SetFont.</li></ul>
<p>
<ul>
<li>GTK: Your own control can overdraw wxGTK wxWindow border!</li></ul>
<p>
<ul>
<li>wxWindow::SetSizeHints may be necessary to shrink controls below certain treshold, but only on some platforms. For example wxMSW might allow any shrinking without SetSizeHints call where wxGTK might not.</li></ul>
<p>
<ul>
<li>GTK Choice (atleast, maybe other controls as well) likes its items set in constructor. Appending them seems to be slower (Freeze+Thaw won't help). Even using Append that gets wxArrayString argument may not be good, since it may just append every string one at a time.</li></ul>
<h2><a class="anchor" name="newprops">
Creating New Properties (Updated!)</a></h2>
Easiest solution for creating an arbitrary property is to subclass an existing, inheritable property that has the desired value type and editor. Property class to derive from is always property name + Class, for instance wxStringPropertyClass in case of wxStringProperty. You need to include header file wx/propgrid/propdev.h, specify a mandatory constructor, and override some virtual member functions (see <a class="el" href="classwxPGProperty.htm" title="wxPGProperty, alias wxBasePropertyClass, is base class for properties.">wxPGProperty</a> and <a class="el" href="classwxPGPropertyWithChildren.htm" title="wxPGPropertyWithChildren, alias wxParentPropertyClass, is a base class for new properties...">wxPGPropertyWithChildren</a>).<p>
For instance:<p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">    #include &lt;wx/propgrid/propdev.h&gt;</span>

    <span class="comment">// wxLongStringProperty has wxString as value type and TextCtrlAndButton as editor.</span>
    <span class="keyword">class </span>MyStringPropertyClass : <span class="keyword">public</span> wxLongStringPropertyClass
    {
    <span class="keyword">public</span>:

        <span class="comment">// Normal property constructor.</span>
        MyStringPropertyClass(<span class="keyword">const</span> wxString&amp; name,
                              <span class="keyword">const</span> wxString&amp; label = wxPG_LABEL,
                              <span class="keyword">const</span> wxString&amp; value = wxEmptyString)
            : wxLongStringPropertyClass(name,label,value)
        {
        }

        <span class="comment">// Do something special when button is clicked.</span>
        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> OnButtonClick(<a class="code" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>* propGrid,
                                   wxWindow* primaryCtrl)
        {
            <span class="comment">// Update value in case last minute changes were made.</span>
            PrepareValueForDialogEditing(propGrid);

            <span class="comment">// TODO: Create dialog (m_value has current string, if needed)</span>

            <span class="keywordtype">int</span> res = dlg.ShowModal();
            <span class="keywordflow">if</span> ( res == wxID_OK &amp;&amp; dlg.IsModified() )
            {
                DoSetValue(dlg.GetString());
                UpdateControl(primaryCtrl);
                <span class="keywordflow">return</span> <span class="keyword">true</span>;
            }

            <span class="keywordflow">return</span> <span class="keyword">false</span>;
        }

    <span class="keyword">protected</span>:
    };
</pre></div><p>
You can then create a property instance with new keyword (as factory function is absent since macros are not used), for instance:<p>
<div class="fragment"><pre class="fragment">        pg-&gt;<a class="code" href="classwxPropertyGrid.htm#304dc71900cdc1a8569e3078ad7f66f1" title="Appends property to the list.">Append</a>( <span class="keyword">new</span> MyStringPropertyClass(name,label,value) );
</pre></div><p>
If you want to change editor used, use code like below (continues our sample above).<p>
Note that built-in editors include: TextCtrl, Choice, ComboBox, TextCtrlAndButton, ChoiceAndButton, CheckBox, SpinCtrl, and DatePickerCtrl.<p>
<div class="fragment"><pre class="fragment">        <span class="comment">// In class body:</span>
        <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="classwxPGEditor.htm" title="Base for property editor classes.">wxPGEditor</a>* DoGetEditorClass()<span class="keyword"> const</span>
<span class="keyword">        </span>{
            <span class="keywordflow">return</span> wxPG_EDITOR(TextCtrl);
        }
</pre></div><p>
If you want to change value type used, use code like below.<p>
However, first a word on value types: They are essentially <a class="el" href="classwxPGValueType.htm" title="wxPGValueType is base class for property value types.">wxPGValueType</a> instances holding reimplemented member functions for handling specific type of data. Use wxPG_VALUETYPE(ValueType) to get pointer, altought this should usually not be necessary outside GetValueType. Lightweight wxPGVariant is used to convey value to (DoSetValue) and from (DoGetValue) property. For common and small types such as long and bool, the entire value is stored in wxPGVariant. For large types (even double!), only a pointer is stored. This is sufficient since <b>property instance is responsible for storing its value</b>.<p>
Built-in value types include: wxString, long, bool, double, void, wxArrayString. advprops.h also has: wxFont, wxColour, wxArrayInt. See below for more information about implementing your own value types.<p>
<div class="fragment"><pre class="fragment">        <span class="comment">// In class body:</span>
    <span class="keyword">public</span>:

        <span class="comment">// Minimal constructor must set the new value.</span>
        MyPropertyClass(<span class="keyword">const</span> wxString&amp; name,
                        <span class="keyword">const</span> wxString&amp; label = wxPG_LABEL,
                        UsedDataType value = DefaultValue)
            : wxInheritedPropertyClass(name,label,OtherDefaultValue)
        {
            m_value2 = value;
        }

        <span class="keyword">virtual</span> <span class="keyword">const</span> <a class="code" href="classwxPGValueType.htm" title="wxPGValueType is base class for property value types.">wxPGValueType</a>* GetValueType()<span class="keyword"> const</span>
<span class="keyword">        </span>{
            <span class="keywordflow">return</span> wxPG_VALUETYPE(UsedDataType);
        }

        <span class="keyword">virtual</span> <span class="keywordtype">void</span> DoSetValue(wxPGVariant value)
        {
            <span class="comment">// TODO: Retrieve value from wxPGVariant. For simple types,</span>
            <span class="comment">//       you can use:</span>
            <span class="comment">//</span>
            <span class="comment">//       UsedDataType val = value.GetFoo(); // Like GetString, or GetLong, similar to wxVariant</span>
            <span class="comment">//</span>
            <span class="comment">//       For complex types, use:</span>
            <span class="comment">//</span>
            <span class="comment">//       UsedDataType* pVal = (UsedDataType*) wxPGVariantToVoidPtr(value);</span>
            <span class="comment">//</span>
            <span class="comment">//         - OR -</span>
            <span class="comment">//</span>
            <span class="comment">//       UsedDataType* pVal = wxPGVariantToWxObjectPtr(value,UsedDataType);</span>
            <span class="comment">//       wxASSERT(ptr);  // Since its NULL if type-checking failed</span>
            <span class="comment">//</span>

            <span class="comment">// TODO: Store value to m_value2;</span>
        }

        <span class="keyword">virtual</span> wxPGVariant DoGetValue()<span class="keyword"> const</span>
<span class="keyword">        </span>{
            <span class="comment">// TODO: Return value as wxPGVariant.</span>
            <span class="comment">//</span>
            <span class="comment">// For simple types, return the entire value. For example:</span>
            <span class="comment">//</span>
            <span class="comment">//      return wxPGVariant(m_value2);</span>
            <span class="comment">//</span>
            <span class="comment">// For complex types, return pointer. For example:</span>
            <span class="comment">//</span>
            <span class="comment">//      return wxPGVariant((void*)&amp;m_value2);</span>
        }

        <span class="keyword">virtual</span> wxString GetValueAsString(<span class="keywordtype">int</span> argFlags)<span class="keyword"> const</span>
<span class="keyword">        </span>{
            <span class="comment">// TODO: If (argFlags &amp; wxPG_FULL_VALUE), then return storable</span>
            <span class="comment">//       (to config, database, etc) string. Otherwise return</span>
            <span class="comment">//       shown string.</span>
        }

        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetValueFromString(<span class="keyword">const</span> wxString&amp; text,
                                                       <span class="keywordtype">int</span> WXUNUSED(argFlags))
        {
            <span class="comment">// TODO: Set value from given string (which is same as previously</span>
            <span class="comment">//       returned from GetValueAsString(wxPG_FULL_VALUE)). Return</span>
            <span class="comment">//       true if value was actually changed.</span>
        }

    <span class="keyword">protected</span>:
        UsedDataType     m_value2;
</pre></div><p>
If you want to add support for the internal RTTI scheme, use code like this:<p>
<div class="fragment"><pre class="fragment">        <span class="comment">// In private portion of class body:</span>
        WX_PG_DECLARE_CLASSINFO()

        <span class="comment">// In source file:</span>
        WX_PG_IMPLEMENT_CLASSINFO(MyStringProperty,wxLongStringProperty)
        wxPG_GETCLASSNAME_IMPLEMENTATION(MyStringProperty)
</pre></div><p>
<dl class="remark" compact><dt><b>Remarks:</b></dt><dd><ul>
<li>For practical examples of arbitrary properties, please take a look at the sample properties in contrib/samples/propgrid/sampleprops.cpp.</li><li>Read <a class="el" href="classwxPGProperty.htm" title="wxPGProperty, alias wxBasePropertyClass, is base class for properties.">wxPGProperty</a> and <a class="el" href="classwxPGPropertyWithChildren.htm" title="wxPGPropertyWithChildren, alias wxParentPropertyClass, is a base class for new properties...">wxPGPropertyWithChildren</a> class documentation to find out what each virtual member function should do.</li><li>Value for property is usually stored in a member named m_value.</li><li>Documentation below may be helpful (altough you'd probably do better by looking at the sample properties first).</li></ul>
</dd></dl>
<h3><a class="anchor" name="methoda">
Macro Pairs</a></h3>
These are quick methods for creating customized properties.<h4><a class="anchor" name="custstringprop">
String Property with Button</a></h4>
This custom property will be exactly the same as wxLongStringProperty, except that you can specify a custom code to handle what happens when the button is pressed.<p>
In header: <div class="fragment"><pre class="fragment">        WX_PG_DECLARE_STRING_PROPERTY(PROPNAME)
</pre></div><p>
In source: <div class="fragment"><pre class="fragment"><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        <span class="comment">// FLAGS can be wxPG_NO_ESCAPE if escape sequences shall not be expanded.</span>
        WX_PG_IMPLEMENT_STRING_PROPERTY(PROPNAME, FLAGS)

        bool PROPNAMEClass::OnButtonClick( <a class="code" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>* propgrid, wxString&amp; value )
        {
            <span class="comment">//</span>
            <span class="comment">// TODO: Show dialog, read initial string from value. If changed,</span>
            <span class="comment">//   store new string to value and return TRUE.</span>
            <span class="comment">//</span>
        }
</pre></div><p>
FLAGS is either wxPG_NO_ESCAPE (newlines and tabs are not translated to and from escape sequences) or wxPG_ESCAPE (newlines and tabs are transformed into C-string escapes).<p>
There is also WX_PG_IMPLEMENT_STRING_PROPERTY_WITH_VALIDATOR variant which also allows setting up a validator for the property. Like this:<p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        WX_PG_IMPLEMENT_STRING_PROPERTY_WITH_VALIDATOR(PROPNAME, FLAGS)

        bool PROPNAMEClass::OnButtonClick( <a class="code" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a>* propgrid, wxString&amp; value )
        {
            <span class="comment">//</span>
            <span class="comment">// TODO: Show dialog, read initial string from value. If changed,</span>
            <span class="comment">//   store new string to value and return TRUE.</span>
            <span class="comment">//</span>
        }

        wxValidator* PROPNAMEClass::DoGetValidator()<span class="keyword"> const</span>
<span class="keyword">        </span>{
            <span class="comment">//</span>
            <span class="comment">// TODO: Return pointer to a new wxValidator instance. In most situations,</span>
            <span class="comment">//   code like this should work well:</span>
            <span class="comment">//</span>
            <span class="comment">//    WX_PG_DOGETVALIDATOR_ENTRY()</span>
            <span class="comment">//</span>
            <span class="comment">//    wxMyValidator* validator = new wxMyValidator(...);</span>
            <span class="comment">//</span>
            <span class="comment">//    ... prepare validator...</span>
            <span class="comment">//</span>
            <span class="comment">//    WX_PG_DOGETVALIDATOR_EXIT(validator)</span>
            <span class="comment">//</span>
            <span class="comment">//  Macros are used to maintain only one actual validator instance</span>
            <span class="comment">//  (ie. on a second call, function exits within the first macro).</span>
            <span class="comment">//</span>
            <span class="comment">//  For real examples, search props.cpp for ::DoGetValidator, it should</span>
            <span class="comment">//  have several.</span>
            <span class="comment">//</span>
        }
</pre></div><h4><a class="anchor" name="custflagsprop">
Custom Flags Property</a></h4>
Flags property with custom default value and built-in labels/values.<p>
In header: <div class="fragment"><pre class="fragment">        WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY(PROPNAME)
</pre></div><p>
In source: <div class="fragment"><pre class="fragment"><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        <span class="comment">// LABELS are VALUES are as in the arguments to wxFlagsProperty</span>
        <span class="comment">// constructor. DEFVAL is the new default value (normally it is 0).</span>
        WX_PG_IMPLEMENT_CUSTOM_FLAGS_PROPERTY(PROPNAME,LABELS,VALUES,DEFAULT_FLAGS)
</pre></div><p>
The new property class will have simple (label,name,value) constructor.<h4><a class="anchor" name="custenumprop">
Custom EnumProperty</a></h4>
Exactly the same as custom FlagsProperty. Simply replace FLAGS with ENUM in macro names to create wxEnumProperty based class instead.<h4><a class="anchor" name="custarraystringprop">
Custom ArrayString property</a></h4>
This type of custom property allows selecting different string delimiter (default is '"' on both sides of the string - as in C code), and allows adding custom button into the editor dialog.<p>
In header: <div class="fragment"><pre class="fragment">        WX_PG_DECLARE_ARRAYSTRING_PROPERTY(wxMyArrayStringProperty)
</pre></div><p>
In source:<p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        <span class="comment">// second argument = string delimiter. '"' for C string style (default),</span>
        <span class="comment">//    and anything else for str1&lt;delimiter&gt; str2&lt;delimiter&gt; str3 style</span>
        <span class="comment">//    (so for example, using ';' would result to str1; str2; str3).</span>
        <span class="comment">// third argument = const wxChar* text for the custom button. If NULL</span>
        <span class="comment">//    then no button is added.</span>
        WX_PG_IMPLEMENT_ARRAYSTRING_PROPERTY(wxMyArrayStringProperty,<span class="charliteral">','</span>,wxT(<span class="stringliteral">"Browse"</span>))

        bool wxMyArrayStringPropertyClass::OnCustomStringEdit (wxWindow* parent,
                                                               wxString&amp; value)
        {
            <span class="comment">//</span>
            <span class="comment">// TODO: Show custom editor dialog, read initial string from value.</span>
            <span class="comment">//   If changed, store new string to value and return TRUE.</span>
            <span class="comment">//</span>
        }
</pre></div><h4><a class="anchor" name="custcolprop">
Custom ColourProperty</a></h4>
wxColourProperty/wxSystemColourProperty that can have custom list of colours in dropdown.<p>
Use version that doesn't have _USES_WXCOLOUR in macro names to have <a class="el" href="classwxColourPropertyValue.htm" title="Because text, background and other colours tend to differ between platforms, wxSystemColourProperty...">wxColourPropertyValue</a> as value type instead of plain wxColour (in this case values array might also make sense).<p>
In header: <div class="fragment"><pre class="fragment"><span class="preprocessor">        #include &lt;wx/propgrid/advprops.h&gt;</span>
        WX_PG_DECLARE_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(wxMyColourProperty)
</pre></div><p>
In source:<p>
<div class="fragment"><pre class="fragment"><span class="preprocessor">        #include &lt;wx/propgrid/propdev.h&gt;</span>

        <span class="comment">// Colour labels. Last (before NULL, if any) must be Custom.</span>
        <span class="keyword">static</span> <span class="keyword">const</span> wxChar* mycolprop_labels[] = {
            wxT(<span class="stringliteral">"Black"</span>),
            wxT(<span class="stringliteral">"Blue"</span>),
            wxT(<span class="stringliteral">"Brown"</span>),
            wxT(<span class="stringliteral">"Custom"</span>),
            (<span class="keyword">const</span> wxChar*) NULL
        };

        <span class="comment">// Relevant colour values as unsigned longs.</span>
        <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> mycolprop_colours[] = {
            <a class="code" href="group__miscellaneous.htm#g59fd572254a501df13236ad5363b4253" title="Convert Red, Green and Blue to a single 32-bit value.">wxPG_COLOUR</a>(0,0,0),
            <a class="code" href="group__miscellaneous.htm#g59fd572254a501df13236ad5363b4253" title="Convert Red, Green and Blue to a single 32-bit value.">wxPG_COLOUR</a>(0,0,255),
            <a class="code" href="group__miscellaneous.htm#g59fd572254a501df13236ad5363b4253" title="Convert Red, Green and Blue to a single 32-bit value.">wxPG_COLOUR</a>(166,124,81),
            <a class="code" href="group__miscellaneous.htm#g59fd572254a501df13236ad5363b4253" title="Convert Red, Green and Blue to a single 32-bit value.">wxPG_COLOUR</a>(0,0,0)
        };

        <span class="comment">// Implement property class. Third argument is optional values array,</span>
        <span class="comment">// but in this example we are only interested in creating a shortcut</span>
        <span class="comment">// for user to access the colour values.</span>
        WX_PG_IMPLEMENT_CUSTOM_COLOUR_PROPERTY_USES_WXCOLOUR(wxMyColourProperty,
                                                             mycolprop_labels,
                                                             (<span class="keywordtype">long</span>*)NULL,
                                                             mycolprop_colours)
</pre></div><h3><a class="anchor" name="declaring">
Declaring an Arbitrary Property</a></h3>
To make your property available globally, you need to declare it in a header file. Usually you would want to use WX_PG_DECLARE_PROPERTY macro to do that (it is defined in propgrid.h). It has three arguments: PROPNAME, T_AS_ARG and DEFVAL. PROPNAME is property NAME (eg. wxStringProperty), T_AS_ARG is type input in function argument list (eg. "int" for int value type, "const wxString&amp;" for wxString value type, etc.), and DEFVAL is default value for that.<p>
For example:<p>
<div class="fragment"><pre class="fragment">        <span class="comment">// Declare wxRealPoint Property in the header</span>
        WX_PG_DECLARE_PROPERTY(wxRealPointProperty,<span class="keyword">const</span> wxRealPoint&amp;,wxRealPoint(0.0,0.0))
</pre></div><p>
There is also WX_PG_DECLARE_PROPERTY_WITH_DECL which takes an additional declaration argument (export, for example, when exporting from a dll).<p>
If you want that your property could be inherited from, then you would also have to define the class body in the header file. In most cases this is probably not necessary and the class can be defined and implemented completely in the source. In the case of <a class="el" href="classwxPropertyGrid.htm" title="wxPropertyGrid is a specialized two-column grid for editing properties such as strings...">wxPropertyGrid</a> library, most property classes are defined in propdev.h to allow them to be inherited from, but .<h3><a class="anchor" name="implementing">
Implementing a Property</a></h3>
First there is class body with WX_PG_DECLARE_PROPERTY_CLASS macro, constructor, virtual destructor, and declarations for other overridden methods. Then comes WX_PG_IMPLEMENT_PROPERTY_CLASS macro, and after that class method implementations.<h3><a class="anchor" name="Tips">
Tips</a></h3>
<ul>
<li>To get property's parent grid, call GetGrid().</li></ul>
<h3><a class="anchor" name="valuetypes">
Creating New Value Types</a></h3>
If you want to a property to use a value type that is not among the builtin types, then you need to create a new property value type. It is quite straightforward, using two macros.<p>
In header, use WX_PG_DECLARE_VALUE_TYPE(DATATYPE), like this:<p>
<div class="fragment"><pre class="fragment">        <span class="comment">// Example: Declare value type for wxRealPoint.</span>
        WX_PG_DECLARE_VALUE_TYPE(wxRealPoint)
</pre></div><p>
If, however, class of your value type does not inherit from wxObject, and you need to use it in wxVariant list used as a persistent storage (for example, see <a class="el" href="classwxPropertyGrid.htm#ae30b6a387911a12832e730206baa069" title="Returns a wxVariant list containing wxVariant versions of all property values.">wxPropertyGrid::GetPropertyValues</a>), then use this instead, as it also declares a necessary wxVariantData_DATATYPE class.<p>
<div class="fragment"><pre class="fragment">        <span class="comment">// Example: Declare value type and wxVariantData class for wxRealPoint.</span>
        WX_PG_DECLARE_VALUE_TYPE_VOIDP(wxRealPoint)
</pre></div><p>
There are also _WITH_DECL versions of both.<p>
However, there are a few different implement macros to place in a source file. Pick one according to the type of type.<p>
<div class="fragment"><pre class="fragment">        <span class="comment">// For implementing value type for a wxObject based class.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ(TYPE,DEFPROPERTY,DEFVAL)

        <span class="comment">// Same as above, except that an instance of TYPE is</span>
        <span class="comment">// stored in class. Thus, DEFVAL can be any expression</span>
        <span class="comment">// that can be assigned to the type.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_WXOBJ_OWNDEFAULT(TYPE,DEFPROPERTY,DEFVAL)

        <span class="comment">// For implementing value type for a non-wxObject based class.</span>
        <span class="comment">// Like with ...WXOBJ_OWNDEFAULT macro above, instance of TYPE</span>
        <span class="comment">// is stored and DEFVAL can be any expression.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_SIMPLE(TYPE,DEFPROPERTY,DEFVAL)

        <span class="comment">// Like above, but also implement the wxVariantData class</span>
        <span class="comment">// declared with the second kind of value type declare macro.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP(TYPE,DEFPROPERTY,DEFVAL)

        <span class="comment">// Like above, but accepts a custom wxVariantData class.</span>
        <span class="comment">// You need to use WX_PG_DECLARE_VALUE_TYPE with this instead</span>
        <span class="comment">// of _VOIDP version.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE_VOIDP_CVD(TYPE,DEFPROPERTY,DEFVAL,VARIANTDATACLASS)

        <span class="comment">// For implementing value type with different default value.</span>
        <span class="comment">// NOTE: With this type you need to use wxPG_INIT_REQUIRED_TYPE2</span>
        <span class="comment">//   instead of wxPG_INIT_REQUIRED_TYPE.</span>
        WX_PG_IMPLEMENT_DERIVED_TYPE(TYPENAME,PARENTVT,DEFVAL)

        <span class="comment">// For implementing value type for a POD (plain 'ol data) value.</span>
        <span class="comment">// Generally should not be used since it is meant for</span>
        <span class="comment">// wxString, int, double etc. which are already implemented.</span>
        WX_PG_IMPLEMENT_VALUE_TYPE(TYPE,DEFPROPERTY,TYPESTRING,GETTER,DEFVAL)
</pre></div><p>
Argument descriptions:<p>
TYPE - Actual data type represented by the value type, or if derived type, any custom name.<p>
DEFPROPERY - Name of the property that will edit this value type by default.<p>
DEFVAL - Default value for the property.<p>
TYPENAME - An arbitraty typename for this value type. Applies only to the derived type.<p>
PARENTVT - Name of parent value type, from which this derived type inherits from.<p>
<dl class="remark" compact><dt><b>Remarks:</b></dt><dd><ul>
<li>Your class, which you create value type for, must have a copy constructor.</li></ul>
</dd></dl>
<h2><a class="anchor" name="neweditors">
Creating Custom Property Editor</a></h2>
<ul>
<li>See the sources of built-in editors in contrib/src/propgrid/propgrid.cpp (search for wxPGTextCtrlEditor).</li></ul>
<p>
<ul>
<li>For additional information, see <a class="el" href="classwxPGEditor.htm" title="Base for property editor classes.">wxPGEditor</a> class reference</li></ul>
<h3><a class="anchor" name="wxpythoneditors">
In wxPython</a></h3>
<ul>
<li>See README-propgrid-wxPython.txt </li></ul>
</div>
<hr size="1"><address style="text-align: right;"><small>Generated on Sat Jun 28 15:57:25 2008 for wxPropertyGrid by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.5.5 </small></address>
</body>
</html>
