<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: propgrid.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>propgrid.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        propgrid.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGrid</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Sep-25-2004</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef __WX_PROPGRID_H__</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define __WX_PROPGRID_H__</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "propgrid.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="comment">/*</span>
00020 <span class="comment"></span>
00021 <span class="comment">  -- IMPORTANT API NOTES --</span>
00022 <span class="comment"></span>
00023 <span class="comment">  * Intermediate property classes that should only be inherited from</span>
00024 <span class="comment">    have names that begin with wxPG (for example, wxPGProperty and</span>
00025 <span class="comment">    wxPGPropertyWithChildren).</span>
00026 <span class="comment"></span>
00027 <span class="comment">*/</span>
00028 
00029 <span class="preprocessor">#include &lt;wx/dynarray.h&gt;</span>
00030 
00031 <span class="preprocessor">#include &lt;wx/hashmap.h&gt;</span>
00032 
00033 <span class="preprocessor">#include &lt;wx/variant.h&gt;</span>
00034 
00035 <span class="preprocessor">#include &lt;wx/tooltip.h&gt;</span>
00036 
00037 <span class="comment">//#include &lt;wx/validate.h&gt;</span>
00038 
00039 <span class="comment">// Doxygen special</span>
00040 <span class="preprocessor">#if !defined(_WX_WINDOW_H_BASE_) &amp;&amp; !defined(SWIG)</span>
00041 <span class="preprocessor"></span><span class="preprocessor"># include "pg_dox_mainpage.h"</span>
00042 <span class="preprocessor">#endif</span>
00043 <span class="preprocessor"></span>
00044 <span class="comment">// Custom version information (takes CVS(i.e. subrelease) into account)</span>
00045 <span class="preprocessor">#define wxPG_WX_VERSION ((wxMAJOR_VERSION*100)+(wxMINOR_VERSION*10)+(wxRELEASE_NUMBER+wxSUBRELEASE_NUMBER))</span>
00046 <span class="preprocessor"></span>
00047 <span class="comment">// -----------------------------------------------------------------------</span>
00048 
00049 
00050 <span class="comment">//</span>
00051 <span class="comment">// Here are some platform dependent defines</span>
00052 <span class="comment">// NOTE: More in propertygrid.cpp</span>
00053 <span class="comment">//</span>
00054 
00055 <span class="preprocessor">#ifndef SWIG</span>
00056 <span class="preprocessor"></span><span class="preprocessor">#if defined(__WXMSW__)</span>
00057 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00058 
00059 <span class="preprocessor">    #define wxPG_XBEFORETEXT            5 // space between vertical line and value text</span>
00060 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor control</span>
00061 <span class="preprocessor"></span>
00062 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00063 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00064 <span class="preprocessor"></span>
00065 <span class="preprocessor"># if defined(__WXWINCE__)</span>
00066 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00067 <span class="preprocessor"></span><span class="preprocessor"># else</span>
00068 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          1 // 1 to use double-buffer that guarantees flicker-free painting</span>
00069 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00070 <span class="preprocessor"></span>
00071 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00072 <span class="preprocessor"></span>
00073 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00074 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    0 // 1 to use wxCustomControls instead native ones (usually better)</span>
00075 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00076 <span class="preprocessor"></span>
00077 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1 // Enable tooltips</span>
00078 <span class="preprocessor"></span>
00079 <span class="preprocessor">#elif defined(__WXGTK__)</span>
00080 <span class="preprocessor"></span>    <span class="comment">// tested</span>
00081 
00082 <span class="preprocessor">    #define wxPG_XBEFORETEXT            6 // space between vertical line and value text</span>
00083 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor control</span>
00084 <span class="preprocessor"></span>
00085 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00086 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00087 <span class="preprocessor"></span>
00088 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          1 // 1 to use double-buffer that guarantees flicker-free painting</span>
00089 <span class="preprocessor"></span>
00090 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00091 <span class="preprocessor"></span>
00092 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00093 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    0 // 1 to use wxCustomControls instead native ones (usually better)</span>
00094 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00095 <span class="preprocessor"></span>
00096 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00097 <span class="preprocessor"></span>
00098 <span class="preprocessor">#elif defined(__WXMAC__)</span>
00099 <span class="preprocessor"></span>    <span class="comment">// *not* tested</span>
00100 
00101 <span class="preprocessor">    #define wxPG_XBEFORETEXT            5 // space between vertical line and value text</span>
00102 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor widget</span>
00103 <span class="preprocessor"></span>
00104 <span class="preprocessor">    #define wxPG_ICON_WIDTH             11  // comment to use bitmap buttons</span>
00105 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    1 // 1 if wxRendererNative should be employed</span>
00106 <span class="preprocessor"></span>
00107 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00108 <span class="preprocessor"></span>
00109 <span class="preprocessor">    #define wxPG_HEAVY_GFX              1 // 1 for prettier appearance</span>
00110 <span class="preprocessor"></span>
00111 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00112 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    0 // 1 to use wxCustomControls instead native ones (usually better)</span>
00113 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00114 <span class="preprocessor"></span>
00115 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       1  // Enable tooltips</span>
00116 <span class="preprocessor"></span>
00117 <span class="preprocessor">#else</span>
00118 <span class="preprocessor"></span>    <span class="comment">// defaults</span>
00119     <span class="comment">// tested on: none.</span>
00120 
00121 <span class="preprocessor">    #define wxPG_XBEFORETEXT            6 // space between vertical line and value text</span>
00122 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_XBEFOREWIDGET          1 // space between vertical line and value editor widget</span>
00123 <span class="preprocessor"></span>
00124 <span class="preprocessor">    #define wxPG_ICON_WIDTH             9 // comment to use bitmap buttons</span>
00125 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_RENDERER_NATIVE    0 // 1 if wxRendererNative should be employed</span>
00126 <span class="preprocessor"></span>
00127 <span class="preprocessor">    #define wxPG_DOUBLE_BUFFER          0 // 1 to use double-buffer that guarantees flicker-free painting</span>
00128 <span class="preprocessor"></span>
00129 <span class="preprocessor">    #define wxPG_HEAVY_GFX              0 // 1 for prettier appearance</span>
00130 <span class="preprocessor"></span>
00131 <span class="preprocessor">#ifndef wxPG_USE_CUSTOM_CONTROLS</span>
00132 <span class="preprocessor"></span><span class="preprocessor">    #define wxPG_USE_CUSTOM_CONTROLS    1 // 1 to use wxCustomControls instead native ones (usually better)</span>
00133 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00134 <span class="preprocessor"></span>
00135 <span class="preprocessor">    #define wxPG_SUPPORT_TOOLTIPS       0  // Enable tooltips</span>
00136 <span class="preprocessor"></span>
00137 <span class="preprocessor">#endif</span>
00138 <span class="preprocessor"></span>
00139 <span class="preprocessor">#endif // SWIG</span>
00140 <span class="preprocessor"></span>
00141 <span class="comment">// Undefine wxPG_ICON_WIDTH to use supplied xpm bitmaps instead</span>
00142 <span class="comment">// (for tree buttons)</span>
00143 <span class="comment">//#undef wxPG_ICON_WIDTH</span>
00144 
00145 <span class="comment">// Need to force disable tooltips?</span>
00146 <span class="preprocessor">#if !wxUSE_TOOLTIPS</span>
00147 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_SUPPORT_TOOLTIPS</span>
00148 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_SUPPORT_TOOLTIPS       0</span>
00149 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00150 <span class="preprocessor"></span>
00151 <span class="comment">// Set 1 to include basic properties ( ~48k in 0.9.9.2 )</span>
00152 <span class="preprocessor">#define wxPG_INCLUDE_BASICPROPS         1</span>
00153 <span class="preprocessor"></span>
00154 <span class="comment">// Set 1 to include advanced properties (wxFontProperty, wxColourProperty, etc.) ( ~32k in 0.9.9.2 )</span>
00155 <span class="preprocessor">#define wxPG_INCLUDE_ADVPROPS           1</span>
00156 <span class="preprocessor"></span>
00157 <span class="comment">// Set 1 include wxPropertyGridManager ( ~36k in 0.9.9.1 )</span>
00158 <span class="comment">//#define wxPG_INCLUDE_MANAGER            1</span>
00159 
00160 <span class="comment">// Set 1 to include checkbox editor class ( ~4k in 0.9.9.1 )</span>
00161 <span class="preprocessor">#define wxPG_INCLUDE_CHECKBOX           1</span>
00162 <span class="preprocessor"></span>
00163 <span class="comment">// 1 to allow user data for each property</span>
00164 <span class="preprocessor">#define wxPG_USE_CLIENT_DATA            1</span>
00165 <span class="preprocessor"></span>
00166 <span class="comment">// 1 to allow per-property validators</span>
00167 <span class="preprocessor">#define wxPG_USE_VALIDATORS             0</span>
00168 <span class="preprocessor"></span>
00169 <span class="comment">// NOTE: Currently advantages granted by wxPG_EMBED_VARIANT are probably minimal.</span>
00170 <span class="preprocessor">#define wxPG_EMBED_VARIANT              0 // 1 if wxVariant is in wxPGProperty (should be better if used a lot)</span>
00171 <span class="preprocessor"></span>
00172 <span class="comment">// NOTE: Use this only if you really need wxDynamicCast etc. Property class name</span>
00173 <span class="comment">//   can be acquired with wxPropertyGrid::GetPropertyClassName() anyway.</span>
00174 <span class="comment">// ALSO NOTE: Causes quite a code size increase (~20k in main object file) considering what</span>
00175 <span class="comment">//   it does.</span>
00176 <span class="preprocessor">#define wxPG_INCLUDE_WXOBJECT           0 // 1 if inherit wxPGProperty from wxObject - always 1 if wxPG_EMBED_VARIANT</span>
00177 <span class="preprocessor"></span>
00178 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
00179 <span class="preprocessor"></span><span class="preprocessor"># error "wxPG_EMBED_VARIANT is currently broken."</span>
00180 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_INCLUDE_WXOBJECT</span>
00181 <span class="preprocessor"></span><span class="preprocessor"># define wxPG_INCLUDE_WXOBJECT           1</span>
00182 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00183 <span class="preprocessor"></span>
00184 <span class="comment">//</span>
00185 <span class="comment">// To have same native colour scheme calculation as in version</span>
00186 <span class="comment">// 1.0.3 and earlier, set this to 0.</span>
00187 <span class="preprocessor">#define wxPG_NEW_COLOUR_SCHEME           1</span>
00188 <span class="preprocessor"></span>
00189 
00190 <span class="comment">// -----------------------------------------------------------------------</span>
00191 
00192 <span class="comment">// Our very custom dynamic object macros. Should only be used</span>
00193 <span class="comment">// directly in an abstract (typeless etc.) base property classes.</span>
00194 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
00195 <span class="preprocessor"></span><span class="preprocessor"># error "wxPG_INCLUDE_WXOBJECT is not currently supported (as of 1.0.0b)."</span>
00196 <span class="preprocessor"></span><span class="comment">//# define _WX_PG_DECLARE_PROPERTY_CLASS(A)       DECLARE_CLASS(A)</span>
00197 <span class="comment">//# define _WX_PG_IMPLEMENT_PROPERTY_CLASS(A,B)   IMPLEMENT_CLASS(A,B)</span>
00198 <span class="preprocessor"># define WX_PG_DECLARE_GETCLASSNAME()</span>
00199 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00200 <span class="preprocessor"></span><span class="comment">//# define _WX_PG_DECLARE_PROPERTY_CLASS(A)</span>
00201 <span class="comment">//# define _WX_PG_IMPLEMENT_PROPERTY_CLASS(A,B)</span>
00202 <span class="preprocessor"># define WX_PG_DECLARE_GETCLASSNAME()          virtual const wxChar* GetClassName() const;</span>
00203 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00204 <span class="preprocessor"></span>
00205 <span class="comment">// -----------------------------------------------------------------------</span>
00206 
00207 <span class="preprocessor">#ifdef WXMAKINGDLL_PROPGRID</span>
00208 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG WXEXPORT</span>
00209 <span class="preprocessor"></span><span class="preprocessor">#elif defined(WXUSINGDLL)</span>
00210 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG WXIMPORT</span>
00211 <span class="preprocessor"></span><span class="preprocessor">#else // not making nor using DLL</span>
00212 <span class="preprocessor"></span><span class="preprocessor">    #define WXDLLIMPEXP_PG</span>
00213 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00214 <span class="preprocessor"></span>
00215 <span class="comment">// -----------------------------------------------------------------------</span>
00216 
00217 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
00218 <span class="preprocessor"></span><span class="preprocessor"># include "wx/propgrid/custctrl.h"</span>
00219 <span class="preprocessor"># define wxPGCtrlClass wxCustomControl</span>
00220 <span class="preprocessor"></span><span class="preprocessor">#else</span>
00221 <span class="preprocessor"></span><span class="preprocessor"># define wxPGCtrlClass wxWindow</span>
00222 <span class="preprocessor"></span><span class="preprocessor"># if !wxPG_USE_GENERIC_TEXTCTRL</span>
00223 <span class="preprocessor"></span><span class="preprocessor">#  define wxCCustomTextCtrl wxTextCtrl</span>
00224 <span class="preprocessor"></span><span class="preprocessor"># else</span>
00225 <span class="preprocessor"></span><span class="preprocessor">#  include "wx/propgrid/custctrl.h"</span>
00226 <span class="preprocessor">#  define wxCCustomTextCtrl wxGenericTextCtrl</span>
00227 <span class="preprocessor"></span><span class="preprocessor"># endif</span>
00228 <span class="preprocessor"></span><span class="comment">//# define wxCCustomComboBox wxComboBox</span>
00229 <span class="keyword">class </span>WXDLLEXPORT wxPGComboBox;
00230 <span class="preprocessor"># define wxCCustomComboBox wxPGComboBox</span>
00231 <span class="preprocessor"></span><span class="preprocessor"># define wxCCustomButton wxButton</span>
00232 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00233 <span class="preprocessor"></span>
00234 <span class="comment">// -----------------------------------------------------------------------</span>
00235 
00236 <span class="preprocessor">#ifndef SWIG</span>
00237 <span class="preprocessor"></span><span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGVariant;
00238 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGValueType;
00239 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGEditor;
00240 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGProperty;
00241 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGPropertyWithChildren;
00242 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyCategoryClass;
00243 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPGConstants;
00244 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridState;
00245 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGrid;
00246 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridEvent;
00247 <span class="keyword">class  </span>WXDLLIMPEXP_PG wxPropertyGridManager;
00248 <span class="preprocessor">#endif</span>
00249 <span class="preprocessor"></span>
00250 <span class="keyword">struct </span><a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>;
00251 
00252 <span class="keyword">extern</span> WXDLLIMPEXP_PG <span class="keyword">const</span> wxChar *wxPropertyGridNameStr;
00253 
<a name="l00260"></a><a class="code" href="group__miscellaneous.htm#ga2">00260</a> <span class="preprocessor">#define wxPG_LABEL (*((const wxString*)NULL))</span>
00261 <span class="preprocessor"></span>
<a name="l00264"></a><a class="code" href="group__miscellaneous.htm#ga3">00264</a> <span class="preprocessor">#define wxPG_COLOUR(R,G,B) ((wxUint32)(R+(G&lt;&lt;8)+(B&lt;&lt;16)))</span>
00265 <span class="preprocessor"></span>
<a name="l00271"></a><a class="code" href="group__miscellaneous.htm#ga4">00271</a> <span class="preprocessor">#define wxPG_FLEXIBLE_SIZE(PREFWID,PREFHEI) wxSize(-(PREFWID),-(PREFHEI))</span>
00272 <span class="preprocessor"></span>
<a name="l00286"></a><a class="code" href="group__miscellaneous.htm#ga0">00286</a> <span class="keyword">typedef</span> bool (*<a class="code" href="group__miscellaneous.htm#ga0">wxPropertyGridCallback</a>)(wxPropertyGrid* propGrid,
00287                                        wxPGProperty* property,
00288                                        wxPGCtrlClass* ctrl,
00289                                        <span class="keywordtype">int</span> data);
00290 
<a name="l00296"></a><a class="code" href="group__miscellaneous.htm#ga1">00296</a> <span class="keyword">typedef</span> void (*<a class="code" href="group__miscellaneous.htm#ga1">wxPGPaintCallback</a>)(wxPGProperty* property,
00297                                   wxDC&amp; dc,
00298                                   <span class="keyword">const</span> wxRect&amp; rect,
00299                                   <a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>&amp; paintdata);
00300 
00301 
00305 <span class="comment">// -----------------------------------------------------------------------</span>
00306 
<a name="l00316"></a><a class="code" href="group__wndflags.htm#ga0">00316</a> <span class="preprocessor">#define wxPG_AUTO_SORT              0x00000010</span>
00317 <span class="preprocessor"></span>
<a name="l00323"></a><a class="code" href="group__wndflags.htm#ga1">00323</a> <span class="preprocessor">#define wxPG_HIDE_CATEGORIES        0x00000020</span>
00324 <span class="preprocessor"></span>
00325 <span class="comment">/* This style combines non-categoric mode and automatic sorting.</span>
00326 <span class="comment">*/</span>
00327 <span class="preprocessor">#define wxPG_ALPHABETIC_MODE        (wxPG_HIDE_CATEGORIES|wxPG_AUTO_SORT)</span>
00328 <span class="preprocessor"></span>
<a name="l00332"></a><a class="code" href="group__wndflags.htm#ga3">00332</a> <span class="preprocessor">#define wxPG_BOLD_MODIFIED          0x00000040</span>
00333 <span class="preprocessor"></span>
<a name="l00337"></a><a class="code" href="group__wndflags.htm#ga4">00337</a> <span class="preprocessor">#define wxPG_SPLITTER_AUTO_CENTER   0x00000080</span>
00338 <span class="preprocessor"></span>
<a name="l00342"></a><a class="code" href="group__wndflags.htm#ga5">00342</a> <span class="preprocessor">#define wxPG_TOOLTIPS               0x00000100</span>
00343 <span class="preprocessor"></span>
<a name="l00348"></a><a class="code" href="group__wndflags.htm#ga6">00348</a> <span class="preprocessor">#define wxPG_HIDE_MARGIN            0x00000200</span>
00349 <span class="preprocessor"></span>
<a name="l00352"></a><a class="code" href="group__wndflags.htm#ga7">00352</a> <span class="preprocessor">#define wxPG_STATIC_SPLITTER        0x00000400</span>
00353 <span class="preprocessor"></span>
<a name="l00357"></a><a class="code" href="group__wndflags.htm#ga8">00357</a> <span class="preprocessor">#define wxPG_STATIC_LAYOUT          (wxPG_HIDE_MARGIN|wxPG_STATIC_SPLITTER)</span>
00358 <span class="preprocessor"></span>
<a name="l00363"></a><a class="code" href="group__wndflags.htm#ga9">00363</a> <span class="preprocessor">#define wxPG_LIMITED_EDITING        0x00000800</span>
00364 <span class="preprocessor"></span>
<a name="l00366"></a><a class="code" href="group__wndflags.htm#ga10">00366</a> <span class="preprocessor">#define wxPG_TOOLBAR                0x00001000</span>
00367 <span class="preprocessor"></span>
<a name="l00371"></a><a class="code" href="group__wndflags.htm#ga11">00371</a> <span class="preprocessor">#define wxPG_DESCRIPTION            0x00002000</span>
00372 <span class="preprocessor"></span>
<a name="l00376"></a><a class="code" href="group__wndflags.htm#ga12">00376</a> <span class="preprocessor">#define wxPG_COMPACTOR              0x00004000</span>
00377 <span class="preprocessor"></span>
<a name="l00385"></a><a class="code" href="group__wndflags.htm#ga13">00385</a> <span class="preprocessor">#define wxPG_EX_INIT_NOCAT          0x00001000</span>
00386 <span class="preprocessor"></span>
<a name="l00390"></a><a class="code" href="group__wndflags.htm#ga14">00390</a> <span class="preprocessor">#define wxPG_EX_NO_FLAT_TOOLBAR     0x00002000</span>
00391 <span class="preprocessor"></span>
<a name="l00394"></a><a class="code" href="group__wndflags.htm#ga15">00394</a> <span class="preprocessor">#define wxPG_EX_CLASSIC_SPACING     0x00004000</span>
00395 <span class="preprocessor"></span>
<a name="l00398"></a><a class="code" href="group__wndflags.htm#ga16">00398</a> <span class="preprocessor">#define wxPG_EX_NO_MODE_BUTTONS     0x00008000</span>
00399 <span class="preprocessor"></span>
<a name="l00402"></a><a class="code" href="group__wndflags.htm#ga17">00402</a> <span class="preprocessor">#define wxPG_DEFAULT_STYLE              (wxNO_FULL_REPAINT_ON_RESIZE)</span>
00403 <span class="preprocessor"></span>
<a name="l00406"></a><a class="code" href="group__wndflags.htm#ga18">00406</a> <span class="preprocessor">#define wxPGMAN_DEFAULT_STYLE       (wxNO_FULL_REPAINT_ON_RESIZE)</span>
00407 <span class="preprocessor"></span>
00412 <span class="comment">//</span>
00413 <span class="comment">// Valid constants for wxPG_UINT_BASE attribute</span>
00414 <span class="comment">// (long because of wxVariant constructor)</span>
00415 <span class="preprocessor">#define wxPG_BASE_OCT                       (long)8</span>
00416 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_BASE_DEC                       (long)10</span>
00417 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_BASE_HEX                       (long)16</span>
00418 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_BASE_HEXL                      (long)32</span>
00419 <span class="preprocessor"></span>
00420 <span class="comment">//</span>
00421 <span class="comment">// Valid constants for wxPG_UINT_PREFIX attribute</span>
00422 <span class="preprocessor">#define wxPG_PREFIX_NONE                    (long)0</span>
00423 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_PREFIX_0x                      (long)1</span>
00424 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_PREFIX_DOLLAR_SIGN             (long)2</span>
00425 <span class="preprocessor"></span>
00426 
00428 <span class="preprocessor">#ifndef wxKEEP_STRUCTURE</span>
00429 <span class="preprocessor"></span><span class="preprocessor"># define wxKEEP_STRUCTURE               0x00000010</span>
00430 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00431 <span class="preprocessor"></span>
00433 <span class="preprocessor">#ifndef wxRECURSE</span>
00434 <span class="preprocessor"></span><span class="preprocessor"># define wxRECURSE                      0x00000020</span>
00435 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00436 <span class="preprocessor"></span>
00437 <span class="comment">// -----------------------------------------------------------------------</span>
00438 
00439 <span class="comment">// Property priorities</span>
00440 <span class="preprocessor">#define wxPG_LOW                    1</span>
00441 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_HIGH                   2</span>
00442 <span class="preprocessor"></span>
00443 <span class="comment">// -----------------------------------------------------------------------</span>
00444 
00445 <span class="comment">// Misc argument flags.</span>
00446 <span class="preprocessor">#define wxPG_FULL_VALUE             0x00000001 // Get/Store full value instead of displayed value.</span>
00447 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_REPORT_ERROR           0x00000002</span>
00448 <span class="preprocessor"></span>
00449 <span class="comment">// -----------------------------------------------------------------------</span>
00450 
00451 <span class="comment">// Simple class to hold the wxPGProperty pointer.</span>
00452 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGId
00453 {
00454 <span class="keyword">public</span>:
00455     <span class="keyword">inline</span> wxPGId() { m_ptr = (wxPGProperty*) NULL; }
00456     <span class="keyword">inline</span> wxPGId ( wxPGProperty* ptr ) { m_ptr = ptr; }
00457     <span class="keyword">inline</span> wxPGId ( wxPGProperty&amp; ref ) { m_ptr = &amp;ref; }
00458     ~wxPGId() {}
00459 
00460     <span class="keywordtype">bool</span> IsOk ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ( m_ptr != NULL ); }
00461 
00462     <span class="keywordtype">bool</span> operator == (<span class="keyword">const</span> wxPGId&amp; other)
00463     {
00464         <span class="keywordflow">return</span> m_ptr == other.m_ptr;
00465     }
00466 
00467     operator wxPGProperty* ()
00468     {
00469         <span class="keywordflow">return</span> m_ptr;
00470     }
00471 
00472     wxPGProperty&amp; GetProperty ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *m_ptr; }
00473     wxPGProperty* GetPropertyPtr ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_ptr; }
00474 <span class="keyword">private</span>:
00475     wxPGProperty* m_ptr;
00476 };
00477 
00478 <span class="preprocessor">#define wxPGIdGen(PTR) wxPGId(PTR)</span>
00479 <span class="preprocessor"></span><span class="preprocessor">#define wxPGIdToPtr(ID) ID.GetPropertyPtr()</span>
00480 <span class="preprocessor"></span><span class="preprocessor">#define wxPGIdIsOk(ID) ID.IsOk()</span>
00481 <span class="preprocessor"></span>
00482 <span class="comment">// -----------------------------------------------------------------------</span>
00483 
00484 WXDLLIMPEXP_PG <span class="keywordtype">void</span> wxPGTypeOperationFailed ( <span class="keyword">const</span> wxPGProperty* p, <span class="keyword">const</span> wxChar* typestr, <span class="keyword">const</span> wxChar* op );
00485 WXDLLIMPEXP_PG <span class="keywordtype">void</span> wxPGGetFailed ( <span class="keyword">const</span> wxPGProperty* p, <span class="keyword">const</span> wxChar* typestr );
00486 
00487 <span class="comment">// -----------------------------------------------------------------------</span>
00488 
00489 <span class="comment">/*</span>
00490 <span class="comment">#define wxPG_CURSOR_FROM_FILE       0xFFFFFE</span>
00491 <span class="comment"></span>
00492 <span class="comment">#define wxPG_CURSOR_FROM_RESOURCE   0xFFFFFF</span>
00493 <span class="comment">*/</span>
00494 
00495 <span class="comment">// -----------------------------------------------------------------------</span>
00496 
00501 <span class="comment">// NOTE: Do not change order of these, and if you add</span>
00502 <span class="comment">//   any, remember also to update gs_property_flag_to_string</span>
00503 <span class="comment">//   in propgrid.cpp.</span>
00504 
<a name="l00507"></a><a class="code" href="group__propflags.htm#ga0">00507</a> <span class="preprocessor">#define wxPG_PROP_MODIFIED          0x0001</span>
00508 <span class="preprocessor"></span>
<a name="l00511"></a><a class="code" href="group__propflags.htm#ga1">00511</a> <span class="preprocessor">#define wxPG_PROP_DISABLED          0x0002</span>
00512 <span class="preprocessor"></span>
<a name="l00515"></a><a class="code" href="group__propflags.htm#ga2">00515</a> <span class="preprocessor">#define wxPG_PROP_HIDEABLE          0x0004</span>
00516 <span class="preprocessor"></span>
<a name="l00521"></a><a class="code" href="group__propflags.htm#ga3">00521</a> <span class="preprocessor">#define wxPG_PROP_CUSTOMIMAGE       0x0008</span>
00522 <span class="preprocessor"></span>
<a name="l00526"></a><a class="code" href="group__propflags.htm#ga4">00526</a> <span class="preprocessor">#define wxPG_PROP_NOEDITOR          0x0010</span>
00527 <span class="preprocessor"></span>
<a name="l00530"></a><a class="code" href="group__propflags.htm#ga5">00530</a> <span class="preprocessor">#define wxPG_PROP_UNSPECIFIED       0x0020</span>
00531 <span class="preprocessor"></span>
<a name="l00534"></a><a class="code" href="group__propflags.htm#ga6">00534</a> <span class="preprocessor">#define wxPG_PROP_CLASS_SPECIFIC_1  0x0040</span>
00535 <span class="preprocessor"></span>
<a name="l00538"></a><a class="code" href="group__propflags.htm#ga7">00538</a> <span class="preprocessor">#define wxPG_PROP_CLASS_SPECIFIC_2  0x0080</span>
00539 <span class="preprocessor"></span>
00543 <span class="comment">// -----------------------------------------------------------------------</span>
00544 
<a name="l00554"></a><a class="code" href="group__attrids.htm#ga0">00554</a> <span class="preprocessor">#define wxPG_BOOL_USE_CHECKBOX              64</span>
00555 <span class="preprocessor"></span>
<a name="l00559"></a><a class="code" href="group__attrids.htm#ga1">00559</a> <span class="preprocessor">#define wxPG_BOOL_USE_DOUBLE_CLICK_CYCLING  65</span>
00560 <span class="preprocessor"></span>
<a name="l00565"></a><a class="code" href="group__attrids.htm#ga2">00565</a> <span class="preprocessor">#define wxPG_FLOAT_PRECISION                66</span>
00566 <span class="preprocessor"></span>
<a name="l00571"></a><a class="code" href="group__attrids.htm#ga3">00571</a> <span class="preprocessor">#define wxPG_FILE_WILDCARD                  67</span>
00572 <span class="preprocessor"></span>
<a name="l00576"></a><a class="code" href="group__attrids.htm#ga4">00576</a> <span class="preprocessor">#define wxPG_FILE_SHOW_FULL_PATH            68</span>
00577 <span class="preprocessor"></span>
<a name="l00582"></a><a class="code" href="group__attrids.htm#ga5">00582</a> <span class="preprocessor">#define wxPG_UINT_BASE                      69</span>
00583 <span class="preprocessor"></span>
<a name="l00589"></a><a class="code" href="group__attrids.htm#ga6">00589</a> <span class="preprocessor">#define wxPG_UINT_PREFIX                    70</span>
00590 <span class="preprocessor"></span>
<a name="l00596"></a><a class="code" href="group__attrids.htm#ga7">00596</a> <span class="preprocessor">#define wxPG_CUSTOM_EDITOR                  128</span>
00597 <span class="preprocessor"></span>
<a name="l00602"></a><a class="code" href="group__attrids.htm#ga8">00602</a> <span class="preprocessor">#define wxPG_CUSTOM_IMAGE                   129</span>
00603 <span class="preprocessor"></span>
<a name="l00607"></a><a class="code" href="group__attrids.htm#ga9">00607</a> <span class="preprocessor">#define wxPG_CUSTOM_CALLBACK                130</span>
00608 <span class="preprocessor"></span>
<a name="l00617"></a><a class="code" href="group__attrids.htm#ga10">00617</a> <span class="preprocessor">#define wxPG_CUSTOM_PAINT_CALLBACK          131</span>
00618 <span class="preprocessor"></span>
<a name="l00625"></a><a class="code" href="group__attrids.htm#ga11">00625</a> <span class="preprocessor">#define wxPG_CUSTOM_PRIVATE_CHILDREN        132</span>
00626 <span class="preprocessor"></span>
<a name="l00630"></a><a class="code" href="group__attrids.htm#ga12">00630</a> <span class="preprocessor">#define wxPG_USER_ATTRIBUTE                 192</span>
00631 <span class="preprocessor"></span>
00635 <span class="comment">// -----------------------------------------------------------------------</span>
00636 <span class="comment">// Value type.</span>
00637 
00638 <span class="comment">// Value type declarer, with optional declaration part (with creator function).</span>
00639 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_WITH_DECL(VALUETYPE,DECL) \</span>
00640 <span class="preprocessor">    extern DECL const wxPGValueType *wxPGValueType_##VALUETYPE; \</span>
00641 <span class="preprocessor">    extern DECL wxPGValueType* wxPGNewVT##VALUETYPE();</span>
00642 <span class="preprocessor"></span>
00643 <span class="comment">// Value type declarer (with creator function).</span>
00644 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE(VALUETYPE) \</span>
00645 <span class="preprocessor">    extern const wxPGValueType *wxPGValueType_##VALUETYPE; \</span>
00646 <span class="preprocessor">    wxPGValueType* wxPGNewVT##VALUETYPE();</span>
00647 <span class="preprocessor"></span>
00648 <span class="comment">// Value type declarer, with optional declaration part.</span>
00649 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_BUILTIN_WITH_DECL(VALUETYPE,DECL) \</span>
00650 <span class="preprocessor">    extern DECL const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00651 <span class="preprocessor"></span>
00652 <span class="comment">// Value type accessor.</span>
00653 <span class="preprocessor">#define wxPG_VALUETYPE(T)       wxPGValueType_##T</span>
00654 <span class="preprocessor"></span>
00655 <span class="comment">// Like wxPG_VALUETYPE, but casts pointer to exact class.</span>
00656 <span class="preprocessor">#define wxPG_VALUETYPE_EXACT(T) ((wxPGValueType##VALUETYPE##Class)wxPGValueType##T)</span>
00657 <span class="preprocessor"></span>
00658 <span class="comment">// Declare builtin value types.</span>
00659 WX_PG_DECLARE_VALUE_TYPE_BUILTIN_WITH_DECL(none,WXDLLIMPEXP_PG)
00660 WX_PG_DECLARE_VALUE_TYPE_BUILTIN_WITH_DECL(wxString,WXDLLIMPEXP_PG)
00661 WX_PG_DECLARE_VALUE_TYPE_BUILTIN_WITH_DECL(<span class="keywordtype">long</span>,WXDLLIMPEXP_PG)
00662 WX_PG_DECLARE_VALUE_TYPE_BUILTIN_WITH_DECL(<span class="keywordtype">bool</span>,WXDLLIMPEXP_PG)
00663 WX_PG_DECLARE_VALUE_TYPE_BUILTIN_WITH_DECL(<span class="keywordtype">double</span>,WXDLLIMPEXP_PG)
00664 WX_PG_DECLARE_VALUE_TYPE_BUILTIN_WITH_DECL(<span class="keywordtype">void</span>,WXDLLIMPEXP_PG)
00665 WX_PG_DECLARE_VALUE_TYPE_BUILTIN_WITH_DECL(wxArrayString,WXDLLIMPEXP_PG)
00666 
00667 #define WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \
00668 wxVariantData_##VALUETYPE : <span class="keyword">public</span> <a class="code" href="classwxPGVariantDataWxObj.htm">wxPGVariantDataWxObj</a> \
00669 { \
00670     DECLARE_DYNAMIC_CLASS(wxVariantData_##VALUETYPE) \
00671 <span class="keyword">protected</span>: \
00672     VALUETYPE   m_value; \
00673 <span class="keyword">public</span>: \
00674     wxVariantData_##VALUETYPE(); \
00675     wxVariantData_##VALUETYPE(<span class="keyword">const</span> VALUETYPE&amp; value); \
00676     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Copy(wxVariantData&amp; data); \
00677     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Eq(wxVariantData&amp; data) <span class="keyword">const</span>; \
00678     <span class="keyword">virtual</span> wxString GetType() <span class="keyword">const</span>; \
00679     <span class="keyword">virtual</span> <span class="keywordtype">void</span>* GetValuePtr(); \
00680     <span class="keyword">inline</span> <span class="keyword">const</span> VALUETYPE&amp; GetValue ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_value; }
00681 
00682 <span class="comment">// Value type declarer for void* that need auto-generated .</span>
00683 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_VOIDP_WITH_DECL(VALUETYPE,DECL) \</span>
00684 <span class="preprocessor">class DECL WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \</span>
00685 <span class="preprocessor">}; \</span>
00686 <span class="preprocessor">extern DECL const wxPGValueType *wxPGValueType_##VALUETYPE;</span>
00687 <span class="preprocessor"></span>
00688 <span class="preprocessor">#define WX_PG_DECLARE_VALUE_TYPE_VOIDP(VALUETYPE) \</span>
00689 <span class="preprocessor">class WX_PG_DECLARE_VALUE_TYPE_VDC(VALUETYPE) \</span>
00690 <span class="preprocessor">}; \</span>
00691 <span class="preprocessor">WX_PG_DECLARE_VALUE_TYPE(VALUETYPE)</span>
00692 <span class="preprocessor"></span>
<a name="l00698"></a><a class="code" href="classwxPGVariantDataWxObj.htm">00698</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGVariantDataWxObj : <span class="keyword">public</span> wxVariantData
00699 {
00700 <span class="keyword">public</span>:
00701 <span class="preprocessor">#if wxUSE_STD_IOSTREAM</span>
00702 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Write(wxSTD ostream&amp; str) <span class="keyword">const</span>;
00703 <span class="preprocessor">#endif</span>
00704 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Write(wxString&amp; str) <span class="keyword">const</span>;
00705 <span class="preprocessor">#if wxUSE_STD_IOSTREAM</span>
00706 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Read(wxSTD istream&amp; str);
00707 <span class="preprocessor">#endif</span>
00708 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Read(wxString&amp; str);
00709 
00710     <span class="keyword">virtual</span> <span class="keywordtype">void</span>* GetValuePtr() = 0;
00711 };
00712 
00713 <span class="comment">// -----------------------------------------------------------------------</span>
00714 <span class="comment">// Editor class.</span>
00715 
00716 <span class="comment">// Editor accessor.</span>
00717 <span class="preprocessor">#define wxPG_EDITOR(T)          wxPGEditor_##T</span>
00718 <span class="preprocessor"></span>
00719 <span class="comment">// Declare editor class, with optional part.</span>
00720 <span class="preprocessor">#define WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(EDITOR,DECL) \</span>
00721 <span class="preprocessor">extern DECL wxPGEditor* wxPGEditor_##EDITOR; \</span>
00722 <span class="preprocessor">extern DECL wxPGEditor* wxPGConstruct##EDITOR##EditorClass();</span>
00723 <span class="preprocessor"></span>
00724 <span class="comment">// Declare editor class.</span>
00725 <span class="preprocessor">#define WX_PG_DECLARE_EDITOR_CLASS(EDITOR) \</span>
00726 <span class="preprocessor">extern wxPGEditor* wxPGEditor_##EDITOR; \</span>
00727 <span class="preprocessor">extern wxPGEditor* wxPGConstruct##EDITOR##EditorClass();</span>
00728 <span class="preprocessor"></span>
00729 <span class="comment">// Declare builtin editor classes.</span>
00730 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(TextCtrl,WXDLLIMPEXP_PG)
00731 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(Choice,WXDLLIMPEXP_PG)
00732 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(TextCtrlAndButton,WXDLLIMPEXP_PG)
00733 #<span class="keywordflow">if</span> wxPG_INCLUDE_CHECKBOX
00734 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(CheckBox,WXDLLIMPEXP_PG)
00735 #endif
00736 WX_PG_DECLARE_EDITOR_CLASS_WITH_DECL(ChoiceAndButton,WXDLLIMPEXP_PG)
00737 
00738 <span class="comment">// -----------------------------------------------------------------------</span>
00739 
00740 
<a name="l00745"></a><a class="code" href="classwxPGValueType.htm">00745</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGValueType
00746 {
00747 <span class="keyword">public</span>:
00748 
00749     <span class="keyword">virtual</span> ~wxPGValueType() = 0;
00750 
00753     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* GetTypeName() <span class="keyword">const</span> = 0;
00754 
00759     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* GetCustomTypeName() <span class="keyword">const</span>;
00760 
00763     <span class="keyword">virtual</span> wxPGVariant GetDefaultValue () <span class="keyword">const</span> = 0;
00764 
00767     <span class="keyword">virtual</span> wxVariant GenerateVariant ( wxPGVariant value, <span class="keyword">const</span> wxString&amp; name ) <span class="keyword">const</span> = 0;
00768 
00772     <span class="keyword">virtual</span> wxPGProperty* GenerateProperty ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name ) <span class="keyword">const</span> = 0;
00773 
00776     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetValueFromVariant ( wxPGProperty* property, wxVariant&amp; value ) <span class="keyword">const</span> = 0;
00777 
<a name="l00780"></a><a class="code" href="classwxPGValueType.htm#wxPGValueTypea4">00780</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetType()<span class="keyword"> const</span>
00781 <span class="keyword">    </span>{
00782         <span class="keywordflow">return</span> GetCustomTypeName();
00783     }
00784 
00785 <span class="keyword">protected</span>:
00786 };
00787 
00788 <span class="comment">// -----------------------------------------------------------------------</span>
00789 
00790 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
00791 <span class="preprocessor"></span>
00834 <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyValidator
00835 {
00836 <span class="keyword">public</span>:
00837     wxPropertyValidator();
00838     <span class="keyword">virtual</span> ~wxPropertyValidator();
00839 
00842     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span> = 0;
00843 
00856     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span> = 0;
00857 
00858 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00859 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00860 <span class="preprocessor">#else</span>
00861 <span class="preprocessor"></span>
00865     <span class="keyword">inline</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* ) { }
00866 <span class="preprocessor">#endif</span>
00867 <span class="preprocessor"></span>
00870     wxPropertyValidator* Ref();
00871 
00874     <span class="keywordtype">bool</span> UnRef();
00875 
00876 <span class="keyword">private</span>:
00877     wxPropertyValidator* m_refObject;
00878     <span class="keywordtype">int</span> m_refCount;
00879 };
00880 
00887 <span class="keyword">class </span>WXDLLIMPEXP_PG wxStringPropertyValidator : <span class="keyword">public</span> wxPropertyValidator
00888 {
00889 <span class="keyword">public</span>:
00893     wxStringPropertyValidator( <span class="keyword">const</span> wxString&amp; excludeList );
00894     <span class="keyword">virtual</span> ~wxStringPropertyValidator();
00895 
00896     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span>;
00897     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span>;
00898 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00899 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00900 <span class="preprocessor">#endif</span>
00901 <span class="preprocessor"></span>
00902 <span class="keyword">protected</span>:
00903     wxString m_excludeList;
00904 };
00905 
00911 <span class="keyword">class </span>WXDLLIMPEXP_PG wxIntPropertyValidator : <span class="keyword">public</span> wxPropertyValidator
00912 {
00913 <span class="keyword">public</span>:
00914     wxIntPropertyValidator( <span class="keywordtype">long</span> min, <span class="keywordtype">long</span> max );
00915     <span class="keyword">virtual</span> ~wxIntPropertyValidator();
00916 
00917     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span>;
00918     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span>;
00919 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00920 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00921 <span class="preprocessor">#endif</span>
00922 <span class="preprocessor"></span>
00923 <span class="keyword">protected</span>:
00924     <span class="keywordtype">long</span> m_min, m_max;
00925 };
00926 
00932 <span class="keyword">class </span>WXDLLIMPEXP_PG wxFloatPropertyValidator : <span class="keyword">public</span> wxPropertyValidator
00933 {
00934 <span class="keyword">public</span>:
00935     wxFloatPropertyValidator( <span class="keywordtype">double</span> min, <span class="keywordtype">double</span> max );
00936     <span class="keyword">virtual</span> ~wxFloatPropertyValidator();
00937 
00938     <span class="keyword">virtual</span> wxPropertyValidator* Clone() <span class="keyword">const</span>;
00939     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> Validate ( wxPGVariant&amp; value, wxString&amp; showmsg ) <span class="keyword">const</span>;
00940 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00941 <span class="preprocessor"></span>    <span class="keyword">virtual</span> <span class="keywordtype">void</span> AssertDataType ( <span class="keyword">const</span> wxChar* typestr ) <span class="keyword">const</span>;
00942 <span class="preprocessor">#endif</span>
00943 <span class="preprocessor"></span>
00944 <span class="keyword">protected</span>:
00945     <span class="keywordtype">double</span> m_min, m_max;
00946 };
00947 
00948 <span class="preprocessor">#endif</span>
00949 <span class="preprocessor"></span>
00950 <span class="comment">// -----------------------------------------------------------------------</span>
00951 
00952 <span class="keyword">union </span>wxPGVariantUnion
00953 {
00954     <span class="keywordtype">long</span>        m_long;
00955     <span class="keywordtype">void</span>*       m_ptr;
00956     <span class="keywordtype">bool</span>        m_bool;
00957 };
00958 
00959 <span class="comment">// Very simple value wrapper.</span>
00960 <span class="keyword">class </span>wxPGVariant
00961 {
00962 <span class="keyword">public</span>:
00963 
00965     wxPGVariant ()
00966     {
00967         m_v.m_ptr = (<span class="keywordtype">void</span>*)NULL;
00968     }
00969 <span class="preprocessor">#ifndef SWIG</span>
00970 <span class="preprocessor"></span>
00971     wxPGVariant ( <span class="keywordtype">long</span> v_long )
00972     {
00973         m_v.m_long = v_long;
00974     }
00976     wxPGVariant ( <span class="keywordtype">int</span> v_long )
00977     {
00978         m_v.m_long = v_long;
00979     }
00981     wxPGVariant ( <span class="keywordtype">bool</span> value )
00982     {
00983         m_v.m_bool = value;
00984     }
00986     wxPGVariant ( <span class="keyword">const</span> <span class="keywordtype">double</span>&amp; v_ptr )
00987     {
00988         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
00989     }
00991     wxPGVariant ( <span class="keyword">const</span> wxString&amp; v_ptr )
00992     {
00993         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
00994     }
00996     wxPGVariant ( <span class="keyword">const</span> wxArrayString&amp; v_ptr )
00997     {
00998         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
00999     }
01001     wxPGVariant ( <span class="keyword">const</span> wxObject&amp; v_ptr )
01002     {
01003         m_v.m_ptr = (<span class="keywordtype">void</span>*)&amp;v_ptr;
01004     }
01006     wxPGVariant ( <span class="keyword">const</span> wxObject* v_ptr )
01007     {
01008         m_v.m_ptr = (<span class="keywordtype">void</span>*)v_ptr;
01009     }
01011     wxPGVariant ( <span class="keywordtype">void</span>* v_ptr )
01012     {
01013         m_v.m_ptr = v_ptr;
01014     }
01015 
01017     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetLong ()<span class="keyword"> const</span>
01018 <span class="keyword">    </span>{
01019         <span class="keywordflow">return</span> m_v.m_long;
01020     }
01022     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetBool ()<span class="keyword"> const</span>
01023 <span class="keyword">    </span>{
01024         <span class="keywordflow">return</span> m_v.m_bool;
01025     }
01027     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetDouble ()<span class="keyword"> const</span>
01028 <span class="keyword">    </span>{
01029         <span class="keywordflow">return</span> *((<span class="keywordtype">double</span>*)m_v.m_ptr);
01030     }
01032     <span class="keyword">inline</span> <span class="keywordtype">double</span>* GetDoublePtr ()<span class="keyword"> const</span>
01033 <span class="keyword">    </span>{
01034         <span class="keywordflow">return</span> (<span class="keywordtype">double</span>*) m_v.m_ptr;
01035     }
01037     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetString ()<span class="keyword"> const</span>
01038 <span class="keyword">    </span>{
01039         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxString*)m_v.m_ptr);
01040     }
01042     <span class="keyword">inline</span> wxArrayString&amp; GetArrayString ()<span class="keyword"> const</span>
01043 <span class="keyword">    </span>{
01044         wxArrayString* temp = (wxArrayString*)m_v.m_ptr;
01045         <span class="keywordflow">return</span> *temp;
01046     }
01047 
01048     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject&amp; GetWxObject()<span class="keyword"> const</span>
01049 <span class="keyword">    </span>{
01050         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxObject*)m_v.m_ptr);
01051     }
01052 
01053     <span class="keyword">inline</span> wxObject* GetWxObjectPtr()<span class="keyword"> const</span>
01054 <span class="keyword">    </span>{
01055         <span class="keywordflow">return</span> (wxObject*)m_v.m_ptr;
01056     }
01057 
01059     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetVoidPtr ()<span class="keyword"> const</span>
01060 <span class="keyword">    </span>{
01061         <span class="keywordflow">return</span> m_v.m_ptr;
01062     }
01063 <span class="preprocessor">#endif</span>
01064 <span class="preprocessor"></span>
01066     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetRawLong ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_v.m_long; }
01067 
01069     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetRawPtr ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_v.m_ptr; }
01070 
01071 <span class="preprocessor">#undef wxPG_ASSERT_VARIANT_GET</span>
01072 <span class="preprocessor"></span>
01074     wxPGVariantUnion          m_v;
01075 };
01076 
01077 <span class="preprocessor">#define wxPGVariantToString(A)      A.GetString()</span>
01078 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToLong(A)        A.GetLong()</span>
01079 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToBool(A)        A.GetBool()</span>
01080 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToDouble(A)      A.GetDouble()</span>
01081 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToArrayString(A) A.GetArrayString()</span>
01082 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToWxObject(A)        A.GetWxObject()</span>
01083 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToWxObjectPtr(A,B)   wxDynamicCast((wxObject*)A.GetRawPtr(),B);</span>
01084 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantToVoidPtr(A)     A.GetVoidPtr()</span>
01085 <span class="preprocessor"></span>
01086 <span class="preprocessor">#define wxPGVariantFromString(A)        A</span>
01087 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromLong(A)          A</span>
01088 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromDouble(A)        A</span>
01089 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromArrayString(A)   A</span>
01090 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromBool(A)          A</span>
01091 <span class="preprocessor"></span><span class="preprocessor">#define wxPGVariantFromWxObject(A)      *((const wxObject*)A)</span>
01092 <span class="preprocessor"></span>
01093 <span class="comment">// -----------------------------------------------------------------------</span>
01094 
01095 <span class="comment">//</span>
01096 <span class="comment">// Property class declaration helper macros</span>
01097 <span class="comment">// (wxPGRootPropertyClass and wxPropertyCategory require this).</span>
01098 <span class="comment">//</span>
01099 
01100 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY_CLASS() \</span>
01101 <span class="preprocessor">public: \</span>
01102 <span class="preprocessor">    virtual const wxPGValueType* GetValueType () const; \</span>
01103 <span class="preprocessor">    virtual const wxPGEditor* GetEditorClass () const; \</span>
01104 <span class="preprocessor">    WX_PG_DECLARE_GETCLASSNAME() \</span>
01105 <span class="preprocessor">private:</span>
01106 <span class="preprocessor"></span>
01107 <span class="comment">// -----------------------------------------------------------------------</span>
01108 <span class="comment">// wxPGPropertyClassInfo</span>
01109 
01110 
01111 <span class="keyword">typedef</span> wxPGProperty* (*wxPGPropertyConstructor) (<span class="keyword">const</span> wxString&amp;,<span class="keyword">const</span> wxString&amp;);
01112 
<a name="l01118"></a><a class="code" href="structwxPGPropertyClassInfo.htm">01118</a> <span class="keyword">struct </span><a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a>
01119 {
01120     <span class="comment">// One returned by GetPropertyClassName</span>
01121     <span class="keyword">const</span> wxChar*               m_name;
01122 
01123     <span class="comment">// Simple property constructor function.</span>
01124     wxPGPropertyConstructor     m_constructor;
01125 };
01126 
01127 
01128 <span class="comment">// Use this macro to register your custom property classes.</span>
01129 <span class="preprocessor">#define wxPGRegisterPropertyClass(NAME) \</span>
01130 <span class="preprocessor">    wxPropertyGrid::RegisterPropertyClass(wxT(#NAME),&amp;NAME##ClassInfo)</span>
01131 <span class="preprocessor"></span>
01132 
01133 <span class="comment">// -----------------------------------------------------------------------</span>
01134 
01135 
01136 <span class="comment">// Structure for relaying choice/list info.</span>
01137 <span class="keyword">struct </span>wxPGChoiceInfo
01138 {
01139     <span class="keyword">const</span> wxChar**  m_arrWxChars;
01140     wxString*       m_arrWxString;
01141     wxPGConstants** m_constants;
01142     <span class="keywordtype">int</span>             m_itemCount;
01143 };
01144 
01145 
01158 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
01159 <span class="preprocessor"></span><span class="keyword">class </span>WXDLLIMPEXP_PG wxPGProperty : <span class="keyword">public</span> wxVariant
01160 #elif wxPG_INCLUDE_WXOBJECT
01161 class WXDLLIMPEXP_PG wxPGProperty : <span class="keyword">public</span> wxObject
01162 #else
<a name="l01163"></a><a class="code" href="classwxPGProperty.htm">01163</a> class WXDLLIMPEXP_PG wxPGProperty
01164 #endif
01165 {
01166     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGPropertyWithChildren;
01167     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
01168     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
01169     <span class="comment">//_WX_PG_DECLARE_PROPERTY_CLASS(wxPGProperty)</span>
01170 <span class="keyword">public</span>:
01171 
01174     <a class="code" href="classwxPGProperty.htm#wxPGPropertya48">wxPGProperty</a>();
01175 
01202     <a class="code" href="classwxPGProperty.htm#wxPGPropertya48">wxPGProperty</a>( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
01203 
01205     <span class="keyword">virtual</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya49">~wxPGProperty</a>();
01206 
01241     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa7">DoSetValue</a> ( wxPGVariant value );
01242 
01245     <span class="keyword">virtual</span> wxPGVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa5">DoGetValue</a> () <span class="keyword">const</span>;
01246 
01247 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
01248 <span class="preprocessor"></span>
01250     <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa33">GetValueAsVariant</a> ()<span class="keyword"> const</span>
01251 <span class="keyword">    </span>{
01252         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
01253     }
01254 <span class="preprocessor">#else</span>
01255 <span class="preprocessor"></span>
01257     <span class="keyword">inline</span> wxVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa33">GetValueAsVariant</a> () <span class="keyword">const</span>;
01258 <span class="preprocessor">#endif</span>
01259 <span class="preprocessor"></span>
01265     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#wxPGPropertya24">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags = 0 ) <span class="keyword">const</span>;
01266 
01276     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya43">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags = 0 );
01277 
01287     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa56">SetValueFromInt</a> ( <span class="keywordtype">long</span> value, <span class="keywordtype">int</span> flags = 0 );
01288 
01293     <span class="keyword">virtual</span> wxSize <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa22">GetImageSize</a>() <span class="keyword">const</span>;
01294 
01313     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa45">OnEvent</a> ( wxPropertyGrid* propgrid, wxPGCtrlClass* wnd_primary, wxEvent&amp; event );
01314 
01315 <span class="preprocessor">#if wxPG_INCLUDE_WXOBJECT</span>
01316 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa13">GetClassName</a> ()<span class="keyword"> const</span>
01317 <span class="keyword">    </span>{
01318         <span class="keywordflow">return</span> GetClassInfo()-&gt;GetClassName();
01319     }
01320 <span class="preprocessor">#else</span>
01321 <span class="preprocessor"></span>
01324     <span class="keyword">virtual</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa13">GetClassName</a> () <span class="keyword">const</span> = 0;
01325 <span class="preprocessor">#endif</span>
01326 <span class="preprocessor"></span>
01338     <span class="keyword">virtual</span> <span class="keyword">const</span> wxPGValueType* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa34">GetValueType</a> () <span class="keyword">const</span> = 0;
01339 
01342     <span class="keyword">virtual</span> <span class="keyword">const</span> wxPGEditor* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa18">GetEditorClass</a> () <span class="keyword">const</span>;
01343 
01349     <span class="comment">//virtual int GetParentingType() const;</span>
<a name="l01350"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa28">01350</a>     <span class="keyword">inline</span> <span class="keywordtype">signed</span> <span class="keywordtype">char</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa28">GetParentingType</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parentingType; }
01351 
01363     <span class="keyword">virtual</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa12">GetChoiceInfo</a> ( wxPGChoiceInfo* choiceinfo );
01364 
01399     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa44">OnCustomPaint</a> ( wxDC&amp; dc,
01400         <span class="keyword">const</span> wxRect&amp; rect, <a class="code" href="structwxPGPaintData.htm">wxPGPaintData</a>&amp; paintdata );
01401 
01410     <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa48">SetAttribute</a> ( <span class="keywordtype">int</span> <span class="keywordtype">id</span>, wxVariant value );
01411 
<a name="l01413"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa25">01413</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa25">GetLabel</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_label; }
01414 
01416     wxPropertyGridState* <a class="code" href="classwxPGProperty.htm#wxPGPropertya22">GetParentState</a>() <span class="keyword">const</span>;
01417 
01418 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
01419 <span class="preprocessor"></span>
01420     <span class="comment">//inline const wxString&amp; GetName() const { return wxVariant::GetName(); }</span>
01421     <span class="keyword">inline</span> <span class="keywordtype">void</span> DoSetName(<span class="keyword">const</span> wxString&amp; str) { SetName(str); }
01422 <span class="preprocessor">#else</span>
01423 <span class="preprocessor"></span>
<a name="l01424"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa26">01424</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa26">GetName</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_name; }
01425     <span class="keyword">inline</span> <span class="keywordtype">void</span> DoSetName(<span class="keyword">const</span> wxString&amp; str) { m_name = str; }
01426 <span class="preprocessor">#endif</span>
01427 <span class="preprocessor"></span>
<a name="l01432"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa35">01432</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa35">GetY</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_y; }
01433 
01434     <span class="keywordtype">void</span> UpdateControl ( wxPGCtrlClass* primary );
01435 
01436     <span class="keyword">inline</span> wxString GetDisplayedString ()<span class="keyword"> const</span>
01437 <span class="keyword">    </span>{
01438         <span class="keywordflow">return</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya24">GetValueAsString</a>(0);
01439     }
01440 
<a name="l01442"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa21">01442</a>     <span class="keyword">inline</span> wxPGId <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa21">GetId</a>() { <span class="keywordflow">return</span> wxPGIdGen(<span class="keyword">this</span>); }
01443 
<a name="l01445"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">01445</a>     <span class="keyword">inline</span> wxPGPropertyWithChildren* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa27">GetParent</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parent; }
01446 
<a name="l01450"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa39">01450</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa39">IsOk</a>()<span class="keyword"> const</span>
01451 <span class="keyword">    </span>{
01452         <span class="keywordflow">return</span> (( m_y &gt;= -1 )?TRUE:FALSE);
01453     }
01454 
01455     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFlagSet( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag )<span class="keyword"> const</span>
01456 <span class="keyword">    </span>{
01457         <span class="keywordflow">return</span> ( m_flags &amp; flag ) ? TRUE : FALSE;
01458     }
01459 
<a name="l01463"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa2">01463</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa2">CanHaveExtraChildren</a>()<span class="keyword"> const</span>
01464 <span class="keyword">    </span>{
01465         <span class="keywordflow">return</span> ( m_parentingType == 1 || m_parentingType == -2 );
01466     }
01467 
01468     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetFlags()<span class="keyword"> const</span>
01469 <span class="keyword">    </span>{
01470         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_flags;
01471     }
01472 
<a name="l01476"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa31">01476</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa31">GetType</a>()<span class="keyword"> const</span>
01477 <span class="keyword">    </span>{
01478         <span class="keywordflow">return</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa34">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea4">GetType</a>();
01479     }
01480 
<a name="l01482"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa41">01482</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa41">IsSubProperty</a>()<span class="keyword"> const</span>
01483 <span class="keyword">    </span>{
01484         wxPGProperty* parent = (wxPGProperty*)m_parent;
01485         <span class="keywordflow">if</span> ( parent &amp;&amp; parent-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa28">GetParentingType</a>() &lt; 0 &amp;&amp; parent-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassp15">m_y</a> &gt; -2 )
01486             <span class="keywordflow">return</span> TRUE;
01487         <span class="keywordflow">return</span> FALSE;
01488     }
01489 
01491     size_t <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa11">GetChildCount</a>() <span class="keyword">const</span>;
01492 
01493     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetArrIndex()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrIndex; }
01494 
01495     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetDepth()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_depth; }
01496 
<a name="l01498"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa23">01498</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa23">GetIndexInParent</a>()<span class="keyword"> const</span>
01499 <span class="keyword">    </span>{
01500         <span class="keywordflow">return</span> (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)m_arrIndex;
01501     }
01502 
01506     <span class="keywordtype">void</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa50">SetChoicesPrivate</a>();
01507 
01508     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetFlag( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag ) { m_flags |= flag; }
01509 
01510     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetHelpString ( <span class="keyword">const</span> wxString&amp; help_string ) { m_helpString = help_string; }
01511 
01512     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetLabel( <span class="keyword">const</span> wxString&amp; label ) { m_label = label; }
01513 
01514 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
01515 <span class="preprocessor"></span>
01516     <span class="keywordtype">void</span> SetValidator ( wxPropertyValidator&amp; validator );
01517 
01519     wxPropertyValidator&amp; GetValidator () <span class="keyword">const</span>;
01520 
01524     <span class="keywordtype">bool</span> StdValidationProcedure( wxPGVariant value );
01525 
01526 <span class="preprocessor">#else</span>
01527 <span class="preprocessor"></span>
01528     <span class="keyword">inline</span> <span class="keywordtype">bool</span> StdValidationProcedure( wxPGVariant value )
01529     {
01530         <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa7">DoSetValue</a>( value );
01531         <span class="keywordflow">return</span> TRUE;
01532     }
01533 
01534 <span class="preprocessor">#endif</span>
01535 <span class="preprocessor"></span>
01551     <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa46">PrepareValueForDialogEditing</a>( wxPropertyGrid* propgrid );
01552 
01553 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
01554 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetClientData ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_clientData; }
01555     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetClientData ( <span class="keywordtype">void</span>* clientData ) { m_clientData = clientData; }
01556 <span class="preprocessor">#endif</span>
01557 <span class="preprocessor"></span>
01562     size_t <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa49">SetChoices</a> ( size_t <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; labels, <span class="keyword">const</span> wxArrayInt&amp; values );
01563 
01564     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetHelpString ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_helpString; }
01565 
01566     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearFlag( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> flag ) { m_flags &amp;= ~(flag); }
01567 
01568     <span class="comment">// Use, for example, to detect if item is inside collapsed section.</span>
01569     <span class="keywordtype">bool</span> IsSomeParent ( wxPGProperty* candidate_parent ) <span class="keyword">const</span>;
01570 
01571     <span class="comment">// Shows error as a tooltip or something similar (depends on platform).</span>
01572     <span class="keywordtype">void</span> ShowError ( <span class="keyword">const</span> wxString&amp; msg );
01573 
01574 <span class="keyword">protected</span>:
01575 
01576     <span class="comment">// Called in constructors.</span>
01577     <span class="keywordtype">void</span> Init ();
01578 
01579     wxString                    m_label;
01580 <span class="comment">//#if wxPG_EMBED_VARIANT</span>
01581 <span class="comment">//    wxVariant                   m_variant;</span>
01582 <span class="comment">//#else</span>
01583     wxString                    m_name;
01584     wxPGPropertyWithChildren*   m_parent;
01585     wxString                    m_helpString; <span class="comment">// Help shown in statusbar or help box.</span>
01586 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
01587 <span class="preprocessor"></span>    <span class="keywordtype">void</span>*                       m_clientData;
01588 <span class="preprocessor">#endif</span>
01589 <span class="preprocessor"></span><span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
01590 <span class="preprocessor"></span>    wxPropertyValidator*        m_validator;
01591 <span class="preprocessor">#endif</span>
01592 <span class="preprocessor"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>                m_arrIndex; <span class="comment">// Index in parent.</span>
01593     <span class="keywordtype">int</span>                         m_y; <span class="comment">// This could be short int.</span>
01594     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_flags; <span class="comment">// This could be short int.</span>
01595 
01596     <span class="comment">// 1 = category</span>
01597     <span class="comment">// 0 = no children</span>
01598     <span class="comment">// -1 = has fixed-set of sub-properties</span>
01599     <span class="comment">// -2 = this is wxCustomProperty (sub-properties can be added)</span>
01600     <span class="keywordtype">signed</span> <span class="keywordtype">char</span>                 m_parentingType;
01601 
01602     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_depth; <span class="comment">// Root has 0, categories etc. at that level 1, etc.</span>
01603 
01604     <span class="comment">// m_depthBgCol indicates width of background colour between margin and item</span>
01605     <span class="comment">// (essentially this is category's depth, if none then equals m_depth).</span>
01606     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_depthBgCol;
01607 
01608     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_bgColIndex; <span class="comment">// Cell background brush index.</span>
01609 
01610 };
01611 
01612 <span class="comment">//</span>
01613 <span class="comment">// wxPGId comparison operators.</span>
01614 <span class="comment">// TODO: Are these really used?</span>
01615 <span class="comment">//</span>
01616 
01617 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> wxPGId&amp; <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; b)
01618 {
01619     wxASSERT (wxPGIdIsOk(<span class="keywordtype">id</span>));
01620     <span class="keyword">const</span> wxString&amp; a = <span class="keywordtype">id</span>.GetProperty().GetName();
01621     <span class="keywordflow">return</span> (a.Len() == b.Len()) &amp;&amp; (a.Cmp(b) == 0);
01622 }
01623 
01624 <span class="keyword">inline</span> <span class="keywordtype">bool</span> operator==(<span class="keyword">const</span> wxPGId&amp; <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* b)
01625 {
01626     wxASSERT (wxPGIdIsOk(<span class="keywordtype">id</span>));
01627     <span class="keywordflow">return</span> <span class="keywordtype">id</span>.GetProperty().GetName().Cmp(b) == 0;
01628 }
01629 
01630 
01631 <span class="comment">// For dual-pointer-usage reasons, we need to use this trickery</span>
01632 <span class="comment">// instead of wxObjArray. wxPGValueType hash map is declared</span>
01633 <span class="comment">// in propdev.h.</span>
01634 <span class="keyword">typedef</span> wxArrayPtrVoid wxPGArrayProperty;
01635 
01636 <span class="comment">// It was reported that the alternative does not work with GCC 4.1</span>
01637 <span class="preprocessor">#if wxUSE_UNICODE || wxCHECK_GCC_VERSION(4,0) || wxUSE_STL</span>
01638 <span class="preprocessor"></span>
01639 <span class="comment">// Always use wxString based hashmap with unicode</span>
01640 WX_DECLARE_STRING_HASH_MAP_WITH_DECL(<span class="keywordtype">void</span>*,
01641                                      wxPGHashMapS2P,
01642                                      <span class="keyword">class</span> WXDLLIMPEXP_PG);
01643 
01644 <span class="preprocessor"># define wxPGNameStr            const wxString&amp;</span>
01645 <span class="preprocessor"></span><span class="preprocessor"># define wxPGNameConv(STR)      STR</span>
01646 <span class="preprocessor"></span>
01647 <span class="preprocessor">#else</span>
01648 <span class="preprocessor"></span>
01649 WX_DECLARE_HASH_MAP_WITH_DECL(wxChar*,     <span class="comment">// type of the keys</span>
01650                               <span class="keywordtype">void</span>*,                 <span class="comment">// type of the values</span>
01651                               wxStringHash,          <span class="comment">// hasher</span>
01652                               wxStringEqual,         <span class="comment">// key equality predicate</span>
01653                               wxPGHashMapS2P,       <span class="comment">// name of the class</span>
01654                               <span class="keyword">class</span> WXDLLIMPEXP_PG);
01655 
01656 <span class="preprocessor"># define wxPGNameStr         const wxChar*       // Should be same as hashmap type</span>
01657 <span class="preprocessor"></span><span class="preprocessor"># define wxPGNameConv(STR)   ((char * const)STR.c_str())</span>
01658 <span class="preprocessor"></span>
01659 <span class="preprocessor">#endif</span>
01660 <span class="preprocessor"></span>
01661 <span class="comment">// -----------------------------------------------------------------------</span>
01662 
01663 <span class="comment">// Hash map for int-to-int mapping</span>
01664 WX_DECLARE_HASH_MAP_WITH_DECL(size_t,
01665                               size_t,
01666                               wxIntegerHash,
01667                               wxIntegerEqual,
01668                               wxPGHashMapI2I,
01669                               <span class="keyword">class</span> WXDLLIMPEXP_PG);
01670 
01671 <span class="comment">// -----------------------------------------------------------------------</span>
01672 
01673 <span class="preprocessor">#if !wxPG_EMBED_VARIANT</span>
<a name="l01674"></a><a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa33">01674</a> <span class="preprocessor"></span><span class="keyword">inline</span> wxVariant <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa33">wxPGProperty::GetValueAsVariant</a> ()<span class="keyword"> const</span>
01675 <span class="keyword"></span>{
01676     wxPGVariant value = <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa5">DoGetValue</a>();
01677     <span class="keyword">const</span> wxPGValueType* typeclass = <a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa34">GetValueType</a>();
01678     wxASSERT_MSG ( typeclass, wxT(<span class="stringliteral">"Did you forgot to use wxPG_INIT_REQUIRED_TYPE(T) in constructor?"</span>) );
01679     <span class="keywordflow">return</span> typeclass-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea1">GenerateVariant</a>(value,m_name);
01680 }
01681 <span class="preprocessor">#endif</span>
01682 <span class="preprocessor"></span>
01683 <span class="comment">// -----------------------------------------------------------------------</span>
01684 
<a name="l01690"></a><a class="code" href="classwxPGPropertyWithChildren.htm">01690</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGPropertyWithChildren : <span class="keyword">public</span> wxPGProperty
01691 {
01692     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGProperty;
01693     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
01694     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
01695 <span class="keyword">public</span>:
01696 
01698     wxPGPropertyWithChildren();
01699 
01704     wxPGPropertyWithChildren( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
01705 
01707     <span class="keyword">virtual</span> ~wxPGPropertyWithChildren();
01708 
01709     <span class="comment">//virtual int GetParentingType() const;</span>
01710 
01714     <span class="comment">// Advanced version that gives property list and index to this item</span>
01715     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGProperty.htm#wxPGPropertya24">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags = 0 ) <span class="keyword">const</span>;
01716 
01720     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPGProperty.htm#wxPGPropertya43">SetValueFromString</a> ( <span class="keyword">const</span> wxString&amp; text, <span class="keywordtype">int</span> flags );
01721 
01724     <span class="keyword">virtual</span> <span class="keywordtype">void</span> RefreshChildren();
01725 
01729     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ChildChanged ( wxPGProperty* p );
01730 
<a name="l01732"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa15">01732</a>     <span class="keyword">inline</span> size_t GetCount()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_children.GetCount(); }
01733 
<a name="l01735"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa42">01735</a>     <span class="keyword">inline</span> wxPGProperty* Item ( size_t i )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (wxPGProperty*)m_children.Item(i); }
01736 
<a name="l01738"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa43">01738</a>     <span class="keyword">inline</span> wxPGProperty* Last ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (wxPGProperty*)m_children.Last(); }
01739 
<a name="l01741"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa36">01741</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> Index ( <span class="keyword">const</span> wxPGProperty* p )<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_children.Index((<span class="keywordtype">void</span>*)p); }
01742 
01744     <span class="keywordtype">void</span> Empty();
01745 
01746     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsExpanded()<span class="keyword"> const</span>
01747 <span class="keyword">    </span>{
01748         <span class="keywordflow">return</span> ( m_expanded &gt; 0 ) ? TRUE : FALSE;
01749     }
01750 
<a name="l01751"></a><a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa29">01751</a>     wxPropertyGridState* <a class="code" href="classwxPGProperty.htm#wxPGPropertya22">GetParentState</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_parentState; }
01752 
01753     <span class="comment">// Puts correct indexes to children</span>
01754     <span class="keywordtype">void</span> FixIndexesOfChildren ( size_t starthere = 0 );
01755 
01756     wxPGProperty* GetItemAtY ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lh );
01757 
01758     <span class="keywordtype">void</span> AddChild ( wxPGProperty* prop, <span class="keywordtype">int</span> index = -1, <span class="keywordtype">bool</span> correct_mode = TRUE );
01759 
01760     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetParentState ( wxPropertyGridState* pstate ) { m_parentState = pstate; }
01761 
01762 <span class="keyword">protected</span>:
01763 
01764     wxPropertyGridState*    m_parentState;
01765 
01766     wxPGArrayProperty   m_children;
01767     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_expanded;
01768 };
01769 
01770 
01771 <span class="comment">// -----------------------------------------------------------------------</span>
01772 
<a name="l01777"></a><a class="code" href="classwxPGRootPropertyClass.htm">01777</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGRootPropertyClass : <span class="keyword">public</span> wxPGPropertyWithChildren
01778 {
01779     WX_PG_DECLARE_PROPERTY_CLASS()
01780 <span class="keyword">public</span>:
01781 
01783     wxPGRootPropertyClass();
01784     <span class="keyword">virtual</span> ~wxPGRootPropertyClass();
01785 
01787     <span class="comment">//virtual int GetParentingType() const;</span>
01788 
01789 <span class="keyword">protected</span>:
01790 };
01791 
01792 <span class="comment">// -----------------------------------------------------------------------</span>
01793 
<a name="l01798"></a><a class="code" href="classwxPropertyCategoryClass.htm">01798</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyCategoryClass : <span class="keyword">public</span> wxPGPropertyWithChildren
01799 {
01800     WX_PG_DECLARE_PROPERTY_CLASS()
01801 <span class="keyword">public</span>:
01802 
01804     wxPropertyCategoryClass();
01805 
01813     wxPropertyCategoryClass( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a> );
01814     ~wxPropertyCategoryClass();
01815 
01817     <span class="keyword">virtual</span> wxString <a class="code" href="classwxPGPropertyWithChildren.htm#wxPGRootPropertyClassa30">GetValueAsString</a> ( <span class="keywordtype">int</span> arg_flags ) <span class="keyword">const</span>;
01818 
01819     <span class="comment">//virtual int GetParentingType() const;</span>
01820 
01821     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetTextExtent()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_textExtent; }
01822 
01823     <span class="keywordtype">void</span> CalculateTextExtent ( wxWindow* wnd, wxFont&amp; font );
01824 
01825 <span class="keyword">protected</span>:
01826     <span class="keywordtype">int</span> m_textExtent; <span class="comment">// pre-calculated length of text</span>
01827 };
01828 
01829 <span class="comment">// -----------------------------------------------------------------------</span>
01830 
01831 <span class="comment">// Used to indicate wxPGConstants::Add etc that the value shall not be added</span>
01832 <span class="preprocessor">#define wxPG_INVALID_VALUE      2147483647</span>
01833 <span class="preprocessor"></span>
<a name="l01838"></a><a class="code" href="classwxPGConstants.htm">01838</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPGConstants
01839 {
01840 <span class="keyword">public</span>:
01841     
01843     wxPGConstants();
01844 
01846     wxPGConstants( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 );
01847 
01849     wxPGConstants( <span class="keyword">const</span> wxArrayString&amp; labels, <span class="keyword">const</span> wxArrayInt&amp; values = *((<span class="keyword">const</span> wxArrayInt*)NULL) );
01850 
01854     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 );
01855 
01857     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxArrayString&amp; arr, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL );
01858 
01860     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxArrayString&amp; arr, <span class="keyword">const</span> wxArrayInt&amp; arrint );
01861 
01863     <span class="keywordtype">void</span> Add ( <span class="keyword">const</span> wxChar* label, <span class="keywordtype">int</span> value = wxPG_INVALID_VALUE );
01864 
<a name="l01867"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa10">01867</a>     <span class="keyword">inline</span> wxArrayString&amp; GetLabels()
01868     {
01869         wxASSERT ( m_refCount != 0xFFFFFFF );
01870         <span class="keywordflow">return</span> m_arrLabels;
01871     }
01872 
<a name="l01875"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa14">01875</a>     <span class="keyword">inline</span> wxArrayInt&amp; GetValues()
01876     {
01877         wxASSERT ( m_refCount != 0xFFFFFFF );
01878         <span class="keywordflow">return</span> m_arrValues;
01879     }
01880 
<a name="l01884"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa15">01884</a>     <span class="keywordtype">bool</span> IsOk ()<span class="keyword"> const</span>
01885 <span class="keyword">    </span>{
01886         <span class="keywordflow">return</span> ( m_refCount != 0xFFFFFFF );
01887     }
01888 
<a name="l01891"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa16">01891</a>     <span class="keywordtype">bool</span> IsTemporary ()<span class="keyword"> const</span>
01892 <span class="keyword">    </span>{
01893         <span class="keywordflow">return</span> ( m_refCount == 0 );
01894     }
01895 
<a name="l01897"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa7">01897</a>     size_t GetId()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_id; };
01898 
<a name="l01900"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa20">01900</a>     <span class="keywordtype">void</span> Set ( <span class="keyword">const</span> wxChar** labels, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0 )
01901     {
01902         Free();
01903         Add(labels,values,itemcount);
01904     }
01905 
<a name="l01909"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa19">01909</a>     <span class="keywordtype">void</span> Set ( wxArrayString&amp; arr, <span class="keyword">const</span> <span class="keywordtype">long</span>* values = (<span class="keyword">const</span> <span class="keywordtype">long</span>*) NULL )
01910     {
01911         Free();
01912         Add(arr,values);
01913     }
01914 
<a name="l01916"></a><a class="code" href="classwxPGConstants.htm#wxPGConstantsa18">01916</a>     <span class="keywordtype">void</span> Set ( <span class="keyword">const</span> wxArrayString&amp; labels, <span class="keyword">const</span> wxArrayInt&amp; values = *((<span class="keyword">const</span> wxArrayInt*)NULL) )
01917     {
01918         Free();
01919         <span class="keywordflow">if</span> ( &amp;values )
01920             Add(labels,values);
01921         <span class="keywordflow">else</span>
01922             Add(labels);
01923     }
01924 
01928     <span class="keywordtype">void</span> SetId( size_t <span class="keywordtype">id</span> );
01929 
01930     <span class="keywordtype">void</span> SetupId( size_t <span class="keywordtype">id</span> ) { m_id = <span class="keywordtype">id</span>; }
01931 
01932     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetLabel( size_t ind )
01933     {
01934         <span class="keywordflow">return</span> m_arrLabels[ind];
01935     }
01936     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetLabels()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrLabels; }
01937 
01938     <span class="keyword">inline</span> size_t GetCount () { <span class="keywordflow">return</span> m_arrLabels.GetCount(); }
01939 
01940     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetValue( size_t ind ) { <span class="keywordflow">return</span> m_arrValues[ind]; }
01941     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetValues()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrValues; }
01942 
01943     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetRefCount()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_refCount; }
01944     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetRefCount(<span class="keywordtype">int</span> refcount) { m_refCount = refcount; }
01945     <span class="keyword">inline</span> <span class="keywordtype">void</span> Ref()
01946     {
01947         wxASSERT ( m_refCount != 0xFFFFFFF );
01948         m_refCount++;
01949         <span class="comment">/*</span>
01950 <span class="comment">        const wxChar* l1 = wxT("&lt;no_items&gt;");</span>
01951 <span class="comment">        if ( GetCount() )</span>
01952 <span class="comment">            l1 = m_arrLabels[0].c_str();</span>
01953 <span class="comment">        wxLogDebug(wxT("%X: %s... Ref: refcount is now %i"),(unsigned int)this,l1,(int)m_refCount);</span>
01954 <span class="comment">        */</span>
01955     }
01956     <span class="keyword">inline</span> <span class="keywordtype">bool</span> UnRef()
01957     {
01958         wxASSERT ( m_refCount != 0xFFFFFFF );
01959         m_refCount--;
01960 
01961         <span class="comment">/*</span>
01962 <span class="comment">        const wxChar* l1 = wxT("&lt;no_items&gt;");</span>
01963 <span class="comment">        if ( GetCount() )</span>
01964 <span class="comment">            l1 = m_arrLabels[0].c_str();</span>
01965 <span class="comment">        wxLogDebug(wxT("%X: %s... UnRef: refcount is now %i"),(unsigned int)this,l1,(int)m_refCount);</span>
01966 <span class="comment">        */</span>
01967 
01968         <span class="keywordflow">return</span> ( m_refCount &lt; 1 );
01969     }
01970 
01971     <span class="keyword">inline</span> <span class="keywordtype">void</span> AddString( <span class="keyword">const</span> wxString&amp; str ) { m_arrLabels.Add(str); }
01972     <span class="keyword">inline</span> <span class="keywordtype">void</span> AddInt( <span class="keywordtype">int</span> val ) { m_arrValues.Add(val); }
01973 
01974     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetLabels( wxArrayString&amp; arr ) { m_arrLabels = arr; }
01975     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetLabels( <span class="keyword">const</span> wxArrayString&amp; arr ) { m_arrLabels = arr; }
01976     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetValues( wxArrayInt&amp; arr ) { m_arrValues = arr; }
01977     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetValues( <span class="keyword">const</span> wxArrayInt&amp; arr ) { m_arrValues = arr; }
01978 
01980     ~wxPGConstants();
01981 
01982 <span class="keyword">protected</span>:
01983 
01984     wxArrayString   m_arrLabels;
01985     wxArrayInt      m_arrValues;
01986 
01987     size_t          m_id; <span class="comment">// usually pointer to a wxChar* array</span>
01988 
01989 <span class="preprocessor">#ifdef __WXDEBUG__</span>
01990 <span class="preprocessor"></span><span class="keyword">public</span>:
01991     <span class="comment">// For pairing validation</span>
01992     <span class="keyword">const</span> <span class="keywordtype">long</span>*     m_origValueArray;
01993 <span class="keyword">protected</span>:
01994 <span class="preprocessor">#endif</span>
01995 <span class="preprocessor"></span>
01996     <span class="comment">// So that multiple properties can use the same set</span>
01997     <span class="keywordtype">int</span>             m_refCount;
01998 
01999     <span class="keywordtype">void</span> Init ()
02000     {
02001         m_id = 0;
02002         m_refCount = 0;
02003     }
02004     <span class="keywordtype">void</span> Free ();
02005 
02006 };
02007 
02008 <span class="comment">// -----------------------------------------------------------------------</span>
02009 <span class="comment">// Property declaration.</span>
02010 
02011 <span class="preprocessor">#define wxPG_CONSTFUNC(PROP) PROP</span>
02012 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_PROPCLASS(PROP) PROP##Class</span>
02013 <span class="preprocessor"></span>
02014 <span class="comment">// Macro based constructor.</span>
02015 <span class="preprocessor">#define wxPG_NEWPROPERTY(PROP,LABEL,NAME,VALUE) wx##PROP##Property(LABEL,NAME,VALUE)</span>
02016 <span class="preprocessor"></span>
02017 <span class="preprocessor">#define wxPG_DECLARE_PROPERTY_CLASSINFO(NAME) \</span>
02018 <span class="preprocessor">    extern wxPGPropertyClassInfo NAME##ClassInfo;</span>
02019 <span class="preprocessor"></span>
02020 <span class="preprocessor">#define wxPG_DECLARE_PROPERTY_CLASSINFO_WITH_DECL(NAME,DECL) \</span>
02021 <span class="preprocessor">    extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02022 <span class="preprocessor"></span>
02023 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,VALARG,DEFVAL,DECL) \</span>
02024 <span class="preprocessor">    extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, VALARG = DEFVAL ); \</span>
02025 <span class="preprocessor">    extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02026 <span class="preprocessor"></span>
02027 <span class="preprocessor">#define WX_PG_DECLARE_PROPERTY(NAME,VALARG,DEFVAL) \</span>
02028 <span class="preprocessor">    extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, VALARG = DEFVAL ); \</span>
02029 <span class="preprocessor">    wxPG_DECLARE_PROPERTY_CLASSINFO(NAME)</span>
02030 <span class="preprocessor"></span>
02031 <span class="comment">//</span>
02032 <span class="comment">// Specific macro-based declarations.</span>
02033 <span class="comment">//</span>
02034 
02035 <span class="preprocessor">#define WX_PG_DECLARE_STRING_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02036 <span class="preprocessor">extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxString&amp; = wxEmptyString ); \</span>
02037 <span class="preprocessor">extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02038 <span class="preprocessor"></span>
02039 <span class="preprocessor">#define WX_PG_DECLARE_STRING_PROPERTY(NAME) \</span>
02040 <span class="preprocessor">extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxString&amp; = wxEmptyString ); \</span>
02041 <span class="preprocessor">wxPG_DECLARE_PROPERTY_CLASSINFO(NAME)</span>
02042 <span class="preprocessor"></span>
02043 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02044 <span class="preprocessor">WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,long,-1,DECL)</span>
02045 <span class="preprocessor"></span>
02046 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_FLAGS_PROPERTY(NAME) \</span>
02047 <span class="preprocessor">WX_PG_DECLARE_PROPERTY(NAME,long,-1)</span>
02048 <span class="preprocessor"></span>
02049 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_ENUM_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02050 <span class="preprocessor">WX_PG_DECLARE_PROPERTY_WITH_DECL(NAME,int,-1,DECL)</span>
02051 <span class="preprocessor"></span>
02052 <span class="preprocessor">#define WX_PG_DECLARE_CUSTOM_ENUM_PROPERTY(NAME) \</span>
02053 <span class="preprocessor">WX_PG_DECLARE_PROPERTY(NAME,int,-1)</span>
02054 <span class="preprocessor"></span>
02055 <span class="preprocessor">#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY_WITH_DECL(NAME,DECL) \</span>
02056 <span class="preprocessor">extern DECL wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxArrayString&amp; = wxArrayString() ); \</span>
02057 <span class="preprocessor">extern DECL wxPGPropertyClassInfo NAME##ClassInfo;</span>
02058 <span class="preprocessor"></span>
02059 <span class="preprocessor">#define WX_PG_DECLARE_ARRAYSTRING_PROPERTY(NAME) \</span>
02060 <span class="preprocessor">extern wxPGProperty* wxPG_CONSTFUNC(NAME)( const wxString&amp;, const wxString&amp; = wxPG_LABEL, const wxArrayString&amp; = wxArrayString() ); \</span>
02061 <span class="preprocessor">wxPG_DECLARE_PROPERTY_CLASSINFO(NAME)</span>
02062 <span class="preprocessor"></span>
02063 <span class="comment">// Declare basic property classes.</span>
02064 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxStringProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
02065 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxIntProperty,<span class="keywordtype">long</span>,0,WXDLLIMPEXP_PG)
02066 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxUIntProperty,<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>,0,WXDLLIMPEXP_PG)
02067 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxFloatProperty,<span class="keywordtype">double</span>,0.0,WXDLLIMPEXP_PG)
02068 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxBoolProperty,<span class="keywordtype">bool</span>,FALSE,WXDLLIMPEXP_PG)
02069 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxLongStringProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
02070 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxFileProperty,<span class="keyword">const</span> wxString&amp;,wxEmptyString,WXDLLIMPEXP_PG)
02071 WX_PG_DECLARE_PROPERTY_WITH_DECL(wxArrayStringProperty,<span class="keyword">const</span> wxArrayString&amp;,wxArrayString(),WXDLLIMPEXP_PG)
02072 
02073 WX_PG_DECLARE_STRING_PROPERTY_WITH_DECL(wxDirProperty,WXDLLIMPEXP_PG)
02074 
02075 <span class="comment">// Enum and Flags Properties require special attention.</span>
02076 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxEnumProperty( <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxChar** labels = (<span class="keyword">const</span> wxChar**) NULL,
02077     <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">int</span> value = 0 );
02078 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxEnumProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
02079     wxPGConstants&amp; constants, <span class="keywordtype">int</span> value = 0 );
02080 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxEnumPropertyClassInfo;
02081 
02082 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxFlagsProperty( <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxString&amp;, <span class="keyword">const</span> wxChar** labels = (<span class="keyword">const</span> wxChar**) NULL,
02083     <span class="keyword">const</span> <span class="keywordtype">long</span>* values = NULL, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount = 0, <span class="keywordtype">int</span> value = 0 );
02084 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxFlagsProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, 
02085     wxPGConstants&amp; constants, <span class="keywordtype">int</span> value = 0 );
02086 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxFlagsPropertyClassInfo;
02087 
02088 <span class="comment">// wxCustomProperty doesn't have value argument.</span>
02089 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxCustomProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
02090 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxCustomPropertyClassInfo;
02091 
02092 <span class="comment">// wxParentProperty doesn't have value argument.</span>
02093 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxParentProperty( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name );
02094 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxParentPropertyClassInfo;
02095 
02096 <span class="comment">// wxPropertyCategory doesn't have value argument.</span>
02097 <span class="keyword">extern</span> WXDLLIMPEXP_PG wxPGProperty* wxPropertyCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL );
02098 <span class="keyword">extern</span> WXDLLIMPEXP_PG <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a> wxPropertyCategoryClassInfo;
02099 
02100 <span class="comment">// FIXME: Should this be out-of-inline?</span>
02101 <span class="keyword">inline</span> wxObject* wxPG_VariantToWxObject( wxVariant&amp; variant, wxClassInfo* classInfo )
02102 {
02103     <span class="keywordflow">if</span> ( !variant.IsValueKindOf(classInfo) )
02104         <span class="keywordflow">return</span> (wxObject*) NULL;
02105     wxVariantData* vdata = variant.GetData();
02106 
02107     <span class="keywordflow">if</span> ( vdata-&gt;IsKindOf( &amp;wxPGVariantDataWxObj::ms_classInfo ) )
02108          <span class="keywordflow">return</span> (wxObject*) ((wxPGVariantDataWxObj*)vdata)-&gt;GetValuePtr();
02109 
02110     <span class="keywordflow">return</span> variant.GetWxObjectPtr();
02111 }
02112 
02113 <span class="comment">//</span>
02114 <span class="comment">// Redefine wxGetVariantCast to also take propertygrid variantdata</span>
02115 <span class="comment">// classes into account.</span>
02116 <span class="comment">// TODO: Remove after persistent wxObject classes added (i.e.</span>
02117 <span class="comment">//   GetWxObjectPtr works for all).</span>
02118 <span class="comment">//</span>
02119 <span class="preprocessor">#undef wxGetVariantCast</span>
02120 <span class="preprocessor"></span><span class="preprocessor">#define wxGetVariantCast(var,classname) (classname*)wxPG_VariantToWxObject(var,&amp;classname::ms_classInfo)</span>
02121 <span class="preprocessor"></span>
02122 <span class="comment">// TODO: After a while, remove this.</span>
02123 <span class="preprocessor">#define WX_PG_VARIANT_TO_WXOBJECT(VARIANT,CLASSNAME) (CLASSNAME*)wxPG_VariantToWxObject(VARIANT,&amp;CLASSNAME::ms_classInfo)</span>
02124 <span class="preprocessor"></span><span class="comment">//#define WX_PG_VARIANT_TO_WXOBJECT(VARIANT,CLASSNAME) wxGetVariantCast(VARIANT,CLASSNAME)</span>
02125 
02126 <span class="comment">// -----------------------------------------------------------------------</span>
02127 
02133 <span class="comment">// BM_STATE</span>
<a name="l02134"></a><a class="code" href="classwxPropertyGridState.htm">02134</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridState
02135 {
02136     <span class="keyword">friend</span> <span class="keyword">class </span>wxPGProperty;
02137     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGrid;
02138     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridManager;
02139 <span class="keyword">public</span>:
02140 
02142     wxPropertyGridState();
02143 
02145     ~wxPropertyGridState();
02146 
02148     wxPGId Append ( wxPGProperty* property );
02149 
02150     wxPGId AppendIn ( wxPGPropertyWithChildren* pwc, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value );
02151 
02153     wxPGId BaseGetPropertyByName ( wxPGNameStr name ) <span class="keyword">const</span>;
02154 
02156     <span class="keywordtype">void</span> Clear ();
02157 
02158     <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGProperty* p );
02159 
02160     <span class="keyword">static</span> <span class="keywordtype">void</span> ClearPropertyAndChildrenFlags ( wxPGProperty* p, <span class="keywordtype">long</span> flags );
02161     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAndChildrenFlags ( wxPGProperty* p, <span class="keywordtype">long</span> flags );
02162 
02163     <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGProperty* p );
02164 
02165     <span class="keywordtype">bool</span> Collapse ( wxPGProperty* p );
02166 
02167     <span class="keywordtype">void</span> Delete ( wxPGProperty* item );
02168 
02169     <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable );
02170 
02172     <span class="keywordtype">bool</span> EnableProperty ( wxPGProperty* p, <span class="keywordtype">bool</span> enable );
02173 
02174     <span class="keywordtype">bool</span> Expand ( wxPGProperty* p );
02175 
02176     <span class="keywordtype">void</span> ExpandAll ( <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> do_expand );
02177 
<a name="l02179"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea12">02179</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
02180 <span class="keyword">    </span>{
02181         wxPGProperty* p = (wxPGProperty*) NULL;
02182         <span class="keywordflow">if</span> ( m_properties-&gt;GetCount() )
02183             p = m_properties-&gt;Item(0);
02184         <span class="keywordflow">return</span> wxPGIdGen(p);
02185     }
02186 
02187     wxPGId GetFirstCategory () <span class="keyword">const</span>;
02188 
02189     wxPGId GetFirstProperty () <span class="keyword">const</span>;
02190 
02191     wxPropertyGrid* GetGrid ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pPropGrid; }
02192 
02193     wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02194 
02195     wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02196 
02197     <span class="keyword">static</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> );
02198 
02199     <span class="keyword">static</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> );
02200 
02201     wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
02202 
02203     wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name, wxPGPropertyWithChildren* parent  = (wxPGPropertyWithChildren*) NULL ) <span class="keyword">const</span>;
02204 
02205     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname, wxPGId baseparent, <span class="keywordtype">long</span> flags ) <span class="keyword">const</span>;
02206 
02208     wxPGId Insert ( wxPGPropertyWithChildren* parent, <span class="keywordtype">int</span> index, wxPGProperty* property );
02209 
02210     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsDisplayed() <span class="keyword">const</span>;
02211 
02212     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsInNonCatMode()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">bool</span>)(m_properties == m_abcArray); }
02213 
02215     <span class="keywordtype">void</span> InitNonCatMode ();
02216 
02217     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGProperty* p, <span class="keywordtype">bool</span> limit = TRUE );
02218 
02219     wxPGId ReplaceProperty( wxPGProperty* replaced, wxPGProperty* property );
02220 
02221     <span class="keywordtype">void</span> SetPropertyLabel( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newlabel );
02222 
02223     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGProperty* p, <span class="keywordtype">int</span> priority );
02224 
02225     <span class="keywordtype">void</span> SetPropVal( wxPGProperty* p, wxPGVariant value );
02226 
02227     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxPGValueType* typeclass, wxPGVariant value );
02228 
02229     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxChar* typestring, wxPGVariant value );
02230 
02231     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; value );
02232 
02233     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, wxVariant&amp; value );
02234 
02235     <span class="keywordtype">bool</span> SetPropertyValue ( wxPGProperty* p, wxObject* value );
02236 
<a name="l02238"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea37">02238</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">long</span> value )
02239     {
02240         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
02241     }
<a name="l02243"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea36">02243</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">int</span> value )
02244     {
02245         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong((<span class="keywordtype">long</span>)value) );
02246     }
<a name="l02248"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea35">02248</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">double</span> value )
02249     {
02250         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
02251     }
<a name="l02253"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea34">02253</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">bool</span> value )
02254     {
02255         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
02256     }
<a name="l02258"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea33">02258</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxArrayString&amp; value )
02259     {
02260         SetPropertyValue ( p, wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
02261     }
<a name="l02263"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea32">02263</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keywordtype">void</span>* value )
02264     {
02265         SetPropertyValue ( p, wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
02266     }
<a name="l02268"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea31">02268</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxPoint&amp; value )
02269     {
02270         wxASSERT ( p );
02271         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),) == 0 );</span>
02272         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
02273         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxPoint"</span>), (<span class="keywordtype">void</span>*)&amp;value );
02274     }
<a name="l02276"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea30">02276</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxSize&amp; value )
02277     {
02278         wxASSERT ( p );
02279         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxSize")) == 0 );</span>
02280         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
02281         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxSize"</span>), (<span class="keywordtype">void</span>*)&amp;value );
02282     }
<a name="l02284"></a><a class="code" href="classwxPropertyGridState.htm#wxPropertyGridStatea29">02284</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGProperty* p, <span class="keyword">const</span> wxArrayInt&amp; value )
02285     {
02286         wxASSERT ( p );
02287         <span class="comment">//wxASSERT ( wxStrcmp(p-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxArrayInt")) == 0 );</span>
02288         <span class="comment">//SetPropertyValue ( p, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
02289         SetPropertyValue ( p, wxT(<span class="stringliteral">"wxArrayInt"</span>), (<span class="keywordtype">void</span>*)&amp;value );
02290     }
02291     
02292     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category );
02293 
02294     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGProperty* p );
02295 
02296     <span class="keywordtype">void</span> Sort ( wxPGProperty* p );
02297     <span class="keywordtype">void</span> Sort ();
02298 
02299 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
02300 <span class="preprocessor"></span><span class="keyword">protected</span>:
02301 
02302     <span class="keywordtype">int</span> PrepareToAddItem ( wxPGProperty* property, wxPGPropertyWithChildren* scheduled_parent );
02303 
02305     wxPropertyGrid*             m_pPropGrid;
02306 
02308     wxPGPropertyWithChildren*   m_properties;
02309 
02311     wxPGRootPropertyClass           m_regularArray;
02312 
02314     wxPGRootPropertyClass*          m_abcArray;
02315 
02317     wxPGHashMapS2P                  m_dictName;
02318 
02320     wxPropertyCategoryClass*         m_currentCategory;
02321 
02323     wxPGProperty*               m_selected;
02324 
02326     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_lastCaptionBottomnest;
02331     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_itemsAdded;
02332 
02334     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_anyModified;
02335 
02336 <span class="preprocessor">#endif</span>
02337 <span class="preprocessor"></span>};
02338 
02339 <span class="comment">// -----------------------------------------------------------------------</span>
02340 
<a name="l02346"></a><a class="code" href="classwxPropertyContainerMethods.htm">02346</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyContainerMethods
02347 <span class="comment">// BM_METHODS</span>
02348 {
02349 <span class="keyword">public</span>:
02350 
02360     <span class="keywordtype">void</span> AddPropertyChoice( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; label, <span class="keywordtype">int</span> value = wxPG_INVALID_VALUE );
02361     <span class="keyword">inline</span> <span class="keywordtype">void</span> AddPropertyChoice( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; label, <span class="keywordtype">int</span> value = wxPG_INVALID_VALUE )
02362     {
02363         AddPropertyChoice(GetPropertyByName(name),label,value);
02364     }
02365 
02371     <span class="keyword">static</span> wxPGProperty* CreatePropertyByClass(<span class="keyword">const</span> wxString &amp;classname,
02372                                                <span class="keyword">const</span> wxString &amp;label,
02373                                                <span class="keyword">const</span> wxString &amp;name);
02374 
02383     <span class="keyword">static</span> wxPGProperty* CreatePropertyByType(<span class="keyword">const</span> wxString &amp;valuetype,
02384                                               <span class="keyword">const</span> wxString &amp;label,
02385                                               <span class="keyword">const</span> wxString &amp;name);
02386 
<a name="l02388"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera47">02388</a>     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGId <span class="keywordtype">id</span> )
02389     {
02390         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(<span class="keywordtype">id</span>);
02391     }
02392     <span class="keyword">inline</span> wxPGId GetNextSibling ( wxPGNameStr name )
02393     {
02394         <span class="keywordflow">return</span> wxPropertyGridState::GetNextSibling(GetPropertyByName(name));
02395     }
02396 
02409     <span class="keyword">static</span> wxString GetPropertyAttributes( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> flagmask = 0xFFFF );
02410 
02415     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAttributes( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; attributes );
02416 
02421     wxPGId GetPropertyByName( wxPGNameStr name ) <span class="keyword">const</span>;
02422 
02427     wxPGConstants&amp; GetPropertyChoices( wxPGId <span class="keywordtype">id</span> );
02428     <span class="keyword">inline</span> wxPGConstants&amp; GetPropertyChoices( wxPGNameStr name )
02429     {
02430         <span class="keywordflow">return</span> GetPropertyChoices(GetPropertyByName(name));
02431     }
02432 
<a name="l02434"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera62">02434</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02435 <span class="keyword">    </span>{
02436         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetClassName();
02437     }
02438 
<a name="l02440"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera61">02440</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxChar* GetPropertyClassName ( wxPGNameStr name )<span class="keyword"> const</span>
02441 <span class="keyword">    </span>{
02442         <span class="keywordflow">return</span> wxPGIdToPtr(GetPropertyByNameWithAssert(name))-&gt;GetClassName();
02443     }
02444 
02445 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
02446 <span class="preprocessor"></span>
<a name="l02447"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera64">02447</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPropertyClientData ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02448 <span class="keyword">    </span>{
02449         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02450         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetClientData();
02451     }
<a name="l02453"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera63">02453</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPropertyClientData ( wxPGNameStr name )<span class="keyword"> const</span>
02454 <span class="keyword">    </span>{
02455         <span class="keywordflow">return</span> GetPropertyClientData(GetPropertyByName(name));
02456     }
02457 <span class="preprocessor">#endif</span>
02458 <span class="preprocessor"></span>
<a name="l02460"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera70">02460</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGId <span class="keywordtype">id</span> )
02461     {
02462         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02463         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetIndexInParent();
02464     }
02465 
<a name="l02467"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera69">02467</a>     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetPropertyIndex ( wxPGNameStr name )
02468     {
02469         <span class="keywordflow">return</span> GetPropertyIndex ( GetPropertyByName(name) );
02470     }
02471 
<a name="l02473"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera72">02473</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGId <span class="keywordtype">id</span> )
02474     {
02475         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02476         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetLabel();
02477     }
02478     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyLabel ( wxPGNameStr name )
02479     {
02480         <span class="keywordflow">return</span> GetPropertyLabel ( GetPropertyByName(name) );
02481     }
02482 
<a name="l02484"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera73">02484</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyName ( wxPGId <span class="keywordtype">id</span> )
02485     {
02486         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02487         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetName();
02488     }
02489 
<a name="l02491"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera75">02491</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGId <span class="keywordtype">id</span> )
02492     {
02493         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02494         <span class="keywordflow">return</span> wxPGIdGen(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParent());
02495     }
02496 
<a name="l02498"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera74">02498</a>     <span class="keyword">inline</span> wxPGId GetPropertyParent ( wxPGNameStr name )
02499     {
02500         <span class="keywordflow">return</span> GetPropertyParent ( GetPropertyByName(name) );
02501     }
02502 
<a name="l02504"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera77">02504</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyPriority ( wxPGId <span class="keywordtype">id</span> )
02505     {
02506         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02507         <span class="keywordflow">if</span> ( p &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa38">IsFlagSet</a>(<a class="code" href="group__propflags.htm#ga2">wxPG_PROP_HIDEABLE</a>) )
02508             <span class="keywordflow">return</span> wxPG_LOW;
02509         <span class="keywordflow">return</span> wxPG_HIGH;
02510     }
02511 
<a name="l02513"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera76">02513</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyPriority( wxPGNameStr name )
02514     {
02515         <span class="keywordflow">return</span> GetPropertyPriority(GetPropertyByNameWithAssert(name));
02516     }
02517 
<a name="l02519"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida87">02519</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02520 <span class="keyword">    </span>{
02521         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02522         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetHelpString();
02523     }
02524 
<a name="l02526"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida86">02526</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; GetPropertyHelpString ( wxPGNameStr name )<span class="keyword"> const</span>
02527 <span class="keyword">    </span>{
02528         <span class="keywordflow">return</span> GetPropertyHelpString(GetPropertyByNameWithAssert(name));
02529     }
02530 
02535     <span class="keyword">static</span> wxString GetPropertyShortClassName( wxPGId <span class="keywordtype">id</span> );
02536 
02537 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
02538 <span class="preprocessor"></span>
02541     <span class="keyword">inline</span> wxPropertyValidator&amp; GetPropertyValidator ( wxPGId <span class="keywordtype">id</span> )
02542     {
02543         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02544         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValidator();
02545     }
02546     <span class="keyword">inline</span> wxPropertyValidator&amp; GetPropertyValidator ( wxPGNameStr name )
02547     {
02548         <span class="keywordflow">return</span> GetPropertyValidator(GetPropertyByName(name));
02549     }
02550 <span class="preprocessor">#endif</span>
02551 <span class="preprocessor"></span>
02555 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
02556 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
02557 #<span class="keywordflow">else</span>    
<a name="l02558"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera79">02558</a>     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGId <span class="keywordtype">id</span> )
02559 #endif
02560     {
02561         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02562         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
02563     }
02564 
02568 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
02569 <span class="preprocessor"></span>    <span class="keyword">inline</span> <span class="keyword">const</span> wxVariant&amp; GetPropertyValue ( wxPGNameStr name )
02570 #<span class="keywordflow">else</span>    
<a name="l02571"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera78">02571</a>     <span class="keyword">inline</span> wxVariant GetPropertyValue ( wxPGNameStr name )
02572 #endif
02573     {
02574         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02575         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02576         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueAsVariant();
02577     }
02578 
02579     <span class="keyword">static</span> wxString GetPropertyValueAsString ( wxPGId <span class="keywordtype">id</span> );
02580     <span class="keyword">static</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGId <span class="keywordtype">id</span> );
02581     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)GetPropertyValueAsLong(<span class="keywordtype">id</span>); }
02582     <span class="keyword">static</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGId <span class="keywordtype">id</span> );
02583     <span class="keyword">static</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGId <span class="keywordtype">id</span> );
02584     <span class="keyword">static</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGId <span class="keywordtype">id</span> );
02585     <span class="keyword">static</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGId <span class="keywordtype">id</span> );
02586     <span class="keyword">static</span> <span class="keywordtype">void</span>* GetPropertyValueAsVoidPtr ( wxPGId <span class="keywordtype">id</span> );
02587     
02588     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGId <span class="keywordtype">id</span> )
02589     {
02590         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02591         wxASSERT ( p );
02592     
02593         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa34">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxPoint"</span>)) != 0 )
02594         {
02595             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxPoint"</span>));
02596             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxPoint*)NULL);
02597         }
02598         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxPoint*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa5">DoGetValue</a>()));
02599     }
02600 
02601     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGId <span class="keywordtype">id</span> )
02602     {
02603         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02604         wxASSERT ( p );
02605 
02606         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa34">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxSize"</span>)) != 0 )
02607         {
02608             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxSize"</span>));
02609             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxSize*)NULL);
02610         }
02611         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxSize*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa5">DoGetValue</a>()));
02612     }
02613 
02614     <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGId <span class="keywordtype">id</span> )
02615     {
02616         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02617         wxASSERT ( p );
02618 
02619         <span class="keywordflow">if</span> ( wxStrcmp(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa34">GetValueType</a>()-&gt;<a class="code" href="classwxPGValueType.htm#wxPGValueTypea2">GetCustomTypeName</a>(),wxT(<span class="stringliteral">"wxArrayInt"</span>)) != 0 )
02620         {
02621             wxPGGetFailed(p,wxT(<span class="stringliteral">"wxArrayInt"</span>));
02622             <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxArrayInt*)NULL);
02623         }
02624         <span class="keywordflow">return</span> *((<span class="keyword">const</span> wxArrayInt*)wxPGVariantToVoidPtr(p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa5">DoGetValue</a>()));
02625     }
02626 
02627     <span class="keyword">inline</span> wxString GetPropertyValueAsString ( wxPGNameStr name )<span class="keyword"> const</span>
02628 <span class="keyword">    </span>{
02629         <span class="keywordflow">return</span> GetPropertyValueAsString ( GetPropertyByName(name) );
02630     }
02631     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ( wxPGNameStr name )<span class="keyword"> const</span>
02632 <span class="keyword">    </span>{
02633         <span class="keywordflow">return</span> GetPropertyValueAsLong ( GetPropertyByName(name) );
02634     }
02635     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt ( wxPGNameStr name )<span class="keyword"> const</span>
02636 <span class="keyword">    </span>{
02637         <span class="keywordflow">return</span> GetPropertyValueAsInt ( GetPropertyByName(name) );
02638     }
02639     <span class="keyword">inline</span> <span class="keywordtype">bool</span> GetPropertyValueAsBool ( wxPGNameStr name )<span class="keyword"> const</span>
02640 <span class="keyword">    </span>{
02641         <span class="keywordflow">return</span> GetPropertyValueAsBool ( GetPropertyByName(name) );
02642     }
02643     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ( wxPGNameStr name )<span class="keyword"> const</span>
02644 <span class="keyword">    </span>{
02645         <span class="keywordflow">return</span> GetPropertyValueAsDouble ( GetPropertyByName(name) );
02646     }
02647     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ( wxPGNameStr name )<span class="keyword"> const</span>
02648 <span class="keyword">    </span>{
02649         <span class="keywordflow">return</span> GetPropertyValueAsArrayString ( GetPropertyByName(name) );
02650     }
02651     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ( wxPGNameStr name )<span class="keyword"> const</span>
02652 <span class="keyword">    </span>{
02653         <span class="keywordflow">return</span> GetPropertyValueAsWxObjectPtr ( GetPropertyByName(name) );
02654     }
02655     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ( wxPGNameStr name )<span class="keyword"> const</span>
02656 <span class="keyword">    </span>{
02657         <span class="keywordflow">return</span> GetPropertyValueAsPoint ( GetPropertyByName(name) );
02658     }
02659     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ( wxPGNameStr name )<span class="keyword"> const</span>
02660 <span class="keyword">    </span>{
02661         <span class="keywordflow">return</span> GetPropertyValueAsSize ( GetPropertyByName(name) );
02662     }
02663     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ( wxPGNameStr name )<span class="keyword"> const</span>
02664 <span class="keyword">    </span>{
02665         <span class="keywordflow">return</span> GetPropertyValueAsArrayInt ( GetPropertyByName(name) );
02666     }
02667 
<a name="l02671"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera92">02671</a>     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGId <span class="keywordtype">id</span> )
02672     {
02673         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02674         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType();
02675     }
02676     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType ( wxPGNameStr name )
02677     {
02678         <span class="keywordflow">return</span> wxPGIdToPtr( GetPropertyByNameWithAssert(name) )-&gt;GetValueType();
02679     }
02680 
02681     <span class="keyword">inline</span> wxPropertyGridState* GetState()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pState; }
02682 
02685     <span class="keyword">static</span> wxPGValueType* GetValueType( <span class="keyword">const</span> wxString &amp;type );
02686 
02687 <span class="preprocessor">#if wxPG_INCLUDE_ADVPROPS</span>
02688 <span class="preprocessor"></span>
02692     <span class="keyword">static</span> <span class="keywordtype">void</span> InitAllTypeHandlers ();
02693 <span class="preprocessor">#else</span>
02694 <span class="preprocessor"></span>    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keywordtype">void</span> InitAllTypeHandlers () { }
02695 <span class="preprocessor">#endif</span>
02696 <span class="preprocessor"></span>
<a name="l02698"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera111">02698</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02699 <span class="keyword">    </span>{
02700         <span class="keywordflow">return</span> (!(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetFlags() &amp; <a class="code" href="group__propflags.htm#ga1">wxPG_PROP_DISABLED</a>))?TRUE:FALSE;
02701     }
02702 
<a name="l02704"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera110">02704</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyEnabled(GetPropertyByName(name)); }
02705 
<a name="l02707"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera120">02707</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestr )
02708     {
02709         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02710         <span class="keywordflow">return</span> (wxStrcmp(wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType()-&gt;GetTypeName(),typestr) == 0);
02711     }
02712 
<a name="l02714"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera119">02714</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGValueType* valuetype )
02715     {
02716         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02717         <span class="keywordflow">return</span> ( wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValueType() == valuetype );
02718     }
02719 
<a name="l02721"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera118">02721</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxClassInfo* classinfo )
02722     {
02723         <span class="keywordflow">return</span> IsPropertyValueType(<span class="keywordtype">id</span>,classinfo-&gt;GetClassName());
02724     }
02725 
<a name="l02727"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera117">02727</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxChar* typestr )
02728     {
02729         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),typestr);
02730     }
02731 
<a name="l02733"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera116">02733</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxPGValueType* valuetype )
02734     {
02735         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),valuetype);
02736     }
02737 
<a name="l02739"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera115">02739</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueType ( wxPGNameStr name, <span class="keyword">const</span> wxClassInfo* classinfo )
02740     {
02741         <span class="keywordflow">return</span> IsPropertyValueType(GetPropertyByName(name),classinfo);
02742     }
02743 
02747     <span class="keyword">static</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGId <span class="keywordtype">id</span> );
02748     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyExpanded ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyExpanded(GetPropertyByName(name)); }
02749 
<a name="l02753"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera106">02753</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsModified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02754 <span class="keyword">    </span>{
02755         wxPGProperty* p = wxPGIdToPtr ( <span class="keywordtype">id</span> );
02756         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02757         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa19">GetFlags</a>() &amp; <a class="code" href="group__propflags.htm#ga0">wxPG_PROP_MODIFIED</a>) ? TRUE : FALSE );
02758     }
02759 
02760     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsModified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsModified(GetPropertyByName(name)); }
02761 
<a name="l02763"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida137">02763</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02764 <span class="keyword">    </span>{
02765         <span class="keywordflow">return</span> (wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentingType()&gt;0)?TRUE:FALSE;
02766     }
02767     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyCategory ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyCategory(GetPropertyByName(name)); }
02768 
<a name="l02772"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera114">02772</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyModified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02773 <span class="keyword">    </span>{
02774         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02775         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02776         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa19">GetFlags</a>() &amp; <a class="code" href="group__propflags.htm#ga0">wxPG_PROP_MODIFIED</a>) ? TRUE : FALSE );
02777     }
02778     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyModified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyModified(GetPropertyByName(name)); }
02779 
<a name="l02782"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera122">02782</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
02783 <span class="keyword">    </span>{
02784         wxPGProperty* p = wxPGIdToPtr(<span class="keywordtype">id</span>);
02785         <span class="keywordflow">if</span> ( !p ) <span class="keywordflow">return</span> FALSE;
02786         <span class="keywordflow">return</span> ( (p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa19">GetFlags</a>() &amp; <a class="code" href="group__propflags.htm#ga5">wxPG_PROP_UNSPECIFIED</a>) ? TRUE : FALSE );
02787     }
02788     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyValueUnspecified ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertyValueUnspecified(GetPropertyByName(name)); }
02789 
02793     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterAdvancedPropertyClasses();
02794 
02798     <span class="keyword">static</span> <span class="keywordtype">bool</span> RegisterPropertyClass ( <span class="keyword">const</span> wxChar* name, <a class="code" href="structwxPGPropertyClassInfo.htm">wxPGPropertyClassInfo</a>* classinfo );
02799 
<a name="l02809"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera127">02809</a>     wxPGId ReplaceProperty( wxPGId <span class="keywordtype">id</span>, wxPGProperty* property )
02810     {
02811         <span class="keywordflow">return</span> m_pState-&gt;ReplaceProperty(<span class="keywordtype">id</span>,property);
02812     }
02813     wxPGId ReplaceProperty( wxPGNameStr name, wxPGProperty* property )
02814     {
02815         <span class="keywordflow">return</span> m_pState-&gt;ReplaceProperty(GetPropertyByName(name),property);
02816     }
02817 
02822     <span class="keyword">static</span> <span class="keywordtype">void</span> SetBoolChoices ( <span class="keyword">const</span> wxChar* true_choice, <span class="keyword">const</span> wxChar* false_choice );
02823 
02826     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyChoices(wxPGId <span class="keywordtype">id</span>, wxPGConstants&amp; choices);
02827 
<a name="l02830"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera139">02830</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyChoices(wxPGNameStr name, wxPGConstants&amp; choices)
02831     {
02832         SetPropertyChoices(GetPropertyByName(name),choices);
02833     }
02834 
<a name="l02838"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera141">02838</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyChoicesPrivate( wxPGId <span class="keywordtype">id</span> )
02839     {
02840         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02841         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetChoicesPrivate();
02842     }
02843     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyChoicesPrivate( wxPGNameStr name )
02844     {
02845         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02846         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02847         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetChoicesPrivate();
02848     }
02849 
02861     <span class="keyword">static</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> attrid, wxVariant value, <span class="keywordtype">long</span> arg_flags = 0 );
02862     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyAttribute ( wxPGNameStr name, <span class="keywordtype">int</span> attrid, wxVariant value, <span class="keywordtype">long</span> arg_flags = 0  )
02863     {
02864         SetPropertyAttribute(GetPropertyByName(name),attrid,value,arg_flags);
02865     }
02866 
02867 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
02868 <span class="preprocessor"></span>
<a name="l02869"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera143">02869</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyClientData ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* clientData )
02870     {
02871         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02872         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetClientData(clientData);
02873     }
<a name="l02875"></a><a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera142">02875</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyClientData ( wxPGNameStr name, <span class="keywordtype">void</span>* clientData )
02876     {
02877         SetPropertyClientData(GetPropertyByName(name),clientData);
02878     }
02879 <span class="preprocessor">#endif</span>
02880 <span class="preprocessor"></span>
02881     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; help_string )
02882     {
02883         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02884         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetHelpString(help_string);
02885     }
02886 
02887     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyHelpString ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; help_string )
02888     {
02889         SetPropertyHelpString(GetPropertyByName(name),help_string);
02890     }
02891 
02892 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
02893 <span class="preprocessor"></span>
02901     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValidator ( wxPGId <span class="keywordtype">id</span>, wxPropertyValidator&amp; validator )
02902     {
02903         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02904         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;SetValidator(validator);
02905     }
02906     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValidator ( wxPGNameStr name, wxPropertyValidator&amp; validator )
02907     {
02908         SetPropertyValidator(GetPropertyByName(name),validator);
02909     }
02910 <span class="preprocessor">#endif</span>
02911 <span class="preprocessor"></span>
02912 <span class="keyword">protected</span>:
02913 
02914     <span class="comment">//virtual void DrawItemAndChildren( wxPGProperty* p ) = 0;</span>
02915 
02916     <span class="keyword">virtual</span> wxPGId DoGetPropertyByName( wxPGNameStr name ) <span class="keyword">const</span> = 0;
02917 
02918     <span class="keyword">inline</span> wxPGId GetPropertyByNameWithAssert ( wxPGNameStr name )<span class="keyword"> const</span>
02919 <span class="keyword">    </span>{
02920         wxPGId <span class="keywordtype">id</span> = GetPropertyByName(name);
02921         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
02922         <span class="keywordflow">return</span> <span class="keywordtype">id</span>;
02923     }
02924 
02925     <span class="comment">// Deriving classes must set this (it must be only or current page).</span>
02926     wxPropertyGridState*         m_pState;
02927 
02928 };
02929 
02930 <span class="comment">// -----------------------------------------------------------------------</span>
02931 
02932 <span class="comment">// Internal flags</span>
02933 <span class="preprocessor">#define wxPG_FL_INITIALIZED                 0x0001</span>
02934 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_ACTIVATION_BY_CLICK         0x0002 // Set when creating editor controls if it was clicked on.</span>
02935 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_DONT_CENTER_SPLITTER        0x0004</span>
02936 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_FOCUSED                     0x0008</span>
02937 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_MOUSE_CAPTURED              0x0010</span>
02938 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_MOUSE_INSIDE                0x0020</span>
02939 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_VALUE_MODIFIED              0x0040</span>
02940 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_PRIMARY_FILLS_ENTIRE        0x0080 // don't clear background of m_wndPrimary</span>
02941 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_CUR_USES_CUSTOM_IMAGE       0x0100 // currently active editor uses custom image</span>
02942 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_HIDE_STATE                  0x0200 // set when hideable properties should be hidden</span>
02943 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SCROLLED                    0x0400</span>
02944 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_ADDING_HIDEABLES            0x0800 // set when all added/inserted properties get hideable flag</span>
02945 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_NOSTATUSBARHELP             0x1000 // Disables showing help strings on statusbar.</span>
02946 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_CREATEDSTATE                0x2000 // Marks that we created the state, so we have to destroy it too.</span>
02947 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SCROLLBAR_DETECTED          0x4000 // Set if scrollbar's existence was detected in last onresize.</span>
02948 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_DESC_REFRESH_REQUIRED       0x8000 // Set if wxPGMan requires redrawing of description text box.</span>
02949 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_SELECTED_IS_PAINT_FLEXIBLE  0x00010000 // Set if selected has flexible imagesize</span>
02950 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_IN_MANAGER                  0x00020000 // Set if contained in wxPropertyGridManager</span>
02951 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_GOOD_SIZE_SET               0x00040000 // Set after wxPropertyGrid is shown in its initial good size</span>
02952 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_IGNORE_NEXT_NAVKEY          0x00080000</span>
02953 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_NAVIGATING_OUT              0x00100000 // For nav key event to know whether to skip event or not</span>
02954 <span class="preprocessor"></span><span class="preprocessor">#define wxPG_FL_STRING_IN_STATUSBAR         0x00200000 // Set when help string is shown in status bar</span>
02955 <span class="preprocessor"></span>
02956 <span class="comment">// -----------------------------------------------------------------------</span>
02957 
02958 <span class="preprocessor">#define wxPG_USE_STATE  m_pState</span>
02959 <span class="preprocessor"></span>
<a name="l03019"></a><a class="code" href="classwxPropertyGrid.htm">03019</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGrid : <span class="keyword">public</span> wxScrolledWindow, <span class="keyword">public</span> wxPropertyContainerMethods
03020 {
03021     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridState;
03022     <span class="keyword">friend</span> <span class="keyword">class </span>wxPropertyGridManager;
03023 
03024         DECLARE_CLASS(wxPropertyGrid)
03025 
03026 <span class="keyword">public</span>:
03030     wxPropertyGrid();
03031 
03032 <span class="preprocessor">#ifdef SWIG</span>
03033 <span class="preprocessor"></span>    %pythonAppend wxPropertyGrid   <span class="stringliteral">"self._setOORInfo(self)"</span>
03034     %pythonAppend wxPropertyGrid() <span class="stringliteral">""</span>
03035 
03036     wxPropertyGrid(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
03037                                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
03038                                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
03039                                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPG_DEFAULT_STYLE</a>,
03040                                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
03041     %name(PrePropertyGrid) wxPropertyGrid();
03042 
03043 <span class="preprocessor">#else</span>
03044 <span class="preprocessor"></span>
03048     wxPropertyGrid(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
03049                                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
03050                                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
03051                                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPG_DEFAULT_STYLE</a>,
03052                                 <span class="comment">//const wxValidator &amp;validator = wxDefaultValidator,</span>
03053                                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
03054 
03056     <span class="keyword">virtual</span> ~wxPropertyGrid();
03057 <span class="preprocessor">#endif</span>
03058 <span class="preprocessor"></span>
03071     wxPGId Append ( wxPGProperty* property );
03072 
03073     <span class="keyword">inline</span> wxPGId AppendCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a> )
03074     {
03075         <span class="keywordflow">return</span> Append ( <span class="keyword">new</span> wxPropertyCategoryClass(label,name) );
03076     }
03077 
03078 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
03079 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
03080     {
03081         <span class="keywordflow">return</span> Append ( wxStringProperty(label,name,value) );
03082     }
03083 
03084     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keywordtype">int</span> value = 0 )
03085     {
03086         <span class="keywordflow">return</span> Append ( wxIntProperty(label,name,value) );
03087     }
03088 
03089     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keywordtype">double</span> value = 0.0 )
03090     {
03091         <span class="keywordflow">return</span> Append ( wxFloatProperty(label,name,value) );
03092     }
03093 
03094     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = <a class="code" href="group__miscellaneous.htm#ga2">wxPG_LABEL</a>, <span class="keywordtype">bool</span> value = FALSE )
03095     {
03096         <span class="keywordflow">return</span> Append ( wxBoolProperty(label,name,value) );
03097     }
03098 <span class="preprocessor">#endif</span>
03099 <span class="preprocessor"></span>
03100     <span class="keyword">inline</span> wxPGId AppendIn ( <span class="keyword">const</span> wxPGId <span class="keywordtype">id</span>, wxPGProperty* property )
03101     {
03102         <span class="keywordflow">return</span> Insert(<span class="keywordtype">id</span>,-1,property);
03103     }
03104 
03105     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, wxPGProperty* property )
03106     {
03107         <span class="keywordflow">return</span> Insert(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name),-1,property);
03108     }
03109 
03110     <span class="keyword">inline</span> wxPGId AppendIn ( <span class="keyword">const</span> wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
03111     {
03112         <span class="keywordflow">return</span> m_pState-&gt;AppendIn( (wxPGPropertyWithChildren*)wxPGIdToPtr(<span class="keywordtype">id</span>), label, propname, value );
03113     }
03114 
03115     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; propname, wxVariant&amp; value )
03116     {
03117         <span class="keywordflow">return</span> m_pState-&gt;AppendIn( (wxPGPropertyWithChildren*)wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name)),
03118             label, propname, value );
03119     }
03120 
03126     <span class="keyword">static</span> <span class="keywordtype">void</span> AutoGetTranslation ( <span class="keywordtype">bool</span> enable );
03127 
03131     <span class="keywordtype">void</span> CenterSplitter ( <span class="keywordtype">bool</span> enable_auto_centering );
03132 
03137     <span class="keywordtype">bool</span> Create(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
03138                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
03139                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
03140                 <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga17">wxPG_DEFAULT_STYLE</a>,
03141                 <span class="keyword">const</span> wxChar* name = wxPropertyGridNameStr);
03142 
03146     <span class="keywordtype">void</span> Clear ();
03147 
<a name="l03150"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida16">03150</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGId <span class="keywordtype">id</span> )
03151     {
03152         m_pState-&gt;ClearModifiedStatus(wxPGIdToPtr(<span class="keywordtype">id</span>));
03153     }
03154 
<a name="l03157"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida15">03157</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ()
03158     {
03159         m_pState-&gt;ClearModifiedStatus(m_pState-&gt;m_properties);
03160         m_pState-&gt;m_anyModified = FALSE;
03161     }
03162 
03164     <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGId <span class="keywordtype">id</span> );
03165 
<a name="l03167"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida17">03167</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> ClearPropertyValue ( wxPGNameStr name )
03168     {
03169         <span class="keywordflow">return</span> ClearPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) );
03170     }
03171 
03173     <span class="keywordtype">void</span> ClearSelection ();
03174 
<a name="l03178"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida21">03178</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Collapse ( wxPGId p ) { <span class="keywordflow">return</span> Collapse ( &amp;GetPropertyById(p)); }
03179 
<a name="l03183"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida20">03183</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Collapse ( wxPGNameStr name )
03184     {
03185         <span class="keywordflow">return</span> Collapse ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) ) );
03186     }
03187 
<a name="l03190"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida22">03190</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> CollapseAll () { m_pState-&gt;ExpandAll(0); }
03191 
03193     <span class="keywordtype">void</span> Compact( <span class="keywordtype">bool</span> compact );
03194 
<a name="l03196"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida26">03196</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Delete ( wxPGId <span class="keywordtype">id</span> )
03197     {
03198         Delete ( wxPGIdToPtr(<span class="keywordtype">id</span>) );
03199     }
03200 
<a name="l03202"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida25">03202</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Delete ( wxPGNameStr name )
03203     {
03204         Delete ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) ) );
03205     }
03206 
<a name="l03208"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida28">03208</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Disable ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
03209 
<a name="l03211"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida27">03211</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Disable ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
03212 
<a name="l03214"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida30">03214</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
03215 
<a name="l03217"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida29">03217</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
03218 
03220     <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable );
03221 
03223     <span class="comment">/*inline bool Enable ( wxPGId id, bool enable = TRUE )</span>
03224 <span class="comment">    {</span>
03225 <span class="comment">        return EnableProperty ( id, enable );</span>
03226 <span class="comment">    }*/</span>
03227 
03229     <span class="comment">/*inline bool Enable ( wxPGNameStr name, bool enable = TRUE )</span>
03230 <span class="comment">    {</span>
03231 <span class="comment">        return EnableProperty ( name, enable );</span>
03232 <span class="comment">    }*/</span>
03233 
03235     <span class="keywordtype">bool</span> EnableProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE );
03236 
<a name="l03238"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida32">03238</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnableProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE )
03239     {
03240         <span class="keywordflow">return</span> EnableProperty ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), enable );
03241     }
03242 
03246     <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span> );
03247 
<a name="l03251"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida34">03251</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGNameStr name ) 
03252     {
03253         <span class="keywordflow">return</span> EnsureVisible ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) );
03254     }
03255 
<a name="l03259"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida37">03259</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Expand ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> Expand ( &amp;GetPropertyById(<span class="keywordtype">id</span>) ); }
03260 
<a name="l03264"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida36">03264</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> Expand ( wxPGNameStr name )
03265     {
03266         <span class="keywordflow">return</span> Expand ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) ) );
03267     }
03268 
<a name="l03271"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida38">03271</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ExpandAll () { m_pState-&gt;ExpandAll(1); }
03272 
<a name="l03281"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida109">03281</a>     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname = wxEmptyString,
03282         wxPGId baseparent = wxPGIdGen((wxPGProperty*)NULL), <span class="keywordtype">long</span> flags = 0 )<span class="keyword"> const</span>
03283 <span class="keyword">    </span>{
03284         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyValues(listname,baseparent,flags);
03285     }
03286 
03287     <span class="keyword">inline</span> wxFont* GetCaptionFont() { <span class="keywordflow">return</span> &amp;m_captionFont; }
03288 
<a name="l03290"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida40">03290</a>     <span class="keyword">inline</span> wxColour GetCaptionBackroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colCapBack; }
03291 
<a name="l03293"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida42">03293</a>     <span class="keyword">inline</span> wxColour GetCaptionForegroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colCapFore; }
03294 
<a name="l03296"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida43">03296</a>     <span class="keyword">inline</span> wxColour GetCellBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colPropBack; }
03297 
<a name="l03299"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida44">03299</a>     <span class="keyword">inline</span> wxColour GetCellTextColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colPropFore; }
03300 
<a name="l03303"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida47">03303</a>     <span class="keyword">inline</span> size_t GetChildrenCount ()
03304     {
03305         <span class="keywordflow">return</span> GetChildrenCount( wxPGIdGen(m_pState-&gt;m_properties) );
03306     }
03307 
<a name="l03309"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida46">03309</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03310 <span class="keyword">    </span>{
03311         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
03312         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetChildCount();
03313     }
03314 
<a name="l03316"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida45">03316</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetChildrenCount( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) ); }
03317 
<a name="l03319"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida48">03319</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
03320 <span class="keyword">    </span>{
03321         <span class="keywordflow">return</span> m_pState-&gt;GetFirst();
03322     }
03323 
<a name="l03329"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida53">03329</a>     <span class="keyword">inline</span> wxPGId GetFirstVisible ()<span class="keyword"> const</span>
03330 <span class="keyword">    </span>{
03331         wxPGProperty* p = NULL;
03332         <span class="keywordflow">if</span> ( m_pState-&gt;m_properties-&gt;GetCount() )
03333         {
03334             p = m_pState-&gt;m_properties-&gt;Item(0);
03335             <span class="keywordflow">if</span> ( (m_iFlags &amp; wxPG_FL_HIDE_STATE) &amp;&amp; p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassp7">m_flags</a> &amp; <a class="code" href="group__propflags.htm#ga2">wxPG_PROP_HIDEABLE</a> )
03336                 p = GetNeighbourItem ( p, TRUE, 1 );
03337         }
03338         <span class="keywordflow">return</span> wxPGIdGen(p);
03339     }
03340 
<a name="l03342"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida54">03342</a>     <span class="keywordtype">int</span> GetFontHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_fontHeight; }
03343 
<a name="l03347"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida55">03347</a>     wxPropertyGrid* GetGrid() { <span class="keywordflow">return</span> <span class="keyword">this</span>; }
03348 
<a name="l03350"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida49">03350</a>     <span class="keyword">inline</span> wxPGId GetFirstCategory ()<span class="keyword"> const</span>
03351 <span class="keyword">    </span>{
03352         <span class="keywordflow">return</span> m_pState-&gt;<a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida49">GetFirstCategory</a> ();
03353     }
03354 
<a name="l03359"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida51">03359</a>     <span class="keyword">inline</span> wxPGId GetFirstChild ( wxPGId parent )
03360     {
03361         wxASSERT ( wxPGIdIsOk(parent) );
03362         wxPGPropertyWithChildren&amp; p = (wxPGPropertyWithChildren&amp;)parent.GetProperty();
03363         <span class="keywordflow">if</span> ( p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa28">GetParentingType</a>()==0 || p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa28">GetParentingType</a>()==-1 || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa15">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
03364         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa42">Item</a>(0));
03365     }
03366     <span class="keyword">inline</span> wxPGId GetFirstChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetFirstChild( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) ); }
03367 
<a name="l03369"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida52">03369</a>     <span class="keyword">inline</span> wxPGId GetFirstProperty()
03370     {
03371         <span class="keywordflow">return</span> m_pState-&gt;GetFirstProperty();
03372     }
03373 
03377     wxSize GetImageSize ( wxPGId <span class="keywordtype">id</span> = wxPGIdGen((wxPGProperty*)NULL) ) <span class="keyword">const</span>;
03378 
<a name="l03382"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida58">03382</a>     wxPGId GetItemAtY ( <span class="keywordtype">int</span> y ) { <span class="keywordflow">return</span> wxPGIdGen(DoGetItemAtY(y)); }
03383 
<a name="l03386"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida61">03386</a>     <span class="keyword">inline</span> wxPGId GetLastProperty ()
03387     {
03388         <span class="keywordflow">if</span> ( !m_pState-&gt;m_properties-&gt;GetCount() ) <span class="keywordflow">return</span> wxPGIdGen((wxPGProperty*)NULL);
03389         wxPGProperty* p = GetLastItem (FALSE, FALSE);
03390         <span class="keywordflow">if</span> ( p-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa28">GetParentingType</a>() &gt; 0 )
03391             <span class="keywordflow">return</span> GetPrevProperty ( wxPGIdGen(p) );
03392         <span class="keywordflow">return</span> wxPGIdGen(p);
03393     }
03394 
<a name="l03399"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida60">03399</a>     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGId parent )
03400     {
03401         wxASSERT ( wxPGIdIsOk(parent) );
03402         wxPGPropertyWithChildren&amp; p = (wxPGPropertyWithChildren&amp;)parent.GetProperty();
03403         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa28">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa15">GetCount</a>() ) <span class="keywordflow">return</span> wxPGIdGen(NULL);
03404         <span class="keywordflow">return</span> wxPGIdGen(p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa43">Last</a>());
03405     }
03406     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetLastChild ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) ); }
03407 
<a name="l03410"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida62">03410</a>     <span class="keyword">inline</span> wxPGId GetLastVisible ()
03411     {
03412         <span class="keywordflow">return</span> wxPGIdGen ( GetLastItem (TRUE, TRUE) );
03413     }
03414 
<a name="l03416"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida63">03416</a>     <span class="keyword">inline</span> wxColour GetLineColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colLine; }
03417 
<a name="l03419"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida64">03419</a>     <span class="keyword">inline</span> wxColour GetMarginColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colMargin; }
03420 
<a name="l03424"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida66">03424</a>     <span class="keyword">inline</span> wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> )
03425     {
03426         <span class="keywordflow">return</span> m_pState-&gt;GetNextProperty(<span class="keywordtype">id</span>);
03427     }
03428 
<a name="l03430"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida65">03430</a>     <span class="keyword">inline</span> wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03431 <span class="keyword">    </span>{
03432         <span class="keywordflow">return</span> m_pState-&gt;GetNextCategory(<span class="keywordtype">id</span>);
03433     }
03434 
<a name="l03440"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida69">03440</a>     <span class="keyword">inline</span> wxPGId GetNextVisible ( wxPGId property )<span class="keyword"> const</span>
03441 <span class="keyword">    </span>{
03442         <span class="keywordflow">return</span> wxPGIdGen ( GetNeighbourItem( property.GetPropertyPtr(),
03443             TRUE, 1 ) );
03444     }
03445 
<a name="l03449"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida70">03449</a>     <span class="keyword">inline</span> wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> )
03450     {
03451         <span class="keywordflow">return</span> m_pState-&gt;GetPrevProperty(<span class="keywordtype">id</span>);
03452     }
03453 
<a name="l03455"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida72">03455</a>     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> )
03456     {
03457         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<span class="keywordtype">id</span>);
03458     }
03459     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGNameStr name )
03460     {
03461         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name));
03462     }
03463 
<a name="l03466"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida73">03466</a>     <span class="keyword">inline</span> wxPGId GetPrevVisible ( wxPGId property )
03467     {
03468         wxASSERT ( wxPGIdIsOk(property) );
03469         <span class="keywordflow">return</span> wxPGIdGen ( GetNeighbourItem( property.GetPropertyPtr(),
03470             TRUE, -1 ) );
03471     }
03472 
<a name="l03476"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida77">03476</a>     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03477 <span class="keyword">    </span>{
03478         <span class="keywordflow">return</span> wxPGIdGen ( GetPropertyCategory ( wxPGIdToPtr(<span class="keywordtype">id</span>) ) );
03479     }
03480     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGNameStr name )<span class="keyword"> const</span>
03481 <span class="keyword">    </span>{
03482         <span class="keywordflow">return</span> GetPropertyCategory ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) );
03483     }
03484 
03486     wxColour GetPropertyColour ( wxPGId <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
03487     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGNameStr name )<span class="keyword"> const</span>
03488 <span class="keyword">    </span>{
03489         <span class="keywordflow">return</span> GetPropertyColour(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name));
03490     }
03491     
<a name="l03497"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida74">03497</a>     <span class="keyword">inline</span> wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name )<span class="keyword"> const</span>
03498 <span class="keyword">    </span>{
03499         <span class="keywordflow">return</span> m_pState-&gt;GetPropertyByLabel(name);
03500     }
03501 
<a name="l03505"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida112">03505</a>     wxPGId GetRoot ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPGIdGen(m_pState-&gt;m_properties); }
03506 
<a name="l03508"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida113">03508</a>     <span class="keywordtype">int</span> GetRowHeight ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_lineHeight; }
03509 
03510     <span class="keyword">inline</span> wxPGId GetSelectedProperty ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> GetSelection(); }
03511 
<a name="l03513"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida115">03513</a>     <span class="keyword">inline</span> wxPGId GetSelection ()<span class="keyword"> const</span>
03514 <span class="keyword">    </span>{
03515         <span class="keywordflow">return</span> wxPGIdGen(m_selected);
03516     }
03517 
<a name="l03519"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida116">03519</a>     <span class="keyword">inline</span> wxColour GetSelectionBackgroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colSelBack; }
03520 
<a name="l03522"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida117">03522</a>     <span class="keyword">inline</span> wxColour GetSelectionForegroundColour()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_colSelFore; }
03523 
<a name="l03525"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida118">03525</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSplitterPosition ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_splitterx; }
03526 
03530     <span class="comment">//wxPropertyGridState* GetCopyOfState() const;</span>
03531 
<a name="l03533"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida120">03533</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetVerticalSpacing ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)m_vspacing; }
03534 
<a name="l03536"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida121">03536</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasSelection()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ((m_selected!=(wxPGProperty*)NULL)?TRUE:FALSE); }
03537 
<a name="l03539"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida122">03539</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> HideLowPriority() { Compact ( TRUE ); }
03540 
<a name="l03593"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida130">03593</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId priorthis, wxPGProperty* newproperty )
03594     {
03595         wxPGId res = Insert ( wxPGIdToPtr( priorthis ), newproperty );
03596         DrawItems ( newproperty, (wxPGProperty*) NULL );
03597         <span class="keywordflow">return</span> res;
03598     }
<a name="l03600"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida129">03600</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, wxPGProperty* newproperty )
03601     {
03602         wxPGId res = Insert ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) ), newproperty );
03603         DrawItems ( newproperty, (wxPGProperty*) NULL );
03604         <span class="keywordflow">return</span> res;
03605     }
03606 
<a name="l03608"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida128">03608</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
03609     {
03610         wxPGId res = Insert ( (wxPGPropertyWithChildren*)wxPGIdToPtr (<span class="keywordtype">id</span>), index, newproperty );
03611         DrawItems ( newproperty, (wxPGProperty*) NULL );
03612         <span class="keywordflow">return</span> res;
03613     }
03614 
<a name="l03616"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida127">03616</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
03617     {
03618         wxPGId res = Insert ( (wxPGPropertyWithChildren*)wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) ), index, newproperty );
03619         DrawItems ( newproperty, (wxPGProperty*) NULL );
03620         <span class="keywordflow">return</span> res;
03621     }
03622 
03623     <span class="keyword">inline</span> wxPGId InsertCategory ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
03624     {
03625         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, <span class="keyword">new</span> wxPropertyCategoryClass(label,name) );
03626     }
03627 
03628 <span class="preprocessor">#if wxPG_INCLUDE_BASICPROPS</span>
03629 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
03630     {
03631         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxStringProperty(label,name,value) );
03632     }
03633 
03634     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
03635     {
03636         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxIntProperty(label,name,value) );
03637     }
03638 
03639     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
03640     {
03641         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxFloatProperty(label,name,value) );
03642     }
03643 
03644     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
03645     {
03646         <span class="keywordflow">return</span> Insert ( <span class="keywordtype">id</span>, index, wxBoolProperty(label,name,value) );
03647     }
03648 <span class="preprocessor">#endif</span>
03649 <span class="preprocessor"></span>
<a name="l03651"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida132">03651</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsAnyModified ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_pState-&gt;m_anyModified&gt;0); }
03652 
<a name="l03654"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida133">03654</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFrozen ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_frozen&gt;0)?TRUE:FALSE; }
03655 
<a name="l03657"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida144">03657</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertySelected ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
03658 <span class="keyword">    </span>{
03659         <span class="keywordflow">return</span> ( m_selected == wxPGIdToPtr( <span class="keywordtype">id</span> ) ) ? TRUE : FALSE;
03660     }
03661 
<a name="l03663"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida143">03663</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertySelected ( wxPGNameStr name ) { <span class="keywordflow">return</span> IsPropertySelected(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name)); }
03664 
03668     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> limit = TRUE );
03669 
<a name="l03673"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida153">03673</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGNameStr name, <span class="keywordtype">bool</span> limit = TRUE )
03674     {
03675         LimitPropertyEditing(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name),limit);
03676     }
03677 
03679     <span class="comment">//void RedrawAllVisible ();</span>
03680 
03687     <span class="keyword">static</span> wxPGValueType* RegisterValueType ( wxPGValueType* valueclass, <span class="keywordtype">bool</span> no_def_check = FALSE );
03688 
03693     <span class="keyword">static</span> wxPGEditor* RegisterEditorClass ( wxPGEditor* valueclass, <span class="keywordtype">bool</span> no_def_check = FALSE );
03694 
03697     <span class="keywordtype">void</span> ResetColours();
03698 
<a name="l03701"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida168">03701</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGId <span class="keywordtype">id</span> )
03702     {
03703         wxPropertyCategoryClass* pc = (wxPropertyCategoryClass*)wxPGIdToPtr(<span class="keywordtype">id</span>);
03704 <span class="preprocessor">#ifdef __WXDEBUG__</span>
03705 <span class="preprocessor"></span>        <span class="keywordflow">if</span> ( pc ) wxASSERT ( pc-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa28">GetParentingType</a>() &gt; 0 );
03706 <span class="preprocessor">#endif</span>
03707 <span class="preprocessor"></span>        m_pState-&gt;m_currentCategory = pc;
03708     }
03709 
<a name="l03712"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida167">03712</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGNameStr name = wxEmptyString )
03713     {
03714         SetCurrentCategory(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name));
03715     }
03716 
03718     <span class="comment">//virtual bool SetBackgroundColour(const wxColour&amp; col);</span>
03719 
03723     <span class="keywordtype">void</span> SetPropertyColour ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxColour&amp; col );
03724     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGNameStr name, <span class="keyword">const</span> wxColour&amp; col )
03725     {
03726         SetPropertyColour ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), col );
03727     }
03728 
<a name="l03730"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida181">03730</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGId <span class="keywordtype">id</span> )
03731     {
03732         SetColourIndex ( wxPGIdToPtr(<span class="keywordtype">id</span>), 0 );
03733     }
03734     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGNameStr name )
03735     {
03736         SetColourIndex ( wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name)), 0 );
03737     }
03738 
03740     <span class="keywordtype">void</span> SetCaptionBackgroundColour(<span class="keyword">const</span> wxColour&amp; col);
03741 
03743     <span class="keywordtype">void</span> SetCaptionForegroundColour(<span class="keyword">const</span> wxColour&amp; col);
03744 
03748     <span class="keywordtype">void</span> SetCellBackgroundColour(<span class="keyword">const</span> wxColour&amp; col);
03749 
03753     <span class="keywordtype">void</span> SetCellTextColour(<span class="keyword">const</span> wxColour&amp; col);
03754 
03756     <span class="keywordtype">void</span> SetLineColour(<span class="keyword">const</span> wxColour&amp; col);
03757 
03759     <span class="keywordtype">void</span> SetMarginColour(<span class="keyword">const</span> wxColour&amp; col);
03760 
03762     <span class="keywordtype">void</span> SetSelectionBackground(<span class="keyword">const</span> wxColour&amp; col);
03763 
03765     <span class="keywordtype">void</span> SetSelectionForeground(<span class="keyword">const</span> wxColour&amp; col);
03766 
03768     <span class="keywordtype">void</span> SetSplitterPosition ( <span class="keywordtype">int</span> newxpos, <span class="keywordtype">bool</span> refresh = TRUE );
03769 
<a name="l03776"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida161">03776</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> focus = FALSE )
03777     {
03778         SelectProperty(wxPGIdToPtr(<span class="keywordtype">id</span>),focus);
03779     }
03780     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> focus = FALSE )
03781     {
03782         SelectProperty(wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name)),focus);
03783     }
03784 
03788     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> priority );
03789 
<a name="l03793"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida188">03793</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyPriority ( wxPGNameStr name, <span class="keywordtype">int</span> priority )
03794     {
03795         SetPropertyPriority(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name),priority);
03796     }
03797 
03800     <span class="keywordtype">void</span> SwitchState ( wxPropertyGridState* pNewState );
03801 
<a name="l03807"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida185">03807</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyLabel ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newproplabel )
03808     {
03809         wxPGProperty* p = &amp;GetPropertyById( <span class="keywordtype">id</span> );
03810         <span class="keywordflow">if</span> ( p ) SetPropertyLabel ( p, newproplabel );
03811     }
<a name="l03817"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida184">03817</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyLabel ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newproplabel )
03818     {
03819         wxPGProperty* p = wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) );
03820         <span class="keywordflow">if</span> ( p ) SetPropertyLabel ( p, newproplabel );
03821     }
03822 
<a name="l03832"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida187">03832</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyName ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newname )
03833     {
03834         DoSetPropertyName ( wxPGIdToPtr(<span class="keywordtype">id</span>), newname );
03835     }
<a name="l03845"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida186">03845</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyName ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newname )
03846     {
03847         DoSetPropertyName ( wxPGIdToPtr ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) ), newname );
03848     }
03849 
<a name="l03851"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida217">03851</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">long</span> value )
03852     {
03853         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03854     }
<a name="l03856"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida216">03856</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> value )
03857     {
03858         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong((<span class="keywordtype">long</span>)value) );
03859     }
<a name="l03861"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida215">03861</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">double</span> value )
03862     {
03863         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
03864     }
<a name="l03866"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida214">03866</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> value )
03867     {
03868         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
03869     }
03870 
03877     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value );
03878 
03879     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* value )
03880     {
03881         SetPropertyValue(<span class="keywordtype">id</span>,wxString(value));
03882     }
03883 
<a name="l03885"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida211">03885</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; value )
03886     {
03887         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
03888     }
<a name="l03890"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida210">03890</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* value )
03891     {
03892         SetPropertyValue ( <span class="keywordtype">id</span>, wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
03893     }
03895     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject* value );
03896     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject&amp; value )
03897     {
03898         SetPropertyValue(<span class="keywordtype">id</span>,&amp;value);
03899     }
03900 
03902     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxVariant&amp; value );
03903 
<a name="l03905"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida206">03905</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPoint&amp; value )
03906     {
03907         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxPoint"</span>), (<span class="keywordtype">void</span>*)&amp;value );
03908         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxPoint")) == 0 );</span>
03909         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
03910     }
<a name="l03912"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida205">03912</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxSize&amp; value )
03913     {
03914         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxSize"</span>), (<span class="keywordtype">void</span>*)&amp;value );
03915         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxSize")) == 0 );</span>
03916         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
03917     }
<a name="l03919"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida204">03919</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayInt&amp; value )
03920     {
03921         <span class="comment">//wxASSERT ( wxStrcmp(wxPGIdToPtr(id)-&gt;GetValueType()-&gt;GetCustomTypeName(),wxT("wxArrayInt")) == 0 );</span>
03922         <span class="comment">//SetPropertyValue ( id, wxPG_VALUETYPE(void), (void*)&amp;value );</span>
03923         SetPropertyValue ( <span class="keywordtype">id</span>, wxT(<span class="stringliteral">"wxArrayInt"</span>), (<span class="keywordtype">void</span>*)&amp;value );
03924     }
03925 
<a name="l03927"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida203">03927</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">long</span> value )
03928     {
03929         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03930     }
<a name="l03932"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida202">03932</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">int</span> value )
03933     {
03934         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">long</span>), wxPGVariantFromLong(value) );
03935     }
<a name="l03937"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida201">03937</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">double</span> value )
03938     {
03939         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">double</span>), wxPGVariantFromDouble(value) );
03940     }
<a name="l03942"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida200">03942</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">bool</span> value )
03943     {
03944         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">bool</span>), wxPGVariantFromLong(value?1:0) );
03945     }
<a name="l03949"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida199">03949</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; value )
03950     {
03951         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), value );
03952     }
<a name="l03956"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida198">03956</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxChar* value )
03957     {
03958         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), wxString(value) );
03959     }
<a name="l03961"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida197">03961</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">void</span>* value )
03962     {
03963         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), wxPG_VALUETYPE(<span class="keywordtype">void</span>), value );
03964     }
<a name="l03966"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida196">03966</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayString&amp; value )
03967     {
03968         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), wxPG_VALUETYPE(wxArrayString), wxPGVariantFromArrayString(value) );
03969     }
<a name="l03971"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida195">03971</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject* value )
03972     {
03973         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), value );
03974     }
03975     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject&amp; value )
03976     {
03977         SetPropertyValue(name,&amp;value);
03978     }
<a name="l03980"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida193">03980</a>     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxVariant&amp; value )
03981     {
03982         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), value );
03983     }
<a name="l03985"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida192">03985</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxPoint&amp; value )
03986     {
03987         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), value );
03988     }
<a name="l03990"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida191">03990</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxSize&amp; value )
03991     {
03992         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), value );
03993     }
<a name="l03995"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida190">03995</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayInt&amp; value )
03996     {
03997         SetPropertyValue ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), value );
03998     }
03999 
04003     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> );
04004     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGNameStr name )
04005     {
04006         SetPropertyValueUnspecified ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) );
04007     }
04008 
<a name="l04013"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida221">04013</a>     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category )
04014     {
04015         m_pState-&gt;SetPropertyValues(list,default_category);
04016     }
04017 
04018     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, wxPGId default_category )
04019     {
04020         SetPropertyValues (list.GetList(),default_category);
04021     }
04022     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
04023     {
04024         SetPropertyValues (list,<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(default_category));
04025     }
04026     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
04027     {
04028         SetPropertyValues (list.GetList(),<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(default_category));
04029     }
04030 
<a name="l04037"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida227">04037</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetVerticalSpacing ( <span class="keywordtype">int</span> vspacing )
04038     {
04039         m_vspacing = (<span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>)vspacing;
04040         CalculateFontAndBitmapStuff ( vspacing );
04041         <span class="keywordflow">if</span> ( !m_pState-&gt;m_itemsAdded ) Refresh();
04042     }
04043 
<a name="l04045"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida229">04045</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowLowPriority() { Compact ( FALSE ); }
04046 
<a name="l04048"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida231">04048</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowPropertyError( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; msg ) 
04049     {
04050         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
04051         wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;ShowError(msg);
04052     }
04053     <span class="keyword">inline</span> <span class="keywordtype">void</span> ShowPropertyError( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; msg ) 
04054     {
04055         ShowPropertyError (<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), msg);
04056     }
04057 
04059     <span class="keywordtype">void</span> Sort ();
04060 
04063     <span class="keywordtype">void</span> Sort ( wxPGId <span class="keywordtype">id</span> );
04064 
<a name="l04067"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida232">04067</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGNameStr name )
04068     {
04069         Sort ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) );
04070     }
04071 
04075     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWindowStyleFlag( <span class="keywordtype">long</span> style );
04076 
<a name="l04081"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida169">04081</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDefaultPriority( <span class="keywordtype">int</span> priority )
04082     {
04083         <span class="keywordflow">if</span> ( priority == wxPG_LOW )
04084             m_iFlags |= wxPG_FL_ADDING_HIDEABLES;
04085         <span class="keywordflow">else</span>
04086             m_iFlags &amp;= ~(wxPG_FL_ADDING_HIDEABLES);
04087     }
04088 
<a name="l04091"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida237">04091</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGId <span class="keywordtype">id</span> )
04092     {
04093         <span class="keywordtype">int</span> priority = wxPG_LOW;
04094         <span class="keywordflow">if</span> ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera77">GetPropertyPriority</a>(<span class="keywordtype">id</span>) == wxPG_LOW )
04095             priority = wxPG_HIGH;
04096         SetPropertyPriority(<span class="keywordtype">id</span>,priority);
04097     }
04098 
<a name="l04101"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida236">04101</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGNameStr name )
04102     {
04103         TogglePropertyPriority(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name));
04104     }
04105 
<a name="l04107"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGrida159">04107</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetDefaultPriority()
04108     {
04109         SetDefaultPriority(wxPG_HIGH);
04110     }
04111 
<a name="l04120"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_0">04120</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EditorsValueWasModified() { m_iFlags |= wxPG_FL_VALUE_MODIFIED; }
<a name="l04122"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_1">04122</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EditorsValueWasNotModified() { m_iFlags &amp;= ~(wxPG_FL_VALUE_MODIFIED); }
<a name="l04128"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_8">04128</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsEditorsValueModified()<span class="keyword"> const </span>{ <span class="keywordflow">return</span>  ( m_iFlags &amp; wxPG_FL_VALUE_MODIFIED ) ? TRUE : FALSE; }
04129     wxPGCtrlClass* GenerateEditorButton ( <span class="keyword">const</span> wxPoint&amp; pos, <span class="keyword">const</span> wxSize&amp; sz );
04144     wxPGCtrlClass* GenerateEditorTextCtrl ( <span class="keyword">const</span> wxPoint&amp; pos,
04145         <span class="keyword">const</span> wxSize&amp; sz, <span class="keyword">const</span> wxString&amp; value, wxPGCtrlClass* secondary,
04146         <span class="keyword">const</span> wxSize&amp; imsz = wxDefaultSize );
04147 
04148     <span class="comment">/* Generates both textctrl and button.</span>
04149 <span class="comment">    */</span>
04150     wxPGCtrlClass* GenerateEditorTextCtrlAndButton( <span class="keyword">const</span> wxPoint&amp; pos,
04151         <span class="keyword">const</span> wxSize&amp; sz, wxPGCtrlClass** psecondary, <span class="keywordtype">int</span> limited_editing,
04152         wxPGProperty* property );
04153 
04162     wxPoint GetGoodEditorDialogPosition ( wxPGProperty* p,
04163         <span class="keyword">const</span> wxSize&amp; sz );
04164 
04165     <span class="comment">// Converts escape sequences in src_str to newlines,</span>
04166     <span class="comment">// tabs, etc. and copies result to dst_str.</span>
04167     <span class="keyword">static</span> wxString&amp; ExpandEscapeSequences ( wxString&amp; dst_str, wxString&amp; src_str );
04168 
04169     <span class="comment">// Converts newlines, tabs, etc. in src_str to escape</span>
04170     <span class="comment">// sequences, and copies result to dst_str.</span>
04171     <span class="keyword">static</span> wxString&amp; CreateEscapeSequences ( wxString&amp; dst_str, wxString&amp; src_str );
04172 
<a name="l04175"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_7">04175</a>     <span class="keyword">inline</span> wxPGCtrlClass* GetPrimaryEditor()<span class="keyword"> const</span>
04176 <span class="keyword">    </span>{
04177         <span class="keywordflow">return</span> m_wndPrimary;
04178     }
04179 
04185     <span class="keyword">static</span> <span class="keywordtype">void</span> ArrayStringToString ( wxString&amp; dst, <span class="keyword">const</span> wxArrayString&amp; src,
04186                                       wxChar preDelim, wxChar postDelim,
04187                                       <span class="keywordtype">int</span> flags );
04188 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
04189 <span class="preprocessor"></span>    <span class="keyword">inline</span> wxCustomControlManager* GetCCManager() { <span class="keywordflow">return</span> &amp;m_ccManager; }
04190 <span class="preprocessor">#endif</span>
04191 <span class="preprocessor"></span>
04194     <span class="keywordtype">void</span> OnCustomEditorEvent ( wxEvent &amp;event );
04196     <span class="keywordtype">void</span> SLAlloc ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> itemcount, <span class="keyword">const</span> wxChar** items );
<a name="l04198"></a><a class="code" href="classwxPropertyGrid.htm#wxPropertyGridz0_11">04198</a>     <span class="keyword">inline</span> wxArrayString&amp; SLGet () { <span class="keywordflow">return</span> m_sl; }
04200 
04201     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetInternalFlags ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_iFlags; }
04202     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearInternalFlag ( <span class="keywordtype">long</span> flag ) { m_iFlags &amp;= ~(flag); }
04203     <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetBottomY ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_bottomy; }
04204     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetBottomY ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y ) { m_bottomy = y; }
04205 
04208     <span class="keywordtype">void</span> PropertyWasModified ( wxPGProperty* p );
04209 
04210     <span class="comment">//wxArrayPtrVoid* GetCatArray () { return &amp;m_pState-&gt;m_catArray; }</span>
04211 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04212 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnComboItemPaint (wxPGComboBox* pCb,<span class="keywordtype">int</span> item,wxDC&amp; dc,
04213                            wxRect&amp; rect,<span class="keywordtype">int</span> flags );
04214 <span class="preprocessor">#endif</span>
04215 <span class="preprocessor"></span>
04216     <span class="keyword">static</span> wxPGConstants* AddConstantsArray(<span class="keyword">const</span> wxChar** labels,
04217                                             <span class="keyword">const</span> <span class="keywordtype">long</span>* values,
04218                                             <span class="keywordtype">int</span> itemcount);
04219     <span class="keyword">static</span> wxPGConstants* AddConstantsArray(<span class="keyword">const</span> wxArrayString&amp; labels,
04220                                             <span class="keyword">const</span> wxArrayInt&amp; values,
04221                                             <span class="keywordtype">bool</span> acceptLabelsAsId);
04222     <span class="keyword">static</span> wxPGConstants* AddConstantsArray(wxPGConstants&amp; constants);
04223 <span class="preprocessor">#ifdef __WXDEBUG__</span>
04224 <span class="preprocessor"></span>    <span class="comment">// Displays what dynamic arrays are allocated</span>
04225     <span class="keyword">static</span> <span class="keywordtype">void</span> DumpAllocatedChoiceSets();
04226 <span class="preprocessor">#endif</span>
04227 <span class="preprocessor"></span>
04230     <span class="keyword">static</span> wxPGConstants* CreateConstantsArray(size_t <span class="keywordtype">id</span>);
04231 
04235     <span class="keyword">static</span> wxPGConstants* GetConstantsArray(size_t <span class="keywordtype">id</span>);
04236 
04239     <span class="keyword">static</span> <span class="keywordtype">void</span> DoubleToString(wxString&amp; target,
04240                                <span class="keywordtype">double</span> value,
04241                                <span class="keywordtype">int</span> precision,
04242                                <span class="keywordtype">bool</span> removeZeroes,
04243                                wxString* precTemplate);
04244 
04245 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
04246 <span class="preprocessor"></span>
04248     <span class="keywordtype">void</span> SetCurControlBoldFont();
04249    
04250 <span class="comment">// Simple way to make doxygen skip protected members</span>
04251 <span class="comment">// Used wx/window.h include guard because had trouble</span>
04252 <span class="comment">// getting doxygen definitions work.</span>
04253 
04254     <span class="comment">//</span>
04255     <span class="comment">// Overridden functions - no documentation required.</span>
04256     <span class="comment">//</span>
04257 
04258     <span class="keyword">virtual</span> wxSize DoGetBestSize() <span class="keyword">const</span>;
04259 
04260     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Refresh( <span class="keywordtype">bool</span> eraseBackground = <span class="keyword">true</span>,
04261                           <span class="keyword">const</span> wxRect *rect = (<span class="keyword">const</span> wxRect *) NULL );
04262 
04263     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font );
04264 
04265     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Freeze();
04266 
04267     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetExtraStyle ( <span class="keywordtype">long</span> exStyle );
04268 
04269     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Thaw();
04270 
04271 <span class="keyword">protected</span>:
04272 
04274     <span class="comment">//wxPropertyGridState         m_state;</span>
04275     <span class="comment">//wxPropertyGridState*         m_pState;</span>
04276 
04281     <span class="comment">//unsigned char               m_itemsAdded;</span>
04282 
04284     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>               m_processingEvent;
04285 
04286 <span class="preprocessor">#ifndef wxPG_ICON_WIDTH</span>
04287 <span class="preprocessor"></span>        wxBitmap            *m_expandbmp, *m_collbmp;
04288 <span class="preprocessor">#endif</span>
04289 <span class="preprocessor"></span>
04290     wxCursor            *m_cursor_sizewe;
04291 
04293     wxPGCtrlClass       *m_wndPrimary;
04294     wxPGCtrlClass       *m_wndSecondary;
04295 
04296 <span class="preprocessor">#if wxPG_DOUBLE_BUFFER</span>
04297 <span class="preprocessor"></span>    wxBitmap            *m_doubleBuffer;
04298 <span class="preprocessor">#endif</span>
04299 <span class="preprocessor"></span>
04302     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> m_bottomy;
04303 
04305         <span class="keywordtype">int</span>                 m_spacingy;
04306 
04308     <span class="keywordtype">int</span>                 m_width;
04309 
04311     <span class="keywordtype">int</span>                 m_height;
04312 
04314     wxPGArrayProperty   m_arrVisible;
04315 
04317     <span class="keywordtype">int</span>                 m_prevVY;
04318 
04320     <span class="keywordtype">int</span>                 m_calcVisHeight;
04321 
04324         <span class="keywordtype">int</span>                 m_gutterwidth;
04325 
04327     <span class="keywordtype">int</span>                 m_lineHeight;
04328 
04331     <span class="keywordtype">int</span>                 m_marginwidth;
04332 
04333     <span class="keywordtype">int</span>                 m_buttonSpacingY; <span class="comment">// y spacing for expand/collapse button.</span>
04334 
04336     <span class="keywordtype">int</span>                 m_subgroup_extramargin;
04337 
04339         <span class="keywordtype">int</span>                 m_iconwidth;
04340 
04341 <span class="preprocessor">#ifndef wxPG_ICON_WIDTH</span>
04342 <span class="preprocessor"></span>
04344         <span class="keywordtype">int</span>                 m_iconheight;
04345 <span class="preprocessor">#endif</span>
04346 <span class="preprocessor"></span>
04348     <span class="keywordtype">int</span>                 m_curcursor;
04349 
04352         wxFont              m_captionFont;
04353 
04354 <span class="preprocessor">#if !wxPG_HEAVY_GFX</span>
04355 <span class="preprocessor"></span>    <span class="keywordtype">int</span>                 m_splitterprevdrawnx;
04356 
04358     wxPen               m_splitterpen;
04359 
04360 <span class="preprocessor">#endif</span>
04361 <span class="preprocessor"></span>
04362         <span class="keywordtype">int</span>                 m_fontHeight;  <span class="comment">// height of the font</span>
04363     
04364     <span class="comment">// Most recently added category.</span>
04365     <span class="comment">//wxPGPropertyWithChildren*   m_currentCategory;</span>
04366 
04367     <span class="comment">//</span>
04368     <span class="comment">// Temporary values</span>
04369     <span class="comment">//</span>
04370 
04372     <span class="keywordtype">int</span>                 m_startingSplitterX;
04373 
04375     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_dragStatus;
04376 
04378     <span class="keywordtype">signed</span> <span class="keywordtype">char</span>         m_dragOffset;
04379 
04381     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_mouseSide;
04382 
04384     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_editorFocused;
04385 
04387     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_coloursCustomized;
04388 
04390     <span class="comment">//unsigned char       m_lastCaptionBottomnest;</span>
04391 
04393     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_frozen;
04394 
04395     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>       m_vspacing;
04396 
04398     wxUint32            m_iFlags;
04399 
04401     <span class="keywordtype">int</span>                 m_clearThisMany;
04402     
04407     wxPGProperty*       m_selected;
04408 
04409     wxPGProperty*       m_propHover;    <span class="comment">// pointer to property that has mouse on itself</span>
04410 
04411     <span class="keywordtype">int</span>                 m_splitterx; <span class="comment">// x position for the vertical line dividing name and value</span>
04412 
04413 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04414 <span class="preprocessor"></span>            
04415     <span class="keywordtype">int</span>                 m_ctrlXAdjust; <span class="comment">// x relative to splitter (needed for resize).</span>
04416 <span class="preprocessor">#endif</span>
04417 <span class="preprocessor"></span>
04418     wxColour            m_colLine;     <span class="comment">// lines between cells</span>
04419     wxColour            m_colPropFore; <span class="comment">// property names and texts are written in this color</span>
04420     wxColour            m_colPropBack; <span class="comment">// background for m_colPropFore</span>
04421     wxColour            m_colCapFore;  <span class="comment">// text color for captions</span>
04422     wxColour            m_colCapBack;  <span class="comment">// background color for captions</span>
04423     wxColour            m_colSelFore;  <span class="comment">// foreground for selected property</span>
04424     wxColour            m_colSelBack;  <span class="comment">// background for selected property (actually use background color when control out-of-focus)</span>
04425     wxColour            m_colMargin;   <span class="comment">// background colour for margin</span>
04426 
04427     wxArrayPtrVoid      m_arrBgBrushes; <span class="comment">// Array of background colour brushes.</span>
04428 
04429 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
04430 <span class="preprocessor"></span>    wxCustomControlManager  m_ccManager;
04431 <span class="preprocessor">#endif</span>
04432 <span class="preprocessor"></span>
04433     wxArrayString       m_sl;           <span class="comment">// string control helper</span>
04434 
04435     <span class="comment">//wxPGCtrlClass*      m_prevSelected; // delete this ASAP</span>
04436 
04437 <span class="keyword">protected</span>:
04438 
04439     <span class="comment">// Sets some members to defaults.</span>
04440         <span class="keywordtype">void</span> Init1();
04441 
04442     <span class="comment">// Initializes some members.</span>
04443         <span class="keywordtype">void</span> Init2();
04444 
04445         <span class="keywordtype">void</span> OnPaint (wxPaintEvent &amp;event );
04446 
04447     <span class="comment">// main event receivers</span>
04448 <span class="preprocessor">#if wxPG_USE_CUSTOM_CONTROLS</span>
04449 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnMouseEvent ( wxMouseEvent &amp;event );
04450 <span class="preprocessor">#else</span>
04451 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent &amp;event );
04452     <span class="keywordtype">void</span> OnMouseClick ( wxMouseEvent &amp;event );
04453     <span class="keywordtype">void</span> OnMouseRightClick ( wxMouseEvent &amp;event );
04454     <span class="keywordtype">void</span> OnMouseUp ( wxMouseEvent &amp;event );
04455 <span class="preprocessor">#endif</span>
04456 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnKey ( wxKeyEvent &amp;event );
04457 <span class="preprocessor">#if wxMINOR_VERSION &gt; 5 || ( wxMINOR_VERSION == 5 &amp;&amp; wxRELEASE_NUMBER &gt;= 3 )</span>
04458 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnNavigationKey ( wxNavigationKeyEvent&amp; event );
04459 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04460 <span class="preprocessor"></span>    <span class="keywordtype">void</span> SendNavigationKeyEvent( <span class="keywordtype">int</span> dir );
04461 <span class="preprocessor">#endif</span>
04462 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
04463 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnResize ( wxSizeEvent &amp;event );
04464     <span class="comment">//virtual void OnSize ( wxSizeEvent &amp;event );</span>
04465 
04466     <span class="comment">// event handlers</span>
04467     <span class="keywordtype">bool</span> HandleMouseMove ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04468     <span class="keywordtype">bool</span> HandleMouseClick ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04469     <span class="keywordtype">bool</span> HandleMouseRightClick( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04470     <span class="keywordtype">bool</span> HandleMouseUp ( <span class="keywordtype">int</span> x, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> y, wxMouseEvent &amp;event );
04471     <span class="keywordtype">void</span> HandleKeyEvent( wxKeyEvent &amp;event );
04472     <span class="keywordtype">bool</span> HandleChildKey ( wxKeyEvent&amp; event, <span class="keywordtype">bool</span> canDestroy ); <span class="comment">// Handle TAB and ESCAPE in control</span>
04473     
04474     <span class="keywordtype">void</span> OnMouseEntry ( wxMouseEvent &amp;event );
04475 
04476     <span class="comment">//void OnSetFocus ( wxFocusEvent &amp;event );</span>
04477     <span class="comment">//void OnKillFocus ( wxFocusEvent &amp;event );</span>
04478 
04479 <span class="preprocessor">#if !wxPG_USE_CUSTOM_CONTROLS</span>
04480 <span class="preprocessor"></span>
04481     <span class="keywordtype">bool</span> OnMouseCommon ( wxMouseEvent &amp;event, <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span> *py );
04482     <span class="keywordtype">bool</span> OnMouseChildCommon ( wxMouseEvent &amp;event, <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span> *py );
04483 
04484     <span class="comment">// sub-control event handlers</span>
04485     <span class="keywordtype">void</span> OnMouseEntryChild ( wxMouseEvent &amp;event );
04486     <span class="keywordtype">void</span> OnMouseClickChild ( wxMouseEvent &amp;event );
04487     <span class="keywordtype">void</span> OnMouseRightClickChild ( wxMouseEvent &amp;event );
04488     <span class="keywordtype">void</span> OnMouseMoveChild ( wxMouseEvent &amp;event );
04489     <span class="keywordtype">void</span> OnMouseUpChild ( wxMouseEvent &amp;event );
04490     <span class="keywordtype">void</span> OnKeyChild ( wxKeyEvent &amp;event );
04491 
04492     <span class="keywordtype">void</span> OnCaptureChange ( wxMouseCaptureChangedEvent &amp;event );
04493 <span class="preprocessor">#endif // !wxPG_USE_CUSTOM_CONTROLS</span>
04494 <span class="preprocessor"></span>    <span class="keywordtype">void</span> OnFocusEvent ( wxFocusEvent &amp;event );
04495 
04496     <span class="keywordtype">void</span> OnScrollEvent ( wxScrollWinEvent &amp;event );
04497 
04498     <span class="keywordtype">void</span> OnSysColourChanged ( wxSysColourChangedEvent &amp;event );
04499 
04500 <span class="keyword">protected</span>:
04501 <span class="comment">//private:</span>
04502 
04507         <span class="keywordtype">void</span> CalculateFontAndBitmapStuff( <span class="keywordtype">int</span> vspacing );
04508 
04509     <span class="comment">//void ClearValueBackground ( wxDC&amp; dc, wxPGProperty* p );</span>
04510 
04511     <span class="keyword">inline</span> wxRect GetEditorWidgetRect ( wxPGProperty* p );
04512 
04513     <span class="comment">//inline wxSize GetEditorWidgetSize ( wxPGProperty* p );</span>
04514 
04515     <span class="comment">//void CorrectEditorWidgetSizeX ( int cx, int cw );</span>
04516     <span class="keywordtype">void</span> CorrectEditorWidgetSizeX ( <span class="keywordtype">int</span> new_splitterx, <span class="keywordtype">int</span> new_width );
04517 
04518     <span class="comment">//void CorrectEditorWidgetSizeY ( int cy );</span>
04519 
04520 <span class="preprocessor">#ifdef __WXDEBUG__</span>
04521 <span class="preprocessor"></span>    <span class="keywordtype">void</span> _log_items ();
04522     <span class="keywordtype">void</span> OnScreenNote ( <span class="keyword">const</span> wxChar* format, ... );
04523 <span class="preprocessor">#endif</span>
04524 <span class="preprocessor"></span>
04525     <span class="keywordtype">void</span> Delete ( wxPGProperty* item );
04526 
04527     <span class="keywordtype">void</span> SelectProperty ( wxPGProperty* p, <span class="keywordtype">bool</span> focus = FALSE, <span class="keywordtype">bool</span> forceswitch = FALSE, <span class="keywordtype">bool</span> nonvisible = FALSE );
04528 
04529     <span class="keywordtype">void</span> DoDelete ( wxPGProperty* item );
04530 
04531     <span class="keywordtype">void</span> DoDrawItems ( wxDC&amp; dc,
04532         wxPGProperty* first_item, wxPGProperty* last_item,
04533         <span class="keyword">const</span> wxRect* clip_rect );
04534 
04535     <span class="keyword">virtual</span> wxPGId DoGetPropertyByName ( wxPGNameStr name ) <span class="keyword">const</span>;
04536 
04538     <span class="keywordtype">void</span> DrawItems ( wxDC&amp; dc, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> topitemy, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> bottomitemy,
04539         <span class="keyword">const</span> wxRect* clip_rect = NULL );
04540 
04541     <span class="keywordtype">void</span> DrawItems ( wxPGProperty* p1, wxPGProperty* p2 );
04542 
04543     <span class="keywordtype">void</span> DrawItem ( wxDC&amp; dc, wxPGProperty* p );
04544 
04545     <span class="keywordtype">void</span> DrawItemAndChildren ( wxDC&amp; dc, wxPGProperty* p );
04546 
04547     <span class="keyword">inline</span> <span class="keywordtype">void</span> DrawItem ( wxPGProperty* p );
04548 
04549     <span class="keyword">virtual</span> <span class="keywordtype">void</span> DrawItemAndChildren ( wxPGProperty* p );
04550 
04552     <span class="keyword">inline</span> wxPGProperty&amp; GetPropertyById ( wxPGId <span class="keywordtype">id</span> )
04553     {
04554         <span class="keywordflow">return</span> <span class="keywordtype">id</span>.GetProperty();
04555     }
04556 
04557     <span class="keyword">static</span> wxPropertyCategoryClass* GetPropertyCategory ( wxPGProperty* p );
04558 
04559     <span class="keywordtype">void</span> ImprovedClientToScreen ( <span class="keywordtype">int</span>* px, <span class="keywordtype">int</span>* py );
04560 
04561     wxPGId Insert ( wxPGProperty* priorthis, wxPGProperty* newproperty );
04562 
04563     <span class="keyword">inline</span> wxPGId Insert ( wxPGPropertyWithChildren* parent, <span class="keywordtype">int</span> index, wxPGProperty* newproperty )
04564     {
04565         <span class="keywordflow">return</span> m_pState-&gt;Insert(parent,index,newproperty);
04566     }
04567 
04569     <span class="keywordtype">void</span> RegainColours ();
04570 
04571     wxPGProperty* DoGetItemAtY ( <span class="keywordtype">int</span> y );
04572 
04573     <span class="keyword">inline</span> wxPGProperty* DoGetItemAtY_Full ( <span class="keywordtype">int</span> y )
04574     {
04575         wxASSERT ( y &gt;= 0 );
04576 
04577         <span class="keywordflow">if</span> ( (<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>)y &gt;= m_bottomy )
04578             <span class="keywordflow">return</span> NULL;
04579 
04580         <span class="keywordflow">return</span> m_pState-&gt;m_properties-&gt;GetItemAtY ( y, m_lineHeight );
04581     }
04582 
04583     <span class="keywordtype">void</span> DoPropertyChanged ( wxDC&amp; dc, wxPGProperty* p );
04584 
04585     <span class="keywordtype">void</span> DoSetPropertyPriority ( wxPGProperty* p, <span class="keywordtype">int</span> priority );
04586 
04587     wxPGProperty* GetLastItem ( <span class="keywordtype">bool</span> need_visible, <span class="keywordtype">bool</span> allow_subprops = TRUE );
04588 
04589     <span class="keywordtype">void</span> CalculateVisibles ( <span class="keywordtype">int</span> vy, <span class="keywordtype">bool</span> full_recalc );
04590 
04591     <span class="keywordtype">void</span> CalculateYs ( wxPGPropertyWithChildren* startparent,
04592         <span class="keywordtype">int</span> startindex );
04593 
04597     <span class="keywordtype">bool</span> CommitChangesFromEditor();
04598 
04599     <span class="keywordtype">bool</span> Expand ( wxPGProperty* p );
04600 
04601     <span class="keywordtype">bool</span> Collapse ( wxPGProperty* p );
04602 
04603     <span class="comment">// Returns nearest paint visible property (such that will be painted unless</span>
04604     <span class="comment">// window is scrolled or resized). If given property is paint visible, then</span>
04605     <span class="comment">// it itself will be returned.</span>
04606     wxPGProperty* GetNearestPaintVisible ( wxPGProperty* p );
04607 
04608     <span class="keywordtype">void</span> NavigateOut ( <span class="keywordtype">int</span> dir, <span class="keywordtype">bool</span> isChildFocused = <span class="keyword">false</span> ); <span class="comment">// this will then call wxWindow::Navigate</span>
04609 
04610     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterDefaultEditors();
04611 
04612     <span class="keyword">static</span> <span class="keywordtype">void</span> RegisterDefaultValues();
04613 
04614     <span class="comment">// Sets m_bgColIndex to this property and all its children.</span>
04615     <span class="keywordtype">void</span> SetColourIndex ( wxPGProperty* p, <span class="keywordtype">int</span> index );
04616 
04617     <span class="keywordtype">void</span> SetPropertyLabel ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newproplabel );
04618 
04619     <span class="keywordtype">void</span> DoSetPropertyName ( wxPGProperty* p, <span class="keyword">const</span> wxString&amp; newname );
04620 
04621     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxPGValueType* typeclass, wxPGVariant value );
04622 
04623     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* typestring, wxPGVariant value );
04624 
04625     <span class="comment">// Setups event handling for child control</span>
04626     <span class="keywordtype">void</span> SetupEventHandling ( wxPGCtrlClass* wnd, <span class="keywordtype">int</span> <span class="keywordtype">id</span> );
04627 
04628     <span class="comment">//void Sort ( bool recalcys );</span>
04629 
04630     <span class="comment">//void Sort ( wxPGProperty* p, bool recalcys );</span>
04631 
04632     <span class="keywordtype">void</span> CustSetCursor ( <span class="keywordtype">int</span> type );
04633 
04634     <span class="keywordtype">void</span> RecalculateVirtualSize();
04635 
04636     <span class="keywordtype">void</span> PGAdjustScrollbars ( <span class="keywordtype">int</span> y );
04637 
04639     <span class="keywordtype">void</span> DrawSplitterDragColumn ( wxDC&amp; dc, <span class="keywordtype">int</span> x );
04640 
04642     <span class="comment">//int GetNearestValidItem ( int index, int dir );</span>
04643     wxPGProperty* GetNeighbourItem ( wxPGProperty* item, <span class="keywordtype">bool</span> need_visible,
04644         <span class="keywordtype">int</span> dir ) <span class="keyword">const</span>;
04645 
04646     <span class="comment">//inline int PrepareToAddItem( wxPGProperty* property, wxPGPropertyWithChildren* category );</span>
04647 
04648     <span class="keywordtype">void</span> PrepareAfterItemsAdded();
04649 
04650 <span class="preprocessor">#endif // DOXYGEN_SHOULD_SKIP_THIS</span>
04651 <span class="preprocessor"></span>
04652 <span class="keyword">private</span>:
04653     DECLARE_EVENT_TABLE()
04654 };
04655 
04656 <span class="preprocessor">#undef wxPG_USE_STATE</span>
04657 <span class="preprocessor"></span>
04658 <span class="comment">// -----------------------------------------------------------------------</span>
04659 
04660 <span class="keyword">inline</span> <span class="keywordtype">bool</span> wxPropertyGridState::IsDisplayed()<span class="keyword"> const</span>
04661 <span class="keyword"></span>{
04662     <span class="keywordflow">return</span> ( <span class="keyword">this</span> == m_pPropGrid-&gt;GetState() );
04663 }
04664 
04665 <span class="comment">// -----------------------------------------------------------------------</span>
04666 
<a name="l04683"></a><a class="code" href="classwxPropertyGridEvent.htm">04683</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridEvent : <span class="keyword">public</span> wxCommandEvent
04684 {
04685 <span class="keyword">public</span>:
04686 
04688     wxPropertyGridEvent(wxEventType commandType=0, <span class="keywordtype">int</span> <span class="keywordtype">id</span>=0);
04689 <span class="preprocessor">#ifndef SWIG</span>
04690 <span class="preprocessor"></span>
04691     wxPropertyGridEvent(<span class="keyword">const</span> wxPropertyGridEvent&amp; event);
04692 <span class="preprocessor">#endif</span>
04693 <span class="preprocessor"></span>
04694     ~wxPropertyGridEvent();
04695 
04697     <span class="keyword">virtual</span> wxEvent* Clone() <span class="keyword">const</span>;
04698 
<a name="l04700"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa2">04700</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EnableProperty( <span class="keywordtype">bool</span> enable = TRUE )
04701     {
04702         m_pg-&gt;EnableProperty(wxPGIdGen(m_property),enable);
04703     }
04704 
<a name="l04706"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa1">04706</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> DisableProperty()
04707     {
04708         m_pg-&gt;EnableProperty(wxPGIdGen(m_property),FALSE);
04709     }
04710 
<a name="l04712"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa3">04712</a>     wxPGId GetProperty()<span class="keyword"> const</span>
04713 <span class="keyword">    </span>{
04714         <span class="keywordflow">return</span> wxPGIdGen(m_property);
04715     }
04716 
<a name="l04718"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa7">04718</a>     wxPGProperty* GetPropertyPtr()<span class="keyword"> const</span>
04719 <span class="keyword">    </span>{
04720         <span class="keywordflow">return</span> m_property;
04721     }
04722 
<a name="l04724"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa5">04724</a>     <span class="keyword">const</span> wxString&amp; GetPropertyLabel()<span class="keyword"> const</span>
04725 <span class="keyword">    </span>{
04726         wxASSERT ( m_property );
04727         <span class="keywordflow">return</span> m_property-&gt;GetLabel();
04728     }
04729 
<a name="l04731"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa6">04731</a>     <span class="keyword">const</span> wxString&amp; GetPropertyName()<span class="keyword"> const</span>
04732 <span class="keyword">    </span>{
04733         wxASSERT ( m_property );
04734         <span class="keywordflow">return</span> m_property-&gt;GetName();
04735     }
04736 
04737 <span class="preprocessor">#if wxPG_USE_CLIENT_DATA</span>
04738 <span class="preprocessor"></span>
<a name="l04739"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa4">04739</a>     <span class="keywordtype">void</span>* GetPropertyClientData()<span class="keyword"> const</span>
04740 <span class="keyword">    </span>{
04741         wxASSERT ( m_property );
04742         <span class="keywordflow">return</span> m_property-&gt;GetClientData();
04743     }
04744 <span class="preprocessor">#endif</span>
04745 <span class="preprocessor"></span>
04747 <span class="preprocessor">#if wxPG_EMBED_VARIANT</span>
04748 <span class="preprocessor"></span>    <span class="keyword">const</span> wxVariant&amp; GetPropertyValue() <span class="keyword">const</span>
04749 <span class="preprocessor">#else</span>
<a name="l04750"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa8">04750</a> <span class="preprocessor"></span>    wxVariant GetPropertyValue() <span class="keyword">const</span>
04751 <span class="preprocessor">#endif</span>
04752 <span class="preprocessor"></span>    {
04753         wxASSERT ( m_property );
04754         <span class="keywordflow">return</span> m_property-&gt;GetValueAsVariant();
04755     }
04756 
04757     <span class="keyword">inline</span> wxString GetPropertyValueAsString ()<span class="keyword"> const</span>
04758 <span class="keyword">    </span>{
04759         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsString( wxPGIdGen(m_property) );
04760     }
04761     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsLong ()<span class="keyword"> const</span>
04762 <span class="keyword">    </span>{
04763         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsLong( wxPGIdGen(m_property) );
04764     }
04765     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetPropertyValueAsInt () { <span class="keywordflow">return</span> (<span class="keywordtype">int</span>)GetPropertyValueAsLong(); }
04766     <span class="keyword">inline</span> <span class="keywordtype">long</span> GetPropertyValueAsBool ()<span class="keyword"> const</span>
04767 <span class="keyword">    </span>{
04768         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsBool( wxPGIdGen(m_property) );
04769     }
04770     <span class="keyword">inline</span> <span class="keywordtype">double</span> GetPropertyValueAsDouble ()<span class="keyword"> const</span>
04771 <span class="keyword">    </span>{
04772         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsDouble( wxPGIdGen(m_property) );
04773     }
04774     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayString&amp; GetPropertyValueAsArrayString ()<span class="keyword"> const</span>
04775 <span class="keyword">    </span>{
04776         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsArrayString( wxPGIdGen(m_property) );
04777     }
04778     <span class="keyword">inline</span> <span class="keyword">const</span> wxObject* GetPropertyValueAsWxObjectPtr ()<span class="keyword"> const</span>
04779 <span class="keyword">    </span>{
04780         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsWxObjectPtr( wxPGIdGen(m_property) );
04781     }
04782     <span class="keyword">inline</span> <span class="keywordtype">void</span>* GetPropertyValueAsVoidPtr ()<span class="keyword"> const</span>
04783 <span class="keyword">    </span>{
04784         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsVoidPtr( wxPGIdGen(m_property) );
04785     }
04786     <span class="keyword">inline</span> <span class="keyword">const</span> wxPoint&amp; GetPropertyValueAsPoint ()<span class="keyword"> const</span>
04787 <span class="keyword">    </span>{
04788         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsPoint( wxPGIdGen(m_property) );
04789     }
04790     <span class="keyword">inline</span> <span class="keyword">const</span> wxSize&amp; GetPropertyValueAsSize ()<span class="keyword"> const</span>
04791 <span class="keyword">    </span>{
04792         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsSize( wxPGIdGen(m_property) );
04793     }
04794     <span class="keyword">inline</span> <span class="keyword">const</span> wxArrayInt&amp; GetPropertyValueAsArrayInt ()<span class="keyword"> const</span>
04795 <span class="keyword">    </span>{
04796         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueAsArrayInt( wxPGIdGen(m_property) );
04797     }
04798 
<a name="l04800"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa20">04800</a>     <span class="keyword">const</span> wxPGValueType* GetPropertyValueType()<span class="keyword"> const</span>
04801 <span class="keyword">    </span>{
04802         <span class="keywordflow">return</span> m_pg-&gt;GetPropertyValueType( wxPGIdGen(m_property) );
04803     }
04804 
<a name="l04806"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa21">04806</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> HasProperty()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> ( m_property != (wxPGProperty*) NULL ); }
04807 
04808     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsPropertyEnabled()<span class="keyword"> const</span>
04809 <span class="keyword">    </span>{
04810         <span class="keywordflow">return</span> m_pg-&gt;IsPropertyEnabled(wxPGIdGen(m_property));
04811     }
04812 
<a name="l04814"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa24">04814</a>     <span class="keywordtype">void</span> SetProperty ( wxPGId <span class="keywordtype">id</span> ) { m_property = wxPGIdToPtr(<span class="keywordtype">id</span>); }
04815 
<a name="l04817"></a><a class="code" href="classwxPropertyGridEvent.htm#wxPropertyGridEventa23">04817</a>     <span class="keywordtype">void</span> SetProperty ( wxPGProperty* p ) { m_property = p; }
04818 
04819     <span class="keywordtype">void</span> SetPropertyGrid ( wxPropertyGrid* pg ) { m_pg = pg; }
04820 
04821 <span class="preprocessor">#ifndef SWIG</span>
04822 <span class="preprocessor"></span><span class="keyword">private</span>:
04823     DECLARE_DYNAMIC_CLASS(wxPropertyGridEvent)
04824 
04825     wxPGProperty*       m_property;
04826     wxPropertyGrid*     m_pg;
04827 <span class="preprocessor">#endif</span>
04828 <span class="preprocessor"></span>};
04829 
04830 <span class="preprocessor">#ifndef SWIG</span>
04831 <span class="preprocessor"></span>BEGIN_DECLARE_EVENT_TYPES()
04832     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_SELECTED,           1775)
04833     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_CHANGED,            1776)
04834     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_HIGHLIGHTED,        1777)
04835     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_RIGHT_CLICK,        1778)
04836     DECLARE_EXPORTED_EVENT_TYPE(WXDLLIMPEXP_PG, wxEVT_PG_PAGE_CHANGED,       1779)
04837     
04838 END_DECLARE_EVENT_TYPES()
04839 #<span class="keywordflow">else</span>
04840     <span class="keyword">enum</span> {
04841         wxEVT_PG_SELECTED = 1775,
04842         wxEVT_PG_CHANGED,
04843         wxEVT_PG_HIGHLIGHTED,
04844         wxEVT_PG_RIGHT_CLICK,
04845         wxEVT_PG_PAGE_CHANGED,
04846     };
04847 <span class="preprocessor">#endif</span>
04848 <span class="preprocessor"></span>
04849 
04850 <span class="preprocessor">#ifndef SWIG</span>
04851 <span class="preprocessor"></span><span class="keyword">typedef</span> void (wxEvtHandler::*wxPropertyGridEventFunction)(wxPropertyGridEvent&amp;);
04852 
04853 <span class="preprocessor">#define EVT_PG_SELECTED(id, fn)              DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_SELECTED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04854 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_CHANGED(id, fn)               DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_CHANGED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04855 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_HIGHLIGHTED(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_HIGHLIGHTED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04856 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_RIGHT_CLICK(id, fn)           DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_RIGHT_CLICK, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04857 <span class="preprocessor"></span><span class="preprocessor">#define EVT_PG_PAGE_CHANGED(id, fn)          DECLARE_EVENT_TABLE_ENTRY( wxEVT_PG_PAGE_CHANGED, id, -1, (wxObjectEventFunction) (wxEventFunction)  wxStaticCastEvent( wxPropertyGridEventFunction, &amp; fn ), (wxObject *) NULL ),</span>
04858 <span class="preprocessor"></span>
04859 <span class="preprocessor">#endif</span>
04860 <span class="preprocessor"></span>
04861 
04862 <span class="comment">// -----------------------------------------------------------------------</span>
04863 
04864 
<a name="l04869"></a><a class="code" href="classwxPropertyGridPopulator.htm">04869</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridPopulator
04870 {
04871 <span class="keyword">public</span>:
<a name="l04878"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora8">04878</a>     <span class="keyword">inline</span> wxPropertyGridPopulator(wxPropertyGrid* pg = (wxPropertyGrid*) NULL,
04879                                    wxPGId popRoot = wxPGId())
04880     {
04881         Init(pg, popRoot);
04882     }
04883 
04885     ~wxPropertyGridPopulator();
04886 
04892     <span class="keywordtype">void</span> AddChoices(size_t choicesId,
04893                     <span class="keyword">const</span> wxArrayString&amp; choiceLabels,
04894                     <span class="keyword">const</span> wxArrayInt&amp; choiceValues = *((<span class="keyword">const</span> wxArrayInt*)NULL));
04895 
04924     wxPGId AppendByClass(<span class="keyword">const</span> wxString&amp; classname,
04925                          <span class="keyword">const</span> wxString&amp; label,
04926                          <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
04927                          <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
04928                          <span class="keyword">const</span> wxString&amp; attributes = wxEmptyString,
04929                          size_t choicesId = 0,
04930                          <span class="keyword">const</span> wxArrayString&amp; choiceLabels = *((<span class="keyword">const</span> wxArrayString*)NULL),
04931                          <span class="keyword">const</span> wxArrayInt&amp; choiceValues = *((<span class="keyword">const</span> wxArrayInt*)NULL));
04932 
04941     wxPGId AppendByType(<span class="keyword">const</span> wxString&amp; valuetype,
04942                         <span class="keyword">const</span> wxString&amp; label,
04943                         <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL,
04944                         <span class="keyword">const</span> wxString&amp; value = wxEmptyString,
04945                         <span class="keyword">const</span> wxString&amp; attributes = wxEmptyString,
04946                         size_t choicesId = 0,
04947                         <span class="keyword">const</span> wxArrayString&amp; choiceLabels = *((<span class="keyword">const</span> wxArrayString*)NULL),
04948                         <span class="keyword">const</span> wxArrayInt&amp; choiceValues = *((<span class="keyword">const</span> wxArrayInt*)NULL));
04949 
<a name="l04951"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora5">04951</a>     <span class="keyword">inline</span> wxPGId GetCurrentParent()<span class="keyword"> const</span>
04952 <span class="keyword">    </span>{
04953         <span class="keywordflow">return</span> m_curParent;
04954     }
04955 
04957     <span class="keywordtype">bool</span> HasChoices( size_t <span class="keywordtype">id</span> ) <span class="keyword">const</span>;
04958 
<a name="l04960"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora7">04960</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetGrid( wxPropertyGrid* pg )
04961     {
04962         m_propGrid = pg;
04963     }
04964 
04966     <span class="keywordtype">bool</span> BeginChildren();
04967 
<a name="l04969"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatora4">04969</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> EndChildren()
04970     {
04971         wxASSERT( m_curParent.IsOk() );
04972         m_curParent = wxPGIdGen(wxPGIdToPtr(m_curParent)-&gt;GetParent());
04973         m_lastProperty = wxPGId((wxPGProperty*)NULL);
04974     }
04975 
04976 <span class="keyword">protected</span>:
04977 
04978     wxPGId DoAppend(wxPGProperty* p,
04979                     <span class="keyword">const</span> wxString&amp; value,
04980                     <span class="keyword">const</span> wxString&amp; attributes,
04981                     size_t choicesId,
04982                     <span class="keyword">const</span> wxArrayString&amp; choiceLabels,
04983                     <span class="keyword">const</span> wxArrayInt&amp; choiceValues);
04984 
04985     <span class="keywordtype">void</span> Init( wxPropertyGrid* pg, wxPGId popRoot );
04986 
<a name="l04988"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp4">04988</a>     wxPropertyGrid* m_propGrid;
04989 
<a name="l04991"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp3">04991</a>     wxPGId          m_popRoot;
04992 
<a name="l04994"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp0">04994</a>     wxPGId          m_curParent;
04995 
<a name="l04997"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp2">04997</a>     wxPGId          m_lastProperty;
04998 
<a name="l05000"></a><a class="code" href="classwxPropertyGridPopulator.htm#wxPropertyGridPopulatorp1">05000</a>     wxPGHashMapI2I  m_dictIdChoices;
05001 };
05002 
05003 <span class="comment">// -----------------------------------------------------------------------</span>
05004 
05005 <span class="comment">//</span>
05006 <span class="comment">// Undefine macros that are not needed outside propertygrid sources</span>
05007 <span class="comment">//</span>
05008 <span class="preprocessor">#ifndef __wxPG_SOURCE_FILE__</span>
05009 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_DESC_REFRESH_REQUIRED</span>
05010 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_SCROLLBAR_DETECTED</span>
05011 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_CREATEDSTATE</span>
05012 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_NOSTATUSBARHELP</span>
05013 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_SCROLLED</span>
05014 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_HIDE_STATE</span>
05015 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUS_INSIDE_CHILD</span>
05016 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUS_INSIDE</span>
05017 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_INSIDE_CHILD</span>
05018 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_CUR_USES_CUSTOM_IMAGE</span>
05019 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_PRIMARY_FILLS_ENTIRE</span>
05020 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_VALUE_MODIFIED</span>
05021 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_INSIDE</span>
05022 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_FOCUSED</span>
05023 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_MOUSE_CAPTURED</span>
05024 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_INITIALIZED</span>
05025 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_ACTIVATION_BY_CLICK</span>
05026 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_FL_DONT_CENTER_SPLITTER</span>
05027 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_SUPPORT_TOOLTIPS</span>
05028 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_USE_CUSTOM_CONTROLS</span>
05029 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_DOUBLE_BUFFER</span>
05030 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_HEAVY_GFX</span>
05031 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_ICON_WIDTH</span>
05032 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_USE_RENDERER_NATIVE</span>
05033 <span class="preprocessor"></span><span class="comment">// Following are needed by the manager headers</span>
05034 <span class="comment">//# undef wxPGIdGen</span>
05035 <span class="comment">//# undef wxPGNameStr</span>
05036 <span class="comment">//# undef wxPGIdToPtr</span>
05037 <span class="preprocessor">#endif</span>
05038 <span class="preprocessor"></span>
05039 <span class="comment">// Doxygen special</span>
05040 <span class="preprocessor">#if !defined(_WX_WINDOW_H_BASE_) &amp;&amp; !defined(SWIG)</span>
05041 <span class="preprocessor"></span><span class="preprocessor"># include "manager.h"</span>
05042 <span class="preprocessor">#endif</span>
05043 <span class="preprocessor"></span>
05044 <span class="comment">// -----------------------------------------------------------------------</span>
05045 
05046 <span class="preprocessor">#endif // __WX_PROPGRID_H__</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Mon Jun 6 19:12:51 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
