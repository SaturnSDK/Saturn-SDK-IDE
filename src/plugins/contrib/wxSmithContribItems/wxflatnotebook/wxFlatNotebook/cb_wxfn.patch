Only in D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook: .svn
Only in D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook: AUTHORS
Only in D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook: Makefile.am
diff -u -r D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/README D:\projects\CodeBlocks(commit)\src\sdk\2FNB/README
--- D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/README	Tue Jun  6 13:13:58 2006
+++ D:\projects\CodeBlocks(commit)\src\sdk\2FNB/README	Sat Oct  7 02:06:40 2006
@@ -11,16 +11,10 @@
 
 # cd contrib/build/wxFlatNotebook
 # make clean
-# make 
+# make type=[release | debug ]
 
 This will create both the library and the wxFlatNotebookTest executable
 
-To build in debug mode:
-
-# cd contrib/build/wxFlatNotebook
-# make clean
-# make type=debug 
-
 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 VERSIONS:
@@ -109,3 +103,46 @@
 + Fixed minor drawing issues
 + Fixed bug that when closing the a tab using the mouse middle button, the page was set to active and only then closed.
 + Fixed bug that the old selection value in the event when closing a page was incorrect
+
+
+
+======================================================
+Version 1.5  9/13/2006 7:40PM
+======================================================
+
+Features:
+
++ New style added - VC8 style, with curved tabs 
+  The new style has the following features
+	- Background of tab area can be painted in gradient
+	- Colourful tabs - a random gentle colour is generated for each new tab (very cool :))
+	
+	Note: that the new tab DOES NOT support 'X' button on the tab
+
++ Build for DLL debug/release was fixed (on windows)
++ Makefile for Linux is now more generic using wx-config tool
++ Several drawing issues were fixed
++ Tabs now has an extra line that separate them from the page
+
+========================================================
+Version 2.0 
+========================================================
+
+ - Code refactoring: 
+   + remove wxStyledNotebook class, the same functionality now exist under wxFlatNotebook
+   + All drawing was moved to renderers (wxFlatNotebook.cpp file is now cleaned from drawing)
+   + Now using smart_ptr & singleton template classes where ever possible
+   
+ - Added smart tabbing style with new and easy way to select tabs (request #1527285)
+   Once this style is enabled, pressing Ctrl+[Shift]+T will popup a dialog with all the open tabs, another Ctrl+[Shift]+T will run throw the 
+   dialog list, until the Ctrl key is released.
+   
+ - Added new styles:
+   wxFNB_SMART_TABS - which enables the above feature
+   wxFNB_DROPDOWN_TABS_LIST - which replaces the '<>' (left, right arrows buttons) with a drop down list (popup menu) with all the open tabs
+   this feature is similar to VS8 tabs styles.
+   
+- Fixed a bug in SetSelection - in case that the navigation buttons were hidden, and the selection was not visible, it did not ensure that it will be visible
+
+Have fun !
+Eran
Only in D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook: README.patch
Only in D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook: cb_wxfn.patch
Only in D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook: libwxflatnotebook.a
diff -u -r D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/popup_dlg.cpp D:\projects\CodeBlocks(commit)\src\sdk\2FNB/popup_dlg.cpp
--- D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/popup_dlg.cpp	Wed Oct 11 09:43:07 2006
+++ D:\projects\CodeBlocks(commit)\src\sdk\2FNB/popup_dlg.cpp	Sat Oct  7 17:22:46 2006
@@ -1,7 +1,7 @@
-#include "popup_dlg.h"
+#include <wx/wxFlatNotebook/popup_dlg.h>
 #include <wx/listctrl.h>
-#include "wxFlatNotebook.h"
-#include "renderer.h"
+#include <wx/wxFlatNotebook/wxFlatNotebook.h>
+#include <wx/wxFlatNotebook/renderer.h>
 #include <wx/listbox.h>
 #include <wx/image.h>
 #include <wx/mstream.h>
@@ -67,14 +67,14 @@
 
 	sz->Add( m_panel );
 	sz->Add( m_listBox, 1, wxEXPAND );
-
+	
 	SetSizer( sz );
 
 	// Connect events to the list box
-	m_listBox->Connect(wxID_ANY, wxEVT_KEY_UP, wxKeyEventHandler(wxTabNavigatorWindow::OnKeyUp), NULL, this);
-	m_listBox->Connect(wxID_ANY, wxEVT_NAVIGATION_KEY, wxNavigationKeyEventHandler(wxTabNavigatorWindow::OnNavigationKey), NULL, this);
+	m_listBox->Connect(wxID_ANY, wxEVT_KEY_UP, wxKeyEventHandler(wxTabNavigatorWindow::OnKeyUp), NULL, this); 
+	m_listBox->Connect(wxID_ANY, wxEVT_NAVIGATION_KEY, wxNavigationKeyEventHandler(wxTabNavigatorWindow::OnNavigationKey), NULL, this); 
 	m_listBox->Connect(wxID_ANY, wxEVT_COMMAND_LISTBOX_DOUBLECLICKED, wxCommandEventHandler(wxTabNavigatorWindow::OnItemSelected), NULL, this);
-
+	
 	// Connect paint event to the panel
 	m_panel->Connect(wxID_ANY, wxEVT_PAINT, wxPaintEventHandler(wxTabNavigatorWindow::OnPanelPaint), NULL, this);
 	m_panel->Connect(wxID_ANY, wxEVT_ERASE_BACKGROUND, wxEraseEventHandler(wxTabNavigatorWindow::OnPanelEraseBg), NULL, this);
@@ -86,7 +86,7 @@
 	// Create the bitmap, only once
 	if( !m_bmp.Ok() )
 	{
-		wxImage::AddHandler( new wxPNGHandler );
+		wxImage::AddHandler( new wxPNGHandler ); 
 		wxInputStream *str = new wxMemoryInputStream(tab_selection_png, tab_selection_png_size);
 		wxImage img(*str);
 		m_bmp =  wxBitmap(img);
@@ -108,7 +108,7 @@
 	wxFlatNotebook* bk = static_cast<wxFlatNotebook*>(GetParent());
 	long maxItems = bk->GetPageCount();
 	long itemToSelect;
-
+		
 	if( event.GetDirection() )
 	{
 		// Select next page
@@ -133,7 +133,7 @@
 {
 	int selection = book->GetSelection();
 	int count     = book->GetPageCount();
-
+	
 
 	m_listBox->Append( book->GetPageText(static_cast<int>(selection)) );
 	m_indexMap[0] = selection;
@@ -142,7 +142,7 @@
 	int prevSel = book->GetPreviousSelection();
 	if( prevSel != wxNOT_FOUND )
 	{
-		// Insert the previous selection as second entry
+		// Insert the previous selection as second entry 
 		m_listBox->Append( book->GetPageText(static_cast<int>(prevSel)) );
 		m_indexMap[1] = prevSel;
 		itemIdx++;
@@ -219,7 +219,7 @@
 		font.SetWeight( wxBOLD );
 		mem_dc.SetFont( font );
 		mem_dc.GetTextExtent( wxT("Tp"), &w, &fontHeight );
-
+		
 		txtPt.x = bmpPt.x + m_bmp.GetWidth() + 4;
 		txtPt.y = (rect.height - fontHeight)/2;
 		mem_dc.SetTextForeground( *wxWHITE );
@@ -233,5 +233,5 @@
 void wxTabNavigatorWindow::OnPanelEraseBg(wxEraseEvent &event)
 {
 	wxUnusedVar(event);
-
+	
 }
diff -u -r D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/renderer.cpp D:\projects\CodeBlocks(commit)\src\sdk\2FNB/renderer.cpp
--- D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/renderer.cpp	Wed Oct 11 09:44:40 2006
+++ D:\projects\CodeBlocks(commit)\src\sdk\2FNB/renderer.cpp	Sat Oct  7 13:28:20 2006
@@ -1,5 +1,5 @@
-#include "renderer.h"
-#include "wxFlatNotebook.h" // for the styles
+#include <wx/wxFlatNotebook/renderer.h>
+#include <wx/wxFlatNotebook/wxFlatNotebook.h> // for the styles
 
 wxFNBRenderer::wxFNBRenderer()
 : m_tabXBgBmp(16, 16)
@@ -62,15 +62,15 @@
 	// ''
 	if(style & wxFNB_NO_NAV_BUTTONS && style & wxFNB_NO_X_BUTTON && !(style & wxFNB_DROPDOWN_TABS_LIST))
 		return 0;
-
+	
 	// 'x'
 	if((style & wxFNB_NO_NAV_BUTTONS) && !(style & wxFNB_NO_X_BUTTON) && !(style & wxFNB_DROPDOWN_TABS_LIST))
 		return 22;
-
+	
 	// '<>'
 	if(!(style & wxFNB_NO_NAV_BUTTONS) && (style & wxFNB_NO_X_BUTTON) && !(style & wxFNB_DROPDOWN_TABS_LIST))
 		return 53 - 16;
-
+	
 	// 'vx'
 	if((style & wxFNB_DROPDOWN_TABS_LIST) && !(style & wxFNB_NO_X_BUTTON))
 		return 22 + 16;
@@ -185,7 +185,7 @@
 
 	// Set the bitmap according to the button status
 	wxBitmap xbmp;
-
+	
 	switch(pc->m_nArrowDownButtonStatus)
 	{
 	case wxFNB_BTN_HOVER:
@@ -501,7 +501,7 @@
 	// Get the text hight
 	int tabHeight = CalcTabHeight(pageContainer);
 	long style = pc->GetParent()->GetWindowStyleFlag();
-
+	
 	// Calculate the number of rows required for drawing the tabs
 	wxRect rect = pc->GetClientRect();
 	int clientWidth = rect.width;
@@ -698,7 +698,7 @@
 
 wxFNBRendererPtr wxFNBRendererMgr::GetRenderer(long style)
 {
-	// since we dont have a style for default tabs, we
+	// since we dont have a style for default tabs, we 
 	// test for all others - FIXME: add style for default tabs
 	if( !(style & wxFNB_VC71) && !(style & wxFNB_VC8) && !(style & wxFNB_FANCY_TABS) )
 		return m_renderers[-1];
@@ -717,7 +717,7 @@
 }
 
 //------------------------------------------
-// Default renderer
+// Default renderer 
 //------------------------------------------
 
 void wxFNBRendererDefault::DrawTab(wxWindow* pageContainer, wxDC &dc, const int &posx, const int &tabIdx, const int &tabWidth, const int &tabHeight, const int btnStatus)
@@ -827,12 +827,12 @@
 		GetBitmap(dc, x_rect, m_tabXBgBmp);
 
 		// Draw the tab
-		DrawTabX(pc, dc, x_rect, tabIdx, btnStatus);
+		DrawTabX(pc, dc, x_rect, tabIdx, btnStatus);			
 	}
 }
 
 //------------------------------------------------------------------
-// Visual studio 7.1
+// Visual studio 7.1 
 //------------------------------------------------------------------
 
 void wxFNBRendererVC71::DrawTab(wxWindow* pageContainer, wxDC &dc, const int &posx, const int &tabIdx, const int &tabWidth, const int &tabHeight, const int btnStatus)
@@ -895,7 +895,7 @@
 	int padding = static_cast<wxFlatNotebook*>( pc->GetParent() )->GetPadding();
 	bool hasImage = pc->GetPageInfoVector()[tabIdx].GetImageIndex() != -1;
 	int imageYCoord = pc->HasFlag(wxFNB_BOTTOM) ? 6 : 8;
-
+	
 	hasImage ? textOffset = padding * 2 + 16 : textOffset = padding;
 
 	if(tabIdx != pc->GetSelection())
@@ -912,7 +912,7 @@
 	}
 
 	dc.DrawText(pc->GetPageText(tabIdx), posx + textOffset, imageYCoord);
-
+	
 	// draw 'x' on tab (if enabled)
 	if(pc->HasFlag(wxFNB_X_ON_TAB) && tabIdx == pc->GetSelection())
 	{
@@ -927,7 +927,7 @@
 		GetBitmap(dc, x_rect, m_tabXBgBmp);
 
 		// Draw the tab
-		DrawTabX(pc, dc, x_rect, tabIdx, btnStatus);
+		DrawTabX(pc, dc, x_rect, tabIdx, btnStatus);			
 	}
 }
 
@@ -1003,7 +1003,7 @@
 	}
 
 	dc.DrawText(pc->GetPageText(tabIdx), posx + textOffset, imageYCoord);
-
+	
 	// draw 'x' on tab (if enabled)
 	if(pc->HasFlag(wxFNB_X_ON_TAB) && tabIdx == pc->GetSelection())
 	{
@@ -1018,7 +1018,7 @@
 		GetBitmap(dc, x_rect, m_tabXBgBmp);
 
 		// Draw the tab
-		DrawTabX(pc, dc, x_rect, tabIdx, btnStatus);
+		DrawTabX(pc, dc, x_rect, tabIdx, btnStatus);			
 	}
 }
 
@@ -1029,7 +1029,7 @@
 {
 	wxPageContainer *pc = static_cast<wxPageContainer*>( pageContainer );
 
-#ifndef __WXMAC__
+#ifndef __WXMAC__ 
 	// Works well on MSW & GTK, however this lines should be skipped on MAC
 	if(pc->GetPageInfoVector().empty() || pc->m_nFrom >= (int)pc->GetPageInfoVector().GetCount())
 	{
@@ -1063,7 +1063,7 @@
 	// Background
 	dc.SetTextBackground(pc->GetBackgroundColour());
 	dc.SetTextForeground(pc->m_activeTextColor);
-
+	
 	// If border style is set, set the pen to be border pen
 	if( pc->HasFlag(wxFNB_TABS_BORDER_SIMPLE) )
 		dc.SetPen(borderPen);
@@ -1081,7 +1081,7 @@
 	{
 		wxMemoryDC mem_dc;
 		wxRect rect;
-
+		
 		//---------------------------------------
 		// X button
 		//---------------------------------------
@@ -1134,7 +1134,7 @@
 	int activeTabWidth(0);
 	int	activeTabHeight(0);
 
-	for(cur=(int)vTabsInfo.size() - 1; cur>=0; cur--)
+	for(cur=(int)vTabsInfo.size() - 1; cur>=0; cur--) 
 	{
 		/// 'i' points to the index of the currently drawn tab
 		/// in pc->GetPageInfoVector() vector
@@ -1159,8 +1159,8 @@
 		// the region, it will be filled by the function
 		// drawVc8Tab
 		pc->GetPageInfoVector()[i].GetRegion().Clear();
-
-		// Clean the 'x' buttn on the tab
+		
+		// Clean the 'x' buttn on the tab 
 		// 'Clean' rectanlge is a rectangle with width or height
 		// with values lower than or equal to 0
 		pc->GetPageInfoVector()[i].GetXRect().SetSize(wxSize(-1, -1));
@@ -1204,7 +1204,7 @@
 		pc->GetPageInfoVector()[xx].GetRegion().Clear();
 	}
 
-	// Draw the left/right/close buttons
+	// Draw the left/right/close buttons 
 	// Left arrow
 	DrawLeftArrow(pc, dc);
 	DrawRightArrow(pc, dc);
@@ -1222,14 +1222,14 @@
 	wxPen borderPen = wxPen( pc->GetBorderColour() );
 	wxPoint tabPoints[8];
 
-	// If we draw the first tab or the active tab,
+	// If we draw the first tab or the active tab, 
 	// we draw a full tab, else we draw a truncated tab
 	//
 	//             X(2)                  X(3)
 	//        X(1)                            X(4)
-	//
+	//                                          
 	//                                           X(5)
-	//
+	//                                           
 	// X(0),(7)                                  X(6)
 	//
 	//
@@ -1292,7 +1292,7 @@
 		dc.SetBrush(brush);
 		dc.DrawPolygon(8, tabPoints);
 
-		// Delete the bottom line (or the upper one, incase we use wxBOTTOM)
+		// Delete the bottom line (or the upper one, incase we use wxBOTTOM) 
 		dc.SetPen(wxPen(wxT("WHITE")));
 		dc.DrawLine(tabPoints[0], tabPoints[6]);
 	}
@@ -1308,14 +1308,14 @@
 		dc.DrawLine(tabPoints[5].x-1, tabPoints[5].y, tabPoints[6].x-1, tabPoints[6].y);
 	}
 
-	// Text drawing offset from the left border of the
+	// Text drawing offset from the left border of the 
 	// rectangle
 	int textOffset;
 
 	// The width of the images are 16 pixels
 	int vc8ShapeLen = tabHeight - VERTICAL_BORDER_PADDING - 2;
 	if( pc->TabHasImage( tabIdx ) )
-		textOffset = ((wxFlatNotebook *)pc->m_pParent)->GetPadding() * 2 + 16 + vc8ShapeLen;
+		textOffset = ((wxFlatNotebook *)pc->m_pParent)->GetPadding() * 2 + 16 + vc8ShapeLen; 
 	else
 		textOffset = ((wxFlatNotebook *)pc->m_pParent)->GetPadding() + vc8ShapeLen;
 
@@ -1325,12 +1325,12 @@
 	if( pc->TabHasImage( tabIdx ) )
 	{
 		int imageXOffset = textOffset - 16 - ((wxFlatNotebook *)pc->m_pParent)->GetPadding();
-		dc.DrawBitmap((*pc->GetImageList())[pc->GetPageInfoVector()[tabIdx].GetImageIndex()],
+		dc.DrawBitmap((*pc->GetImageList())[pc->GetPageInfoVector()[tabIdx].GetImageIndex()], 
 			posx + imageXOffset, imageYCoord, true);
 	}
 
 	wxFont boldFont = wxSystemSettings::GetFont(wxSYS_DEFAULT_GUI_FONT);
-
+		
 	// if selected tab, draw text in bold
 	if( tabIdx == pc->GetSelection() )
 	{
@@ -1349,7 +1349,7 @@
 	if( m_first )
 	{
 		m_first = false;
-		pc->m_colorTo   = LightColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE), 0);
+		pc->m_colorTo   = LightColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE), 0); 
 		pc->m_colorFrom = LightColour(wxSystemSettings::GetColour(wxSYS_COLOUR_3DFACE), 60);
 	}
 	wxColour col2 = pc->HasFlag( wxFNB_BOTTOM ) ? pc->GetGradientColourTo() : pc->GetGradientColourFrom();
@@ -1384,9 +1384,9 @@
 		bstep = double((col2.Blue() -  col1.Blue())) / double(size), bf = 0;
 
 	wxColour currCol;
-	int y = tabPoints[0].y;
+	int y = tabPoints[0].y; 
 
-	// If we are drawing the selected tab, we need also to draw a line
+	// If we are drawing the selected tab, we need also to draw a line 
 	// from 0->tabPoints[0].x and tabPoints[6].x -> end, we achieve this
 	// by drawing the rectangle with transparent brush
 	// the line under the selected tab will be deleted by the drwaing loop
@@ -1419,11 +1419,11 @@
 
 		// Draw the border using the 'edge' point
 		dc.SetPen(wxPen(bSelectedTab ? wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW) : pc->m_colorBorder));
-
+		
 		dc.DrawPoint(startX, y);
 		dc.DrawPoint(endX, y);
-
-		// Progress the color
+		
+		// Progress the color 
 		rf += rstep; gf += gstep; bf += bstep;
 
 		pc->HasFlag( wxFNB_BOTTOM ) ? y++ : y--;
@@ -1441,7 +1441,7 @@
 	if(bBottomStyle)
 	{
 		for(int i=0; i<3; i++)
-		{
+		{	
 			if(y >= tabPoints[i].y && y < tabPoints[i+1].y)
 			{
 				x1 = tabPoints[i].x;
@@ -1456,7 +1456,7 @@
 	else
 	{
 		for(int i=0; i<3; i++)
-		{
+		{	
 			if(y <= tabPoints[i].y && y > tabPoints[i+1].y)
 			{
 				x1 = tabPoints[i].x;
@@ -1476,14 +1476,14 @@
 	// We know the first 2 points
 
 	double a;
-	if(x2 == x1)
+	if(x2 == x1) 
 		return static_cast<int>( x2 );
 	else
 		a = (y2 - y1) / (x2 - x1);
 
 	double b = y1 - ((y2 - y1) / (x2 - x1)) * x1;
 
-	if(a == 0)
+	if(a == 0) 
 		return static_cast<int>( x1 );
 
 	double x = (y - b) / a;
@@ -1501,7 +1501,7 @@
 	if(bBottomStyle)
 	{
 		for(int i=7; i>3; i--)
-		{
+		{	
 			if(y >= tabPoints[i].y && y < tabPoints[i-1].y)
 			{
 				x1 = tabPoints[i].x;
@@ -1516,7 +1516,7 @@
 	else
 	{
 		for(int i=7; i>3; i--)
-		{
+		{	
 			if(y <= tabPoints[i].y && y > tabPoints[i-1].y)
 			{
 				x1 = tabPoints[i].x;
@@ -1537,7 +1537,7 @@
 	double a = (y2 - y1) / (x2 - x1);
 	double b = y1 - ((y2 - y1) / (x2 - x1)) * x1;
 
-	if(a == 0)
+	if(a == 0) 
 		return (int)x1;
 
 	// Vertical line
@@ -1552,7 +1552,7 @@
 {
 	wxPageContainer *pc = static_cast<wxPageContainer*>( pageContainer );
 	int tabHeight, clientWidth;
-
+	
 	wxRect rect = pc->GetClientRect();
 	clientWidth = rect.width;
 
@@ -1563,7 +1563,7 @@
 
 	// The drawing starts from posx
 	int posx = ((wxFlatNotebook *)pc->m_pParent)->GetPadding();
-
+	
 	if( from < 0 )
 		from = pc->m_nFrom;
 
diff -u -r D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/renderer.h D:\projects\CodeBlocks(commit)\src\sdk\2FNB/renderer.h
--- D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/renderer.h	Wed Oct 11 09:44:58 2006
+++ D:\projects\CodeBlocks(commit)\src\sdk\2FNB/renderer.h	Sat Oct  7 13:34:10 2006
@@ -3,8 +3,8 @@
 
 #include <wx/dc.h>
 #include <wx/string.h>
-#include "singleton.h"
-#include "smart_ptr.h"
+#include <wx/wxFlatNotebook/singleton.h>
+#include <wx/wxFlatNotebook/smart_ptr.h>
 #include <map>
 #include <vector>
 
@@ -31,7 +31,7 @@
 	 * \param pageContainer parent window on which to draw
 	 * \param dc device context to use
 	 * \param rect button rectangle
-	 * \param tabIdx tab index
+	 * \param tabIdx tab index 
 	 * \param btnStatus button status, can be one of
 	 *   - wxFNB_BTN_PRESSED
 	 *   - wxFNB_BTN_HOVER
@@ -41,13 +41,13 @@
 	virtual void DrawTabX(wxWindow* pageContainer, wxDC& dc, const wxRect& rect, const int& tabIdx, const int btnStatus);
 
 	/**
-	 * Draw tab
+	 * Draw tab 
 	 * \param pageContainer parent window on which to draw
 	 * \param dc device context to use
 	 * \param posx tab x coordinate
 	 * \param tabIdx tab index
-	 * \param tabWidth tab width
-	 * \param tabHeight tab height
+	 * \param tabWidth tab width 
+	 * \param tabHeight tab height 
 	 * \param btnStatus btnStatus the little 'x' button (on top of the active tab) status, can be one of
 	 *   - wxFNB_BTN_PRESSED
 	 *   - wxFNB_BTN_HOVER
@@ -56,7 +56,7 @@
 	virtual void DrawTab(wxWindow* pageContainer, wxDC &dc, const int &posx, const int &tabIdx, const int &tabWidth, const int &tabHeight, const int btnStatus) = 0;
 
 	/**
-	 * Calculate tab width , based on its index (for image, x button on tab)
+	 * Calculate tab width , based on its index (for image, x button on tab) 
 	 * \param pageContainer pageContainer parent window on which to draw
 	 * \param tabIdx tab index
 	 * \param tabHeight the tab height (used for tan() function calculations)
@@ -79,9 +79,9 @@
 	 */
 	virtual void GetBitmap(wxDC& dc, const wxRect &rect, wxBitmap &bmp);
 
-	/**
+	/** 
 	 * Draw a bottom line for the tabs area
-	 */
+	 */ 
 	void DrawTabsLine(wxWindow *pageContainer, wxDC& dc);
 
 	/**
@@ -95,7 +95,7 @@
 	/**
 	 * Paint rectangle with gradient colouring
 	 * \param dc device context
-	 * \param rect rectangle
+	 * \param rect rectangle 
 	 * \param startColor gradient colour 1
 	 * \param endColor gradient colour 2
 	 * \param vertical use vertical gradient or horizontal
@@ -178,7 +178,7 @@
 	void FillVC8GradientColor(wxWindow* pageContainer, wxDC &dc, const wxPoint tabPoints[], const bool bSelectedTab, const int tabIdx);
 	int GetEndX(const wxPoint tabPoints[], const int &y, long style);
 	int GetStartX(const wxPoint tabPoints[], const int &y, long style);
-
+	
 };
 
 //-----------------------------------
@@ -194,7 +194,7 @@
 	 * Return the renderer according to the style flag, the returned pointer should not be
 	 * deleted by caller, it is owned by this class
 	 * \param style window style flag
-	 * \return wxFNBRenderer
+	 * \return wxFNBRenderer 
 	 */
 	wxFNBRendererPtr GetRenderer(long style);
 
diff -u -r D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/wxFlatNotebook.cpp D:\projects\CodeBlocks(commit)\src\sdk\2FNB/wxFlatNotebook.cpp
--- D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/wxFlatNotebook.cpp	Wed Oct 11 09:47:14 2006
+++ D:\projects\CodeBlocks(commit)\src\sdk\2FNB/wxFlatNotebook.cpp	Sat Oct  7 13:51:12 2006
@@ -1,5 +1,5 @@
 ///////////////////////////////////////////////////////////////////////////////
-// Name:		wxFlatNotebook.cpp
+// Name:		wxFlatNotebook.cpp 
 // Purpose:     generic implementation of flat style notebook class.
 // Author:      Eran Ifrah <eranif@bezeqint.net>
 // Modified by: Priyank Bolia <soft@priyank.in>
@@ -9,471 +9,10 @@
 // Licence:     wxWindows license <http://www.wxwidgets.org/licence3.txt>
 ///////////////////////////////////////////////////////////////////////////////
 
-namespace FNB
-{
-	////////////////////////////////////////////////////////////
-	// Images used by the control
-	////////////////////////////////////////////////////////////
-	/* XPM */
-	const char *left_arrow_disabled_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #555555",
-			"# c #000000",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````.```````",
-			"```````..```````",
-			"``````.`.```````",
-			"`````.``.```````",
-			"````.```.```````",
-			"`````.``.```````",
-			"``````.`.```````",
-			"```````..```````",
-			"````````.```````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````"
-	};
-
-	/* XPM */
-	const char *x_button_pressed_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #4766e0",
-			"# c #9e9ede",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"`..............`",
-			"`.############.`",
-			"`.############.`",
-			"`.############.`",
-			"`.###aa####aa#.`",
-			"`.####aa##aa##.`",
-			"`.#####aaaa###.`",
-			"`.######aa####.`",
-			"`.#####aaaa###.`",
-			"`.####aa##aa##.`",
-			"`.###aa####aa#.`",
-			"`.############.`",
-			"`..............`",
-			"````````````````",
-			"````````````````"
-	};
-
-
-	/* XPM */
-	const char *left_arrow_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #555555",
-			"# c #000000",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````.```````",
-			"```````..```````",
-			"``````...```````",
-			"`````....```````",
-			"````.....```````",
-			"`````....```````",
-			"``````...```````",
-			"```````..```````",
-			"````````.```````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````"
-	};
-
-	/* XPM */
-	const char *x_button_hilite_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #4766e0",
-			"# c #c9dafb",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"`..............`",
-			"`.############.`",
-			"`.############.`",
-			"`.##aa####aa##.`",
-			"`.###aa##aa###.`",
-			"`.####aaaa####.`",
-			"`.#####aa#####.`",
-			"`.####aaaa####.`",
-			"`.###aa##aa###.`",
-			"`.##aa####aa##.`",
-			"`.############.`",
-			"`.############.`",
-			"`..............`",
-			"````````````````",
-			"````````````````"
-	};
-
-	/* XPM */
-	const char *x_button_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #555555",
-			"# c #000000",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````..````..````",
-			"`````..``..`````",
-			"``````....``````",
-			"```````..```````",
-			"``````....``````",
-			"`````..``..`````",
-			"````..````..````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````"
-	};
-
-	/* XPM */
-	const char *left_arrow_pressed_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #4766e0",
-			"# c #9e9ede",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"`..............`",
-			"`.############.`",
-			"`.############.`",
-			"`.#######a####.`",
-			"`.######aa####.`",
-			"`.#####aaa####.`",
-			"`.####aaaa####.`",
-			"`.###aaaaa####.`",
-			"`.####aaaa####.`",
-			"`.#####aaa####.`",
-			"`.######aa####.`",
-			"`.#######a####.`",
-			"`..............`",
-			"````````````````",
-			"````````````````"
-	};
-
-	/* XPM */
-	const char *left_arrow_hilite_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #4766e0",
-			"# c #c9dafb",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"`..............`",
-			"`.############.`",
-			"`.######a#####.`",
-			"`.#####aa#####.`",
-			"`.####aaa#####.`",
-			"`.###aaaa#####.`",
-			"`.##aaaaa#####.`",
-			"`.###aaaa#####.`",
-			"`.####aaa#####.`",
-			"`.#####aa#####.`",
-			"`.######a#####.`",
-			"`.############.`",
-			"`..............`",
-			"````````````````",
-			"````````````````"
-	};
-
-	/* XPM */
-	const char *right_arrow_disabled_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #555555",
-			"# c #000000",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"```````.````````",
-			"```````..```````",
-			"```````.`.``````",
-			"```````.``.`````",
-			"```````.```.````",
-			"```````.``.`````",
-			"```````.`.``````",
-			"```````..```````",
-			"```````.````````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````"
-	};
-
-	/* XPM */
-	const char *right_arrow_hilite_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #4766e0",
-			"# c #c9dafb",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"`..............`",
-			"`.############.`",
-			"`.####a#######.`",
-			"`.####aa######.`",
-			"`.####aaa#####.`",
-			"`.####aaaa####.`",
-			"`.####aaaaa###.`",
-			"`.####aaaa####.`",
-			"`.####aaa#####.`",
-			"`.####aa######.`",
-			"`.####a#######.`",
-			"`.############.`",
-			"`..............`",
-			"````````````````",
-			"````````````````"
-	};
-
-	/* XPM */
-	const char *right_arrow_pressed_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #4766e0",
-			"# c #9e9ede",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"`..............`",
-			"`.############.`",
-			"`.############.`",
-			"`.#####a######.`",
-			"`.#####aa#####.`",
-			"`.#####aaa####.`",
-			"`.#####aaaa###.`",
-			"`.#####aaaaa##.`",
-			"`.#####aaaa###.`",
-			"`.#####aaa####.`",
-			"`.#####aa#####.`",
-			"`.#####a######.`",
-			"`..............`",
-			"````````````````",
-			"````````````````"
-	};
-
-
-	/* XPM */
-	const char *right_arrow_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #555555",
-			"# c #000000",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"```````.````````",
-			"```````..```````",
-			"```````...``````",
-			"```````....`````",
-			"```````.....````",
-			"```````....`````",
-			"```````...``````",
-			"```````..```````",
-			"```````.````````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````"
-	};
-
-	// Arrow down bitmaps
-	/* XPM */
-	const char *down_arrow_hilite_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #4766e0",
-			"# c #c9dafb",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"``.............`",
-			"``.###########.`",
-			"``.###########.`",
-			"``.###########.`",
-			"``.#aaaaaaaaa#.`",
-			"``.##aaaaaaa##.`",
-			"``.###aaaaa###.`",
-			"``.####aaa####.`",
-			"``.#####a#####.`",
-			"``.###########.`",
-			"``.###########.`",
-			"``.###########.`",
-			"``.............`",
-			"````````````````",
-			"````````````````"
-	};
-
-	/* XPM */
-	const char *down_arrow_pressed_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #4766e0",
-			"# c #9e9ede",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"``.............`",
-			"``.###########.`",
-			"``.###########.`",
-			"``.###########.`",
-			"``.###########.`",
-			"``.###########.`",
-			"``.#aaaaaaaaa#.`",
-			"``.##aaaaaaa##.`",
-			"``.###aaaaa###.`",
-			"``.####aaa####.`",
-			"``.#####a#####.`",
-			"``.###########.`",
-			"``.............`",
-			"````````````````",
-			"````````````````"
-	};
-
-
-	/* XPM */
-	const char *down_arrow_xpm[] = {
-		/* width height num_colors chars_per_pixel */
-		"    16    16        8            1",
-			/* colors */
-			"` c #008080",
-			". c #000000",
-			"# c #000000",
-			"a c #000000",
-			"b c #000000",
-			"c c #000000",
-			"d c #000000",
-			"e c #000000",
-			/* pixels */
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````.........```",
-			"`````.......````",
-			"``````.....`````",
-			"```````...``````",
-			"````````.```````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````",
-			"````````````````"
-	};
-
-	// Arrow down bitmaps
-
-	const int tab_x_size = 9;
-}
-
-#include "wxFlatNotebook.h"
-#include "renderer.h"
-#include "popup_dlg.h"
+
+#include <wx/wxFlatNotebook/wxFlatNotebook.h>
+#include <wx/wxFlatNotebook/renderer.h>
+#include <wx/wxFlatNotebook/popup_dlg.h>
 #include <algorithm>
 #include <wx/tooltip.h>
 #include <wx/tipwin.h>
@@ -547,7 +86,7 @@
 	tabHeight += 6;
 #endif
 	m_pages->SetSizeHints(wxSize(-1, tabHeight));
-
+	
 	// Add the tab container to the sizer
 	m_mainSizer->Insert(0, m_pages, 0, wxEXPAND);
 	m_mainSizer->Layout();
@@ -733,23 +272,20 @@
 	m_pages->DoSetSelection(page);
 }
 
-void wxFlatNotebook::DeletePage(size_t page, bool notify)
+void wxFlatNotebook::DeletePage(size_t page)
 {
 	if(page >= m_windows.GetCount())
 		return;
 
-	if (notify)
-	{
-		// Fire a closing event
-		wxFlatNotebookEvent event(wxEVT_COMMAND_FLATNOTEBOOK_PAGE_CLOSING, GetId());
-		event.SetSelection((int)page);
-		event.SetEventObject(this);
-		GetEventHandler()->ProcessEvent(event);
-
-		// The event handler allows it?
-		if (!event.IsAllowed())
-			return;
-	}
+	// Fire a closing event
+	wxFlatNotebookEvent event(wxEVT_COMMAND_FLATNOTEBOOK_PAGE_CLOSING, GetId());
+	event.SetSelection((int)page);
+	event.SetEventObject(this);
+	GetEventHandler()->ProcessEvent(event);
+
+	// The event handler allows it?
+	if (!event.IsAllowed())
+		return;
 
 	Freeze();
 
@@ -853,7 +389,7 @@
 			{
 				m_popupWin = new wxTabNavigatorWindow( this );
 				m_popupWin->ShowModal();
-				m_popupWin->Destroy();
+				m_popupWin->Destroy(); 
 				m_popupWin = NULL;
 			}
 			else
@@ -934,23 +470,20 @@
 	}
 }
 
-bool wxFlatNotebook::RemovePage(size_t page, bool notify)
+bool wxFlatNotebook::RemovePage(size_t page)
 {
 	if(page >= m_windows.GetCount())
 		return false;
 
-	if (notify)
-	{
-		// Fire a closing event
-		wxFlatNotebookEvent event(wxEVT_COMMAND_FLATNOTEBOOK_PAGE_CLOSING, GetId());
-		event.SetSelection((int)page);
-		event.SetEventObject(this);
-		GetEventHandler()->ProcessEvent(event);
-
-		// The event handler allows it?
-		if (!event.IsAllowed())
-			return false;
-	}
+	// Fire a closing event
+	wxFlatNotebookEvent event(wxEVT_COMMAND_FLATNOTEBOOK_PAGE_CLOSING, GetId());
+	event.SetSelection((int)page);
+	event.SetEventObject(this);
+	GetEventHandler()->ProcessEvent(event);
+
+	// The event handler allows it?
+	if (!event.IsAllowed())
+		return false;
 
 	Freeze();
 
@@ -1171,7 +704,6 @@
 
 	/// Create page info and add it to the vector
 	wxPageInfo pageInfo(caption, imgindex);
-	pageInfo.SetPosition(wxPoint(1,1));
 	m_pagesInfoVec.Add(pageInfo);
 	Refresh();
 }
@@ -1183,9 +715,7 @@
 		m_iPreviousActivePage = m_iActivePage;
 		m_iActivePage = (int)m_pagesInfoVec.GetCount();
 	}
-	wxPageInfo pg(text, imgindex);
-	pg.SetPosition(wxPoint(1,1));
-	m_pagesInfoVec.Insert(pg, index);
+	m_pagesInfoVec.Insert(wxPageInfo(text, imgindex), index);
 	Refresh();
 	return true;
 }
@@ -1209,16 +739,8 @@
 	{
 	case wxFNB_TAB:
 		{
-			wxFlatNotebookEvent event(wxEVT_COMMAND_FLATNOTEBOOK_PAGE_CLOSING, GetParent()->GetId());
-			event.SetSelection(tabIdx);
-			event.SetEventObject(GetParent());
-			GetParent()->GetEventHandler()->ProcessEvent(event);
-			if (event.IsAllowed())
-			{
-				// Set the current tab to be active
-				SetSelection((size_t)tabIdx);
-				DeletePage((size_t)tabIdx, false);
-			}
+			DeletePage((size_t)tabIdx);
+			break;
 		}
 	default:
 		break;
@@ -1228,37 +750,40 @@
 
 void wxPageContainer::OnRightDown(wxMouseEvent& event)
 {
-	wxPageInfo pgInfo;
-	int tabIdx;
-	int where = HitTest(event.GetPosition(), pgInfo, tabIdx);
-	switch(where)
+	if(m_pRightClickMenu)
 	{
-	case wxFNB_TAB:
-	case wxFNB_TAB_X:
+		wxPageInfo pgInfo;
+		int tabIdx;
+		int where = HitTest(event.GetPosition(), pgInfo, tabIdx);
+		switch(where)
 		{
-			if(!m_pagesInfoVec[tabIdx].GetEnabled())
-				break;
+		case wxFNB_TAB:
+		case wxFNB_TAB_X:
+			{
+				if(!m_pagesInfoVec[tabIdx].GetEnabled())
+					break;
 
-			// Set the current tab to be active
-			SetSelection((size_t)tabIdx);
+				// Set the current tab to be active
+				SetSelection((size_t)tabIdx);
 
-			// If the owner has defined a context menu for the tabs,
-			// popup the right click menu
-			if (m_pRightClickMenu)
-				PopupMenu(m_pRightClickMenu);
-			else
-			{
-				// send a message to popup a custom menu
-				wxFlatNotebookEvent event(wxEVT_COMMAND_FLATNOTEBOOK_CONTEXT_MENU, GetParent()->GetId());
-				event.SetSelection((int)tabIdx);
-				event.SetOldSelection((int)m_iActivePage);
-				event.SetEventObject(GetParent());
-				GetParent()->GetEventHandler()->ProcessEvent(event);
+				// If the owner has defined a context menu for the tabs,
+				// popup the right click menu
+				if (m_pRightClickMenu)
+					PopupMenu(m_pRightClickMenu);
+				else
+				{
+					// send a message to popup a custom menu
+					wxFlatNotebookEvent event(wxEVT_COMMAND_FLATNOTEBOOK_CONTEXT_MENU, GetParent()->GetId());
+					event.SetSelection((int)tabIdx);
+					event.SetOldSelection((int)m_iActivePage);
+					event.SetEventObject(GetParent());
+					GetParent()->GetEventHandler()->ProcessEvent(event);
+				}
 			}
+			break;
+		default:
+			break;
 		}
-		break;
-	default:
-		break;
 	}
 	event.Skip();
 }
@@ -1431,7 +956,7 @@
 int wxPageContainer::HitTest(const wxPoint& pt, wxPageInfo& pageInfo, int &tabIdx)
 {
 	wxFNBRendererPtr render = wxFNBRendererMgrST::Get()->GetRenderer( GetParent()->GetWindowStyleFlag() );
-
+	
 	wxRect rect = GetClientRect();
 	int btnLeftPos = render->GetLeftButtonPos(this);
 	int btnRightPos = render->GetRightButtonPos(this);
@@ -1505,7 +1030,7 @@
 				}
 			}
 
-			wxRect tabRect = wxRect(pgInfo.GetPosition().x, pgInfo.GetPosition().y,
+			wxRect tabRect = wxRect(pgInfo.GetPosition().x, pgInfo.GetPosition().y, 
 				pgInfo.GetSize().x, pgInfo.GetSize().y);
 			if(tabRect.Inside(pt))
 			{
@@ -1577,10 +1102,10 @@
 	}
 }
 
-void wxPageContainer::DeletePage(size_t page, bool notify)
+void wxPageContainer::DeletePage(size_t page)
 {
 	wxFlatNotebook* book = (wxFlatNotebook*)GetParent();
-	book->DeletePage(page, notify);
+	book->DeletePage(page);
 	book->Refresh();
 }
 
@@ -1598,7 +1123,7 @@
 	wxFlatNotebook* book = (wxFlatNotebook*)GetParent();
 	m_pagesInfoVec.RemoveAt(page);
 
-	// Thanks to Yiannis AKA Mandrav
+	// Thanks to Yiaanis AKA Mandrav
 	if (m_iActivePage >= (int)page)
 	{
 		m_iActivePage--;
@@ -1744,7 +1269,7 @@
 		const bool bRedrawRight = m_nRightButtonStatus != rightButtonStatus;
 		const bool bRedrawLeft = m_nLeftButtonStatus != leftButtonStatus;
 		const bool bRedrawTabX = m_nTabXButtonStatus != xTabButtonStatus;
-
+		
 		wxFNBRendererPtr render = wxFNBRendererMgrST::Get()->GetRenderer( GetParent()->GetWindowStyleFlag() );
 
 		if (bRedrawX || bRedrawRight || bRedrawLeft || bRedrawTabX || bRedrawDropArrow)
@@ -1971,7 +1496,7 @@
 			}
 		}
 	}
-	else if (GetParent()->GetWindowStyleFlag() & wxFNB_ALLOW_FOREIGN_DND)
+	else
 	{
 #if defined(__WXMSW__) || defined(__WXGTK__)
 		if(nTabPage >= 0)
@@ -2052,7 +1577,7 @@
 
 	if( !HasFlag( wxFNB_VC8 ) )
 	{
-
+		
 		wxRect rect = GetClientRect();
 		int clientWidth = rect.width;
 		int tabHeight = render->CalcTabHeight( this );
diff -u -r D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/wxFlatNotebook.h D:\projects\CodeBlocks(commit)\src\sdk\2FNB/wxFlatNotebook.h
--- D:\projects\CodeBlocks(commit)\src\sdk\wxFlatNotebook/wxFlatNotebook.h	Wed Oct 11 09:43:28 2006
+++ D:\projects\CodeBlocks(commit)\src\sdk\2FNB/wxFlatNotebook.h	Sat Oct  7 01:32:48 2006
@@ -1,5 +1,5 @@
 ///////////////////////////////////////////////////////////////////////////////
-// Name:		wxFlatNotebook.cpp
+// Name:		wxFlatNotebook.cpp 
 // Purpose:     generic implementation of flat style notebook class.
 // Author:      Eran Ifrah <eranif@bezeqint.net>
 // Modified by: Priyank Bolia <soft@priyank.in>
@@ -37,7 +37,7 @@
 #include <wx/dataobj.h>
 #include <wx/dnd.h>
 
-#include "wxFNBDropTarget.h"
+#include <wx/wxFlatNotebook/wxFNBDropTarget.h>
 
 class wxPageContainer;
 
@@ -73,7 +73,6 @@
 #define wxFNB_MOUSE_MIDDLE_CLOSES_TABS	0x00000020
 #define wxFNB_BOTTOM					0x00000040
 #define wxFNB_NODRAG					0x00000080
-#define wxFNB_ALLOW_FOREIGN_DND			0x00000080
 #define wxFNB_VC8						0x00000100
 #define wxFNB_X_ON_TAB					0x00000200
 #define wxFNB_BACKGROUND_GRADIENT		0x00000400
@@ -147,7 +146,7 @@
 	/**
 	\param page - index of page to be deleted
 	*/
-	void DeletePage(size_t page, bool notify = true);
+	void DeletePage(size_t page);
 
 	/// Deletes all notebook pages and destroys all windows associated with pages
 	bool DeleteAllPages();
@@ -174,7 +173,7 @@
 
 	/**
 	* Return the previous selection, useful when implementing smart tabulation
-	* \return previous selection, or wxNOT_FOUND
+	* \return previous selection, or wxNOT_FOUND 
 	*/
 	int GetPreviousSelection() const;
 
@@ -210,7 +209,7 @@
 	/**
 	\param page - page index to be removed
 	*/
-	bool RemovePage(size_t page, bool notify = true);
+	bool RemovePage(size_t page);
 
 	/// Sets the amount of space around each page's icon and label, in pixels.
 	/**
@@ -718,7 +717,7 @@
 	virtual void ShowTabTooltip(int tabIdx);
 
 	/// A wrapper from calling the DoDeletePage()
-	virtual void DeletePage(size_t page, bool notify = true);
+	virtual void DeletePage(size_t page);
 
 	/// Remove all pages from the container (it also deletes them)
 	virtual void DeleteAllPages();
@@ -872,21 +871,460 @@
 	// Images used by the control
 	////////////////////////////////////////////////////////////
 	/* XPM */
-	extern const char *left_arrow_disabled_xpm[];
-	extern const char *x_button_pressed_xpm[];
-	extern const char *left_arrow_xpm[];
-	extern const char *x_button_hilite_xpm[];
-	extern const char *x_button_xpm[];
-	extern const char *left_arrow_pressed_xpm[];
-	extern const char *left_arrow_hilite_xpm[];
-	extern const char *right_arrow_disabled_xpm[];
-	extern const char *right_arrow_hilite_xpm[];
-	extern const char *right_arrow_pressed_xpm[];
-	extern const char *right_arrow_xpm[];
-	extern const char *down_arrow_hilite_xpm[];
-	extern const char *down_arrow_pressed_xpm[];
-	extern const char *down_arrow_xpm[];
-	extern const int tab_x_size;
+	static char *left_arrow_disabled_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #555555",
+			"# c #000000",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````.```````",
+			"```````..```````",
+			"``````.`.```````",
+			"`````.``.```````",
+			"````.```.```````",
+			"`````.``.```````",
+			"``````.`.```````",
+			"```````..```````",
+			"````````.```````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````"
+	};
+
+	/* XPM */
+	static char *x_button_pressed_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #4766e0",
+			"# c #9e9ede",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"`..............`",
+			"`.############.`",
+			"`.############.`",
+			"`.############.`",
+			"`.###aa####aa#.`",
+			"`.####aa##aa##.`",
+			"`.#####aaaa###.`",
+			"`.######aa####.`",
+			"`.#####aaaa###.`",
+			"`.####aa##aa##.`",
+			"`.###aa####aa#.`",
+			"`.############.`",
+			"`..............`",
+			"````````````````",
+			"````````````````"
+	};
+
+
+	/* XPM */
+	static char *left_arrow_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #555555",
+			"# c #000000",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````.```````",
+			"```````..```````",
+			"``````...```````",
+			"`````....```````",
+			"````.....```````",
+			"`````....```````",
+			"``````...```````",
+			"```````..```````",
+			"````````.```````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````"
+	};
+
+	/* XPM */
+	static char *x_button_hilite_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #4766e0",
+			"# c #c9dafb",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"`..............`",
+			"`.############.`",
+			"`.############.`",
+			"`.##aa####aa##.`",
+			"`.###aa##aa###.`",
+			"`.####aaaa####.`",
+			"`.#####aa#####.`",
+			"`.####aaaa####.`",
+			"`.###aa##aa###.`",
+			"`.##aa####aa##.`",
+			"`.############.`",
+			"`.############.`",
+			"`..............`",
+			"````````````````",
+			"````````````````"
+	};
+
+	/* XPM */
+	static char *x_button_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #555555",
+			"# c #000000",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````..````..````",
+			"`````..``..`````",
+			"``````....``````",
+			"```````..```````",
+			"``````....``````",
+			"`````..``..`````",
+			"````..````..````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````"
+	};
+
+	/* XPM */
+	static char *left_arrow_pressed_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #4766e0",
+			"# c #9e9ede",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"`..............`",
+			"`.############.`",
+			"`.############.`",
+			"`.#######a####.`",
+			"`.######aa####.`",
+			"`.#####aaa####.`",
+			"`.####aaaa####.`",
+			"`.###aaaaa####.`",
+			"`.####aaaa####.`",
+			"`.#####aaa####.`",
+			"`.######aa####.`",
+			"`.#######a####.`",
+			"`..............`",
+			"````````````````",
+			"````````````````"
+	};
+
+	/* XPM */
+	static char *left_arrow_hilite_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #4766e0",
+			"# c #c9dafb",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"`..............`",
+			"`.############.`",
+			"`.######a#####.`",
+			"`.#####aa#####.`",
+			"`.####aaa#####.`",
+			"`.###aaaa#####.`",
+			"`.##aaaaa#####.`",
+			"`.###aaaa#####.`",
+			"`.####aaa#####.`",
+			"`.#####aa#####.`",
+			"`.######a#####.`",
+			"`.############.`",
+			"`..............`",
+			"````````````````",
+			"````````````````"
+	};
+
+	/* XPM */
+	static char *right_arrow_disabled_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #555555",
+			"# c #000000",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"```````.````````",
+			"```````..```````",
+			"```````.`.``````",
+			"```````.``.`````",
+			"```````.```.````",
+			"```````.``.`````",
+			"```````.`.``````",
+			"```````..```````",
+			"```````.````````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````"
+	};
+
+	/* XPM */
+	static char *right_arrow_hilite_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #4766e0",
+			"# c #c9dafb",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"`..............`",
+			"`.############.`",
+			"`.####a#######.`",
+			"`.####aa######.`",
+			"`.####aaa#####.`",
+			"`.####aaaa####.`",
+			"`.####aaaaa###.`",
+			"`.####aaaa####.`",
+			"`.####aaa#####.`",
+			"`.####aa######.`",
+			"`.####a#######.`",
+			"`.############.`",
+			"`..............`",
+			"````````````````",
+			"````````````````"
+	};
+
+	/* XPM */
+	static char *right_arrow_pressed_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #4766e0",
+			"# c #9e9ede",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"`..............`",
+			"`.############.`",
+			"`.############.`",
+			"`.#####a######.`",
+			"`.#####aa#####.`",
+			"`.#####aaa####.`",
+			"`.#####aaaa###.`",
+			"`.#####aaaaa##.`",
+			"`.#####aaaa###.`",
+			"`.#####aaa####.`",
+			"`.#####aa#####.`",
+			"`.#####a######.`",
+			"`..............`",
+			"````````````````",
+			"````````````````"
+	};
+
+
+	/* XPM */
+	static char *right_arrow_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #555555",
+			"# c #000000",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"```````.````````",
+			"```````..```````",
+			"```````...``````",
+			"```````....`````",
+			"```````.....````",
+			"```````....`````",
+			"```````...``````",
+			"```````..```````",
+			"```````.````````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````"
+	};
+
+	// Arrow down bitmaps
+	/* XPM */
+	static char *down_arrow_hilite_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #4766e0",
+			"# c #c9dafb",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"``.............`",
+			"``.###########.`",
+			"``.###########.`",
+			"``.###########.`",
+			"``.#aaaaaaaaa#.`",
+			"``.##aaaaaaa##.`",
+			"``.###aaaaa###.`",
+			"``.####aaa####.`",
+			"``.#####a#####.`",
+			"``.###########.`",
+			"``.###########.`",
+			"``.###########.`",
+			"``.............`",
+			"````````````````",
+			"````````````````"
+	};
+
+	/* XPM */
+	static char *down_arrow_pressed_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #4766e0",
+			"# c #9e9ede",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"``.............`",
+			"``.###########.`",
+			"``.###########.`",
+			"``.###########.`",
+			"``.###########.`",
+			"``.###########.`",
+			"``.#aaaaaaaaa#.`",
+			"``.##aaaaaaa##.`",
+			"``.###aaaaa###.`",
+			"``.####aaa####.`",
+			"``.#####a#####.`",
+			"``.###########.`",
+			"``.............`",
+			"````````````````",
+			"````````````````"
+	};
+
+
+	/* XPM */
+	static char *down_arrow_xpm[] = {
+		/* width height num_colors chars_per_pixel */
+		"    16    16        8            1",
+			/* colors */
+			"` c #008080",
+			". c #000000",
+			"# c #000000",
+			"a c #000000",
+			"b c #000000",
+			"c c #000000",
+			"d c #000000",
+			"e c #000000",
+			/* pixels */
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````.........```",
+			"`````.......````",
+			"``````.....`````",
+			"```````...``````",
+			"````````.```````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````",
+			"````````````````"
+	};	
+
+	// Arrow down bitmaps
+
+	const int tab_x_size = 9;
 }
 
 //////////////////////////////////////////////////////////////////////////////////////////////////
