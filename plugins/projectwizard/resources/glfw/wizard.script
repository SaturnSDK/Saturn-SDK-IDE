////////////////////////////////////////////////////////////////////////////////
//
// GLFW project wizard
//
////////////////////////////////////////////////////////////////////////////////

// globals
GlfwPath <- _T("");

function BeginWizard()
{
    local intro_msg = _T("Welcome to the new GLFW project wizard!\n\n" +
                         "This wizard will guide you to create a new project\n" +
                         "using the GLFW OpenGL extensions.\n\n" +
                         "When you 're ready to proceed, please click \"Next\"...");

    Wizard.AddIntroPage(intro_msg);
    Wizard.AddProjectPathPage();
    Wizard.AddPage(_T("GlfwPath"));
    Wizard.AddCompilerPage(_T(""), _T("*"), true, true);
}

////////////////////////////////////////////////////////////////////////////////
// GLFW's path page
////////////////////////////////////////////////////////////////////////////////

function OnEnter_GlfwPath(fwd)
{
    if (fwd)
    {
        local dir = Wizard.GetTextControlValue(_T("txtGlfwPath"));
        if (dir.length() == 0)
        {
            // first time here, set default value
            dir = ConfigManager.Read(_T("/glfw_project_wizard/path"), _T(""));
            if (dir.IsEmpty()) // try global var
                dir = ReplaceMacros(_T("$(#glfw)"), true);
            Wizard.SetTextControlValue(_T("txtGlfwPath"), dir);
        }
    }
}

function OnLeave_GlfwPath(fwd)
{
    if (fwd)
    {
        local dir = Wizard.GetTextControlValue(_T("txtGlfwPath"));
        if (!IO.DirectoryExists(dir))
        {
            ShowError(_T("Please select a valid path to GLFW..."));
            return false;
        }
        if (!IO.FileExists(dir + _T("/include/GL/glfw.h")))
        {
            ShowError(_T("The path you entered seems valid, but this wizard " +
                         "can't locate GLFW's files in it..."));
            return false;
        }

        // see if it matches the global var. if it does, use the var instead...
        local gvar = ReplaceMacros(_T("$(#glfw)"), true);
        if (gvar.Matches(dir))
            dir = gvar;
        GlfwPath = dir;
        ConfigManager.Write(_T("/glfw_project_wizard/path"), dir, true);
    }
    return true;
}

function OnClick_btnGlfwPathBrowse()
{
    local dir = Wizard.GetTextControlValue(_T("txtGlfwPath"));
    dir = IO.SelectDirectory(_T("Please select GLFW's top-level folder"), dir, false);

    if (IO.DirectoryExists(dir))
        Wizard.SetTextControlValue(_T("txtGlfwPath"), dir);
}

// return the files this project contains
function GetFilesDir()
{
    return _T("glfw/files");
}

// setup the already created project
function SetupProject(project)
{
    // set project options
    
    // set compiler/linker search paths
    project.AddIncludeDir(GlfwPath + _T("/include"));
    project.AddLibDir(GlfwPath + _T("/lib"));

    // add link libraries
    project.AddLinkLib(_T("glfw"));
    if (PLATFORM == PLATFORM_MSW)
    {
        project.AddLinkLib(_T("opengl32"));
        project.AddLinkLib(_T("glu32"));
        project.AddLinkLib(_T("gdi32"));
    }
    else
    {
        project.AddLinkLib(_T("GL"));
        project.AddLinkLib(_T("GLU"));
        project.AddLinkLib(_T("pthread"));
        project.AddLinkLib(_T("Xxf86vm"));
    }

    // enable compiler warnings (project-wide)
    WarningsOn(project, Wizard.GetCompilerID());

    // Debug
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        target.SetWorkingDir(GlfwPath + _T("/bin"));
        // enable generation of debugging symbols for target
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }

    // Release
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        target.SetWorkingDir(GlfwPath + _T("/bin"));
        // enable optimizations for target
        OptimizationsOn(target, Wizard.GetCompilerID());
    }

    return true;
}
