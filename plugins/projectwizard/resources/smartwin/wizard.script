////////////////////////////////////////////////////////////////////////////////
//
// Smartwin project wizard
//
////////////////////////////////////////////////////////////////////////////////

// globals
SmartwinPath <- _T("");

function BeginWizard()
{
    local intro_msg = _T("Welcome to the new Smartwin project wizard!\n\n" +
                         "This wizard will guide you to create a new project\n" +
                         "using the Smartwin GUI C++ library.\n\n" +
                         "When you 're ready to proceed, please click \"Next\"...");


    local swpath_descr = _T("Please select the location of SmartWin on your computer.\n" +
                                "This is the top-level folder where SmartWin was installed\n(unpacked).\n" +
                                "To help you, this folder must contain the subfolders\n" +
                                "\"include\" and \"lib\".");

    Wizard.AddIntroPage(intro_msg);
    Wizard.AddProjectPathPage();
    Wizard.AddGenericSelectPathPage(_T("SmartwinPath"), swpath_descr, _T("Please select SmartWin's location:"), _T("$(#sw)"));
    Wizard.AddCompilerPage(_T(""), _T("*"), true, true);
}

////////////////////////////////////////////////////////////////////////////////
// Smartwin's path page
////////////////////////////////////////////////////////////////////////////////

function OnLeave_SmartwinPath(fwd)
{
    if (fwd)
    {
        local dir = Wizard.GetTextControlValue(_T("txtFolder"));
        if (!IO.FileExists(dir + _T("/include/SmartWin.h")))
        {
            ShowError(_T("The path you entered seems valid, but this wizard " +
                         "can't locate Smartwin's files in it..."));
            return false;
        }

        // see if it matches the global var. if it does, use the var instead...
        if (GetUserVariableManager().Exists(_T("#sw")))
        {
            local gvar = ReplaceMacros(_T("$(#sw)"), true);
            if (gvar.Matches(dir))
                dir = gvar;
        }
        SmartwinPath = dir;
    }
    return true;
}

// return the files this project contains
function GetFilesDir()
{
    return _T("smartwin/files");
}

// setup the already created project
function SetupProject(project)
{
    // set project options

    // set compiler/linker search paths
    project.AddIncludeDir(SmartwinPath + _T("/include"));
    project.AddLibDir(SmartwinPath + _T("/lib"));

    // add link libraries
    project.AddLinkLib(_T("smartwin"));
    project.AddLinkLib(_T("comctl32"));
    project.AddLinkLib(_T("gdi32"));
    project.AddLinkLib(_T("user32"));
    project.AddLinkLib(_T("kernel32"));

    // This has to be done to disable the "-I-" compiler switch which
    // would break the compilation of any Smartwin application.
    project.SetModeForPCH(pchSourceDir); // pch dir

    // Debug
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        if (Wizard.GetCompilerID() == _T("gcc"))
        {
            // enable generation of debugging symbols for target
            // Note: DebugSymbolsOn() won't work because -Wall produces far too many warnings
            target.AddCompilerOption(_T("-g"));
        }
    }

    // Release
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        if (Wizard.GetCompilerID() == _T("gcc"))
        {
            // enable optimizations for target.
            // Note: OptimizationsOn() won't work because of -I-!
            target.AddCompilerOption(_T("-O2"));
            target.AddCompilerOption(_T("-s"));
        }
    }

    return true;
}
