////////////////////////////////////////////////////////////////////////////////
//
// Code::Blocks new project wizard script
//
// Project: D application
// Author:  Yiannis Mandravellos
//
////////////////////////////////////////////////////////////////////////////////

void BeginWizard()
{
    // this is the text that will appear in the start (intro) page
    wxString intro_msg = "Welcome to the new D application wizard!\n"
                        "This wizard will guide you to create a new D application.\n\n"
                        "When you 're ready to proceed, please click \"Next\"...";

    // add builtin pages
	Wizard.AddIntroPage(intro_msg); // intro
	Wizard.AddProjectPathPage(); // select project name and path
	Wizard.AddCompilerPage("dmd"); // select compiler and configurations (the argument can be a compiler ID)
	// nothing more needs to be done here
}

bool GetFilesDir(wxString& inout result)
{
    result = "d/console";
    return true;
}

bool SetupProject(Project@ project)
{
    if (Wizard.GetCompilerID() != "dmd" && Wizard.GetCompilerID() != "gdc")
        ShowWarning("You have selected a compiler which might not be able to compile D programs.\n"
                    "You 're on your own...");

    // enable compiler warnings (project-wide)
    WarningsOn(Cast_CompileOptionsBase(project), Wizard.GetCompilerID());

    // Debug build target
    BuildTarget@ target = project.GetBuildTarget(Wizard.GetDebugName());
    if (target != null)
    {
        target.SetTargetType(ttConsoleOnly);
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable generation of debugging symbols for target
        DebugSymbolsOn(Cast_CompileOptionsBase(target), Wizard.GetCompilerID());
    }

    // Release build target
    @target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (target != null)
    {
        target.SetTargetType(ttConsoleOnly);
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        // enable optimizations for target
        OptimizationsOn(Cast_CompileOptionsBase(target), Wizard.GetCompilerID());
    }

    return true;
}
