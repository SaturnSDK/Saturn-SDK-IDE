////////////////////////////////////////////////////////////////////////////////
//
// FLTK project wizard
//
////////////////////////////////////////////////////////////////////////////////

// globals
FltkPath <- _T("");

function BeginWizard()
{
    local intro_msg = _T("Welcome to the new FLTK project wizard!\n\n" +
                         "This wizard will guide you to create a new project\n" +
                         "using the FLTK GUI C++ library.\n\n" +
                         "When you 're ready to proceed, please click \"Next\"...");

    local fltkpath_descr = _T("Please select the location of FLTK on your computer.\n" +
                              "This is the top-level folder where FLTK was installed (unpacked).\n" +
                              "To help you, this folder must contain the subfolders\n" +
                              "\"include\" and \"lib\".");

    Wizard.AddInfoPage(_T("FltkIntro"), intro_msg);
    Wizard.AddProjectPathPage();
    Wizard.AddGenericSelectPathPage(_T("FltkPath"), fltkpath_descr, _T("Please select FLTK's location:"), _T("$(#fltk)"));
    Wizard.AddCompilerPage(_T(""), _T("*"), true, true);
}

////////////////////////////////////////////////////////////////////////////////
// FLTK's path page
////////////////////////////////////////////////////////////////////////////////

function OnLeave_FltkPath(fwd)
{
    if (fwd)
    {
        local dir = Wizard.GetTextControlValue(_T("txtFolder")); // txtFolder is the text control in GenericSelectPathPage
        dir_nomacro = ReplaceMacros(dir, true);
        if (!IO.FileExists(dir_nomacro + _T("/include/FL/Fl.H")))
        {
            ShowError(_T("The path you entered seems valid, but this wizard " +
                         "can't locate FLTK's files in it..."));
            return false;
        }

        FltkPath = dir;
    }
    return true;
}

// return the files this project contains
function GetFilesDir()
{
    return _T("fltk/files");
}

// setup the already created project
function SetupProject(project)
{
    // set project options
    local gvar = ReplaceMacros(_T("$(#fl"), true);

    // set compiler/linker search paths
    // see if the FLTK SDK matches the global var. if it does, use the var instead...
    if (gvar.Matches(FltkPath))
    {
        project.AddIncludeDir(_T("$(#fl.include)"));
        project.AddLibDir(_T("$(#fl.lib)"));
    }
    else
    {
        project.AddIncludeDir(FltkPath + _T("/include"));
        project.AddLibDir(FltkPath + _T("/lib"));
    }

    // add link libraries
    project.AddLinkLib(_T("fltk"));
    project.AddLinkLib(_T("ole32"));
    project.AddLinkLib(_T("uuid"));
    project.AddLinkLib(_T("comctl32"));
    project.AddLinkLib(_T("wsock32"));
    project.AddLinkLib(_T("m"));
    project.AddLinkLib(_T("gdi32"));
    project.AddLinkLib(_T("user32"));
    project.AddLinkLib(_T("kernel32"));

    project.AddCompilerOption(_T("-DWIN32"))
    project.AddCompilerOption(_T("-mms-bitfields"))

    // Debug
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        if (Wizard.GetCompilerID().Matches(_T("gcc")))
        {
            // enable generation of debugging symbols for target
            // Note: DebugSymbolsOn() won't work because -Wall produces far too many warnings
            target.AddCompilerOption(_T("-g"));
        }
    }

    // Release
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        if (Wizard.GetCompilerID().Matches(_T("gcc")))
        {
            // enable optimizations for target.
            // Note: OptimizationsOn() won't work because of -I-!
            target.AddCompilerOption(_T("-O2"));
            target.AddCompilerOption(_T("-s"));
        }
    }

    return true;
}
