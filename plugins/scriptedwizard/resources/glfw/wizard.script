////////////////////////////////////////////////////////////////////////////////
//
// GLFW project wizard
//
////////////////////////////////////////////////////////////////////////////////

// globals
GlfwPath <- _T("");

function BeginWizard()
{
    local intro_msg = _T("Welcome to the new GLFW project wizard!\n\n" +
                         "This wizard will guide you to create a new project\n" +
                         "using the GLFW OpenGL extensions.\n\n" +
                         "When you 're ready to proceed, please click \"Next\"...");

    local glfwpath_descr = _T("Please select the location of GLFW on your computer.\n" +
                              "This is the top-level folder where GLFW was installed (unpacked).\n" +
                              "To help you, this folder must contain the subfolders\n" +
                              "\"include\" and \"lib\".");

    Wizard.AddInfoPage(_T("GlfwIntro"), intro_msg);
    Wizard.AddProjectPathPage();
    Wizard.AddGenericSelectPathPage(_T("GlfwPath"), glfwpath_descr, _T("Please select GLFW's location:"), _T("$(#glfw)"));
    Wizard.AddCompilerPage(_T(""), _T("*"), true, true);
}

////////////////////////////////////////////////////////////////////////////////
// GLFW's path page
////////////////////////////////////////////////////////////////////////////////

function OnLeave_GlfwPath(fwd)
{
    if (fwd)
    {
        local dir = Wizard.GetTextControlValue(_T("txtFolder")); // txtFolder is the text control in GenericSelectPathPage
        if (!IO.FileExists(dir + _T("/include/GL/glfw.h")))
        {
            ShowError(_T("The path you entered seems valid, but this wizard " +
                         "can't locate GLFW's files in it..."));
            return false;
        }

        GlfwPath = dir;
    }
    return true;
}

// return the files this project contains
function GetFilesDir()
{
    return _T("glfw/files");
}

// setup the already created project
function SetupProject(project)
{
    // set project options
    local gvar = ReplaceMacros(_T("$(#glfw"), true);

    // set compiler/linker search paths
    // see if the GLFW SDK matches the global var. if it does, use the var instead...
    if (gvar.Matches(GlfwPath))
    {
        project.AddIncludeDir(_T("$(#glfw.include)"));
        project.AddLibDir(_T("$(#glfw.lib)"));
    }
    else
    {
        project.AddIncludeDir(GlfwPath + _T("/include"));
        project.AddLibDir(GlfwPath + _T("/lib"));
    }

    // add link libraries
    project.AddLinkLib(_T("glfw"));
    if (PLATFORM == PLATFORM_MSW)
    {
        project.AddLinkLib(_T("opengl32"));
        project.AddLinkLib(_T("glu32"));
        project.AddLinkLib(_T("gdi32"));
    }
    else
    {
        project.AddLinkLib(_T("GL"));
        project.AddLinkLib(_T("GLU"));
        project.AddLinkLib(_T("pthread"));
        project.AddLinkLib(_T("Xxf86vm"));
    }

    // enable compiler warnings (project-wide)
    WarningsOn(project, Wizard.GetCompilerID());

    // Debug
    local target = project.GetBuildTarget(Wizard.GetDebugName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttConsoleOnly); // ttConsoleOnly: console for debugging
        target.SetOutputFilename(Wizard.GetDebugOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        target.SetWorkingDir(GlfwPath + _T("/bin"));
        // enable generation of debugging symbols for target
        DebugSymbolsOn(target, Wizard.GetCompilerID());
    }

    // Release
    target = project.GetBuildTarget(Wizard.GetReleaseName());
    if (!IsNull(target))
    {
        target.SetTargetType(ttExecutable); // ttExecutable: no console
        target.SetOutputFilename(Wizard.GetReleaseOutputDir() + Wizard.GetProjectName() + DOT_EXT_EXECUTABLE);
        target.SetWorkingDir(GlfwPath + _T("/bin"));
        // enable optimizations for target
        OptimizationsOn(target, Wizard.GetCompilerID());
    }

    return true;
}
