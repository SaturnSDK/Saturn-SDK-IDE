<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>wxPropertyGrid: manager.h Source File</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.3.6 -->
<div class="qindex"><a class="qindex" href="index.htm">Main&nbsp;Page</a> | <a class="qindex" href="modules.htm">Modules</a> | <a class="qindex" href="hierarchy.htm">Class&nbsp;Hierarchy</a> | <a class="qindex" href="annotated.htm">Class&nbsp;List</a> | <a class="qindex" href="files.htm">File&nbsp;List</a> | <a class="qindex" href="functions.htm">Class&nbsp;Members</a></div>
<h1>manager.h</h1><div class="fragment"><pre>00001 
00002 <span class="comment">// Name:        manager.h</span>
00003 <span class="comment">// Purpose:     wxPropertyGridManager</span>
00004 <span class="comment">// Author:      Jaakko Salli</span>
00005 <span class="comment">// Modified by:</span>
00006 <span class="comment">// Created:     Jan-14-2005</span>
00007 <span class="comment">// RCS-ID:      $Id:</span>
00008 <span class="comment">// Copyright:   (c) Jaakko Salli</span>
00009 <span class="comment">// Licence:     wxWindows license</span>
00011 <span class="comment"></span>
00012 <span class="preprocessor">#ifndef _WX_PROPGRID_MANAGER_H_</span>
00013 <span class="preprocessor"></span><span class="preprocessor">#define _WX_PROPGRID_MANAGER_H_</span>
00014 <span class="preprocessor"></span>
00015 <span class="preprocessor">#if defined(__GNUG__) &amp;&amp; !defined(NO_GCC_PRAGMA)</span>
00016 <span class="preprocessor"></span><span class="preprocessor">    #pragma interface "manager.cpp"</span>
00017 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00018 <span class="preprocessor"></span>
00019 <span class="preprocessor">#include &lt;wx/propgrid/propgrid.h&gt;</span>
00020 
00021 <span class="comment">// -----------------------------------------------------------------------</span>
00022 
00023 <span class="keyword">extern</span> WXDLLIMPEXP_PG <span class="keyword">const</span> wxChar *wxPropertyGridManagerNameStr;
00024 
00025 <span class="comment">// -----------------------------------------------------------------------</span>
00026 
00027 <span class="comment">// This is for mirroring wxPropertyGrid methods with ease.</span>
00028 <span class="comment">// Needs to be in hear because of inlines.</span>
00029 <span class="preprocessor">#define wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(NAME,AT1) \</span>
00030 <span class="preprocessor">wxPG_IPAM_DECL void wxPropertyGridManager::NAME ( wxPGId id, AT1 _av1_ ) \</span>
00031 <span class="preprocessor">{ \</span>
00032 <span class="preprocessor">    wxPGProperty* p = wxPGIdToPtr(id); \</span>
00033 <span class="preprocessor">    wxPropertyGridState* pState = p-&gt;GetParentState(); \</span>
00034 <span class="preprocessor">    wxASSERT ( pState != (wxPropertyGridState*) NULL ); \</span>
00035 <span class="preprocessor">    if ( pState == m_propGrid.m_pState ) m_propGrid.NAME(id,_av1_); \</span>
00036 <span class="preprocessor">    else pState-&gt;NAME(p,_av1_); \</span>
00037 <span class="preprocessor">} \</span>
00038 <span class="preprocessor">wxPG_IPAM_DECL void wxPropertyGridManager::NAME ( wxPGNameStr name, AT1 _av1_ ) \</span>
00039 <span class="preprocessor">{ \</span>
00040 <span class="preprocessor">    wxPropertyGridState* pState; \</span>
00041 <span class="preprocessor">    wxPGId id = GetPropertyByName2(name,&amp;pState); \</span>
00042 <span class="preprocessor">    wxASSERT ( pState != (wxPropertyGridState*) NULL ); \</span>
00043 <span class="preprocessor">    if ( pState == m_propGrid.m_pState ) m_propGrid.NAME(id,_av1_); \</span>
00044 <span class="preprocessor">    else pState-&gt;NAME(wxPGIdToPtr(id),_av1_); \</span>
00045 <span class="preprocessor">}</span>
00046 <span class="preprocessor"></span>
00047 <span class="keyword">class </span>wxPropertyGridPageData;
00048 
00049 <span class="preprocessor">#define wxPG_IPAM_DECL inline</span>
00050 <span class="preprocessor"></span>
00089 <span class="comment">// BM_MANAGER</span>
<a name="l00090"></a><a class="code" href="classwxPropertyGridManager.htm">00090</a> <span class="keyword">class </span>WXDLLIMPEXP_PG wxPropertyGridManager : <span class="keyword">public</span> wxPanel, <span class="keyword">public</span> <a class="code" href="classwxPropertyContainerMethods.htm">wxPropertyContainerMethods</a>
00091 {
00092         DECLARE_CLASS(wxPropertyGridManager)
00093 
00094 <span class="keyword">public</span>:
00095 
00099     wxPropertyGridManager();
00100 
00105     wxPropertyGridManager(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
00106                       <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
00107                       <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00108                       <span class="keywordtype">long</span> style = <a class="code" href="group__wndflags.htm#ga18">wxPGMAN_DEFAULT_STYLE</a>,
00109                       <span class="keyword">const</span> wxChar* name = wxPropertyGridManagerNameStr);
00110 
00112     <span class="keyword">virtual</span> ~wxPropertyGridManager();
00113 
<a name="l00131"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera0">00131</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> AddPage ( <span class="keyword">const</span> wxString&amp; label = wxEmptyString, <span class="keyword">const</span> wxBitmap&amp; bmp = wxNullBitmap )
00132     {
00133         <span class="keywordflow">return</span> InsertPage (-1,label,bmp);
00134     }
00135 
<a name="l00137"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera8">00137</a>     <span class="keyword">inline</span> wxPGId AppendCategory ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name = wxPG_LABEL )
00138     {
00139         wxASSERT ( m_targetState );
00140         <span class="keywordflow">return</span> m_targetState-&gt;Append ( <span class="keyword">new</span> <a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>(label,name) );
00141     }
00142 
<a name="l00144"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera7">00144</a>     <span class="keyword">inline</span> wxPGId Append ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00145     {
00146         wxASSERT ( m_targetState );
00147         <span class="keywordflow">return</span> m_targetState-&gt;Append(property);
00148     }
00149 
00150     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keyword">const</span> wxString&amp; value = wxEmptyString )
00151     {
00152         wxASSERT ( m_targetState );
00153         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxStringProperty(label,name,value) );
00154     }
00155 
00156     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">int</span> value )
00157     {
00158         wxASSERT ( m_targetState );
00159         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxIntProperty(label,name,value) );
00160     }
00161 
00162     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">double</span> value )
00163     {
00164         wxASSERT ( m_targetState );
00165         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxFloatProperty(label,name,value) );
00166     }
00167 
00168     <span class="keyword">inline</span> wxPGId Append ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; name, <span class="keywordtype">bool</span> value )
00169     {
00170         wxASSERT ( m_targetState );
00171         <span class="keywordflow">return</span> m_targetState-&gt;Append ( wxBoolProperty(label,name,value) );
00172     }
00173 
<a name="l00175"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera10">00175</a>     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGId <span class="keywordtype">id</span>, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00176     {
00177         wxASSERT ( m_targetState );
00178         <span class="keywordflow">return</span> m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)(<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)<span class="keywordtype">id</span>,-1,property);
00179     }
00180 
<a name="l00182"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera9">00182</a>     <span class="keyword">inline</span> wxPGId AppendIn ( wxPGNameStr name, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00183     {
00184         wxASSERT ( m_targetState );
00185         <span class="keywordflow">return</span> m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)(<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)m_targetState-&gt;BaseGetPropertyByName(name),-1,property);
00186     }
00187     
00188     <span class="keywordtype">void</span> ClearModifiedStatus ( wxPGId <span class="keywordtype">id</span> );
00189 
00190     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearModifiedStatus ()
00191     {
00192         m_propGrid.ClearModifiedStatus();
00193     }
00194 
00197     <span class="keywordtype">void</span> ClearPage( <span class="keywordtype">int</span> page );
00198 
00199     <span class="keywordtype">bool</span> ClearPropertyValue( wxPGId <span class="keywordtype">id</span> );
00200     <span class="keywordtype">bool</span> ClearPropertyValue( wxPGNameStr name );
00201     
00203     <span class="keywordtype">bool</span> Collapse ( wxPGId <span class="keywordtype">id</span> );
00204     <span class="keywordtype">bool</span> Collapse ( wxPGNameStr name );
00205 
<a name="l00207"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera19">00207</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> CollapseAll ()
00208     {
00209         m_targetState-&gt;ExpandAll(0);
00210     }
00211 
00215     <span class="keywordtype">void</span> Compact ( <span class="keywordtype">bool</span> compact );
00216 
00222     <span class="keywordtype">bool</span> Create(wxWindow *parent, wxWindowID <span class="keywordtype">id</span> = -1,
00223                 <span class="keyword">const</span> wxPoint&amp; pos = wxDefaultPosition,
00224                 <span class="keyword">const</span> wxSize&amp; size = wxDefaultSize,
00225                 <span class="keywordtype">long</span> style = wxPGMAN_DEFAULT_STYLE,
00226                 <span class="keyword">const</span> wxChar* name = wxPropertyGridManagerNameStr);
00227 
00229     <span class="keywordtype">void</span> Delete ( wxPGId <span class="keywordtype">id</span> );
00230     <span class="keywordtype">void</span> Delete ( wxPGNameStr name );
00231 
<a name="l00233"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera25">00233</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGId <span class="keywordtype">id</span> ) { <span class="keywordflow">return</span> EnableProperty (<span class="keywordtype">id</span>,FALSE); }
00234 
<a name="l00236"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera24">00236</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> DisableProperty ( wxPGNameStr name ) { <span class="keywordflow">return</span> EnableProperty (name,FALSE); }
00237 
<a name="l00241"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera26">00241</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnableCategories ( <span class="keywordtype">bool</span> enable )
00242     {
00243         <span class="keywordtype">long</span> fl = m_windowStyle | <a class="code" href="group__wndflags.htm#ga1">wxPG_HIDE_CATEGORIES</a>;
00244         <span class="keywordflow">if</span> ( enable ) fl = m_windowStyle &amp; ~(<a class="code" href="group__wndflags.htm#ga1">wxPG_HIDE_CATEGORIES</a>);
00245         SetWindowStyleFlag(m_windowStyle);
00246         <span class="keywordflow">return</span> TRUE;
00247     }
00248 
00250     <span class="keywordtype">bool</span> EnableProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> enable = TRUE );
00251     <span class="keywordtype">bool</span> EnableProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> enable = TRUE );
00252 
<a name="l00256"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera30">00256</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span> )
00257     {
00258         <span class="keywordflow">return</span> EnsureVisible(<span class="keywordtype">id</span>,((<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)<span class="keywordtype">id</span>)-&gt;GetParentState());
00259     }
00260 
<a name="l00264"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera29">00264</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> EnsureVisible ( wxPGNameStr name )
00265     {
00266         <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* pstate;
00267         wxPGId <span class="keywordtype">id</span> = GetPropertyByName2(name,&amp;pstate);
00268         <span class="keywordflow">return</span> EnsureVisible(<span class="keywordtype">id</span>,pstate);
00269     }
00270 
00272     <span class="keywordtype">bool</span> Expand ( wxPGId <span class="keywordtype">id</span> );
00273     <span class="keywordtype">bool</span> Expand ( wxPGNameStr name );
00274 
<a name="l00276"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera33">00276</a>     <span class="keywordtype">void</span> ExpandAll ()
00277     {
00278         m_targetState-&gt;ExpandAll(1);
00279     }
00280 
00282     <span class="comment">/*wxColour GetCategoryColour ( wxPGId id )</span>
00283 <span class="comment">    {</span>
00284 <span class="comment">        return wxPropertyGrid::GetCategoryColour(id);</span>
00285 <span class="comment">    }</span>
00286 <span class="comment">    wxColour GetCategoryColour ( wxPGNameStr name ) { return GetCategoryColour(GetPropertyByName(name)); }*/</span>
00287 
<a name="l00289"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera37">00289</a>     <span class="keyword">inline</span> size_t GetChildrenCount ()
00290     {
00291         <span class="keywordflow">return</span> GetChildrenCount( wxPGId(m_propGrid.m_pState-&gt;m_properties) );
00292     }
00293 
00295     size_t GetChildrenCount ( <span class="keywordtype">int</span> page_index );
00296 
<a name="l00298"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera35">00298</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00299 <span class="keyword">    </span>{
00300         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00301         <span class="keywordflow">return</span> ((<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*)<span class="keywordtype">id</span>)-&gt;GetChildCount();
00302     }
00303 
<a name="l00305"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera34">00305</a>     <span class="keyword">inline</span> size_t GetChildrenCount ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetChildrenCount( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) ); }
00306 
<a name="l00308"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera38">00308</a>     <span class="keyword">inline</span> wxPGId GetFirst ()<span class="keyword"> const</span>
00309 <span class="keyword">    </span>{
00310         <span class="keywordflow">return</span> m_targetState-&gt;GetFirst();
00311     }
00312 
<a name="l00314"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera39">00314</a>     <span class="keyword">inline</span> wxPGId GetFirstCategory ()<span class="keyword"> const</span>
00315 <span class="keyword">    </span>{
00316         <span class="keywordflow">return</span> m_targetState-&gt;GetFirstCategory ();
00317     }
00318 
<a name="l00320"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera40">00320</a>     <span class="keyword">inline</span> wxPGId GetFirstProperty()<span class="keyword"> const</span>
00321 <span class="keyword">    </span>{
00322         <span class="keywordflow">return</span> m_targetState-&gt;GetFirstProperty();
00323     }
00324 
<a name="l00329"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera41">00329</a>     <span class="keyword">inline</span> <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>* GetGrid()
00330     {
00331         <span class="comment">// FIXME</span>
00332         <span class="comment">//wxASSERT( m_iFlags &amp; wxPG_FL_INITIALIZED );</span>
00333         <span class="keywordflow">return</span> &amp;m_propGrid;
00334     };
00335 
<a name="l00340"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera43">00340</a>     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGId parent )
00341     {
00342         wxASSERT ( wxPGIdIsOk(parent) );
00343         <a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>&amp; p = (<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>&amp;)parent.GetProperty();
00344         <span class="keywordflow">if</span> ( !p.<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa28">GetParentingType</a>() || !p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa15">GetCount</a>() ) <span class="keywordflow">return</span> wxPGId();
00345         <span class="keywordflow">return</span> wxPGId(p.<a class="code" href="classwxPGPropertyWithChildren.htm#wxPropertyCategoryClassa43">Last</a>());
00346     }
00347     <span class="keyword">inline</span> wxPGId GetLastChild ( wxPGNameStr name ) { <span class="keywordflow">return</span> GetLastChild ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) ); }
00348     
<a name="l00350"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera44">00350</a>     <span class="keyword">inline</span> wxPGId GetNextCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00351 <span class="keyword">    </span>{
00352         wxASSERT ( m_targetState );
00353         <span class="keywordflow">return</span> m_targetState-&gt;GetNextCategory(<span class="keywordtype">id</span>);
00354     }
00355 
<a name="l00359"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera45">00359</a>     <span class="keyword">inline</span> wxPGId GetNextProperty ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00360 <span class="keyword">    </span>{
00361         wxASSERT ( m_targetState );
00362         <span class="keywordflow">return</span> m_targetState-&gt;GetNextProperty(<span class="keywordtype">id</span>);
00363     }
00364 
00366     <span class="keywordtype">int</span> GetPageByName ( <span class="keyword">const</span> wxChar* name ) <span class="keyword">const</span>;
00367 
00371     <span class="keywordtype">int</span> GetPageByState( <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* pstate ) <span class="keyword">const</span>;
00372 
<a name="l00374"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera50">00374</a>     size_t GetPageCount ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_arrPages.GetCount(); }
00375 
00377     <span class="keyword">const</span> wxString&amp; GetPageName ( <span class="keywordtype">int</span> index ) <span class="keyword">const</span>;
00378 
<a name="l00380"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera52">00380</a>     <span class="keyword">inline</span> wxPGId GetPrevProperty ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00381 <span class="keyword">    </span>{
00382         <span class="keywordflow">return</span> m_targetState-&gt;GetPrevProperty(<span class="keywordtype">id</span>);
00383     }
00384 
<a name="l00386"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera54">00386</a>     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGId <span class="keywordtype">id</span> )
00387     {
00388         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<span class="keywordtype">id</span>);
00389     }
00390     <span class="keyword">inline</span> wxPGId GetPrevSibling ( wxPGNameStr name )
00391     {
00392         <span class="keywordflow">return</span> wxPropertyGridState::GetPrevSibling(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name));
00393     }
00394 
00400     wxPGId GetPropertyByLabel ( <span class="keyword">const</span> wxString&amp; name,
00401         <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>** ppState = (<a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>**)NULL ) <span class="keyword">const</span>;
00402 
<a name="l00406"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera58">00406</a>     <span class="keyword">inline</span> wxPGId GetPropertyCategory ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00407 <span class="keyword">    </span>{
00408         <span class="keywordflow">return</span> m_propGrid.GetPropertyCategory(<span class="keywordtype">id</span>);
00409     }
00410     wxPGId GetPropertyCategory ( wxPGNameStr name )<span class="keyword"> const</span>
00411 <span class="keyword">    </span>{
00412         <span class="keywordflow">return</span> m_propGrid.GetPropertyCategory(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name));
00413     }
00414 
<a name="l00416"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera66">00416</a>     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00417 <span class="keyword">    </span>{
00418         <span class="keywordflow">return</span> m_propGrid.GetPropertyColour(<span class="keywordtype">id</span>);
00419     }
00420     <span class="keyword">inline</span> wxColour GetPropertyColour ( wxPGNameStr name )<span class="keyword"> const</span>
00421 <span class="keyword">    </span>{
00422         <span class="keywordflow">return</span> m_propGrid.GetPropertyColour(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name));
00423     }
00424 
<a name="l00426"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera68">00426</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida87">GetPropertyHelpString</a> ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00427 <span class="keyword">    </span>{
00428         wxASSERT ( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00429         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetHelpString();
00430     }
00431 
<a name="l00433"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera67">00433</a>     <span class="keyword">inline</span> <span class="keyword">const</span> wxString&amp; <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida87">GetPropertyHelpString</a> ( wxPGNameStr name )<span class="keyword"> const</span>
00434 <span class="keyword">    </span>{
00435         <span class="keywordflow">return</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida87">GetPropertyHelpString</a>(GetPropertyByNameWithAssert(name));
00436     }
00437 
00438 <span class="preprocessor">#if wxPG_USE_VALIDATORS</span>
00439 <span class="preprocessor"></span>
00442     <span class="keyword">inline</span> wxPropertyValidator&amp; GetPropertyValidator ( wxPGId <span class="keywordtype">id</span> )
00443     {
00444         wxASSERT( wxPGIdIsOk(<span class="keywordtype">id</span>) );
00445         <span class="keywordflow">return</span> wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetValidator();
00446     }
00447     <span class="keyword">inline</span> wxPropertyValidator&amp; GetPropertyValidator ( wxPGNameStr name )
00448     {
00449         <span class="keywordflow">return</span> GetPropertyValidator(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name));
00450     }
00451 <span class="preprocessor">#endif</span>
00452 <span class="preprocessor"></span>
<a name="l00462"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera90">00462</a>     wxVariant GetPropertyValues ( <span class="keyword">const</span> wxString&amp; listname = wxEmptyString,
00463         wxPGId baseparent = wxPGId(), <span class="keywordtype">long</span> flags = 0 )<span class="keyword"> const</span>
00464 <span class="keyword">    </span>{
00465         <span class="keywordflow">return</span> m_targetState-&gt;GetPropertyValues(listname,baseparent,flags);
00466     }
00467 
<a name="l00471"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera93">00471</a>     wxPGId GetRoot ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> wxPGIdGen(m_targetState-&gt;m_properties); }
00472 
<a name="l00474"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera94">00474</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelectedPage ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selPage; }
00475 
<a name="l00477"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera95">00477</a>     <span class="keyword">inline</span> wxPGId GetSelectedProperty ()<span class="keyword"> const</span>
00478 <span class="keyword">    </span>{
00479         <span class="keywordflow">return</span> m_propGrid.GetSelection();
00480     }
00481 
<a name="l00483"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera96">00483</a>     <span class="keyword">inline</span> <span class="keywordtype">int</span> GetSelection ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_selPage; }
00484 
<a name="l00487"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera98">00487</a>     <span class="keyword">inline</span> wxToolBar* GetToolBar()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_pToolbar; }
00488 
<a name="l00489"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera99">00489</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGride23">InitAllTypeHandlers</a> ()
00490     {
00491         <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGride23">wxPropertyGrid::InitAllTypeHandlers</a>();
00492     }
00493 
<a name="l00495"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera101">00495</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> index, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00496     {
00497         wxASSERT ( m_targetState );
00498         wxPGId res_id = m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)wxPGIdToPtr(<span class="keywordtype">id</span>),index,property);
00499         <span class="keywordflow">if</span> ( m_targetState == m_propGrid.m_pState )
00500             m_propGrid.DrawItems ( property, (<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*) NULL );
00501         <span class="keywordflow">return</span> res_id;
00502     }
00503 
<a name="l00505"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera100">00505</a>     <span class="keyword">inline</span> wxPGId Insert ( wxPGNameStr name, <span class="keywordtype">int</span> index, <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* property )
00506     {
00507         wxASSERT ( m_targetState );
00508         wxPGId res_id = m_targetState-&gt;Insert((<a class="code" href="classwxPGPropertyWithChildren.htm">wxPGPropertyWithChildren</a>*)wxPGIdToPtr(m_targetState-&gt;BaseGetPropertyByName(name)),index,property);
00509         <span class="keywordflow">if</span> ( m_targetState == m_propGrid.m_pState )
00510             m_propGrid.DrawItems ( property, (<a class="code" href="classwxPGProperty.htm">wxPGProperty</a>*) NULL );
00511         <span class="keywordflow">return</span> res_id;
00512     }
00513 
00529     <span class="keywordtype">int</span> InsertPage ( <span class="keywordtype">int</span> index, <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxBitmap&amp; bmp = wxNullBitmap );
00530 
00532     <span class="keywordtype">bool</span> IsAnyModified () <span class="keyword">const</span>;
00533 
<a name="l00535"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera104">00535</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> IsFrozen ()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> (m_propGrid.m_frozen&gt;0)?TRUE:FALSE; }
00536 
00538     <span class="keywordtype">bool</span> IsPageModified ( size_t index ) <span class="keyword">const</span>;
00539 
<a name="l00541"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera109">00541</a>     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida137">IsPropertyCategory</a> ( wxPGId <span class="keywordtype">id</span> )<span class="keyword"> const</span>
00542 <span class="keyword">    </span>{
00543         <span class="keywordflow">return</span> (wxPGIdToPtr(<span class="keywordtype">id</span>)-&gt;GetParentingType()&gt;0)?TRUE:FALSE;
00544     }
00545     <span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida137">IsPropertyCategory</a> ( wxPGNameStr name ) { <span class="keywordflow">return</span> <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGrida137">IsPropertyCategory</a>(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name)); }
00546 
00548     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> limit = TRUE );
00549     <span class="keywordtype">void</span> LimitPropertyEditing ( wxPGNameStr name, <span class="keywordtype">bool</span> limit = TRUE );
00550 
00551     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Refresh (<span class="keywordtype">bool</span> eraseBackground = <span class="keyword">true</span>,
00552                           <span class="keyword">const</span> wxRect* rect = (<span class="keyword">const</span> wxRect*) NULL);
00553 
00555     <span class="keywordtype">void</span> SelectPage ( <span class="keywordtype">int</span> index );
00556 
<a name="l00558"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera129">00558</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectPage ( <span class="keyword">const</span> wxChar* name )
00559     {
00560         SelectPage ( GetPageByName(name) );
00561     }
00562 
00564     <span class="keywordtype">void</span> SelectProperty ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> focus = FALSE );
00565     <span class="keyword">inline</span> <span class="keywordtype">void</span> SelectProperty ( wxPGNameStr name, <span class="keywordtype">bool</span> focus = FALSE )
00566     {
00567         SelectProperty(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name),focus);
00568     }
00569 
00572     <span class="keywordtype">void</span> SetDescription ( <span class="keyword">const</span> wxString&amp; label, <span class="keyword">const</span> wxString&amp; content );
00573 
<a name="l00576"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera134">00576</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGId <span class="keywordtype">id</span> )
00577     {
00578         <a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>* pc = (<a class="code" href="classwxPropertyCategoryClass.htm">wxPropertyCategoryClass</a>*)wxPGIdToPtr(<span class="keywordtype">id</span>);
00579 <span class="preprocessor">#ifdef __WXDEBUG__</span>
00580 <span class="preprocessor"></span>        <span class="keywordflow">if</span> ( pc ) wxASSERT ( pc-&gt;<a class="code" href="classwxPGProperty.htm#wxPropertyCategoryClassa28">GetParentingType</a>() &gt; 0 );
00581 <span class="preprocessor">#endif</span>
00582 <span class="preprocessor"></span>        m_targetState-&gt;m_currentCategory = pc;
00583     }
00584 
<a name="l00587"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera133">00587</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetCurrentCategory ( wxPGNameStr name )
00588     {
00589         SetCurrentCategory(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name));
00590     }
00591 
00593     <span class="keywordtype">void</span> SetDescBoxHeight ( <span class="keywordtype">int</span> ht, <span class="keywordtype">bool</span> refresh = TRUE );
00594 
<a name="l00599"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera135">00599</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetDefaultPriority( <span class="keywordtype">int</span> priority )
00600     {
00601         m_propGrid.SetDefaultPriority(priority);
00602     }
00603 
<a name="l00605"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera128">00605</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ResetDefaultPriority()
00606     {
00607         m_propGrid.ResetDefaultPriority();
00608     }
00609 
00612     <span class="keywordtype">void</span> SetPropertyLabel( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; newlabel );
00613     <span class="keywordtype">void</span> SetPropertyLabel( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; newlabel );
00614 
<a name="l00618"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera145">00618</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxColour&amp; col )
00619     {
00620         m_propGrid.SetPropertyColour ( <span class="keywordtype">id</span>, col );
00621     }
00622     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColour ( wxPGNameStr name, <span class="keyword">const</span> wxColour&amp; col )
00623     {
00624         m_propGrid.SetPropertyColour ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name), col );
00625     }
00626 
<a name="l00628"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera147">00628</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGId <span class="keywordtype">id</span> )
00629     {
00630         m_propGrid.SetColourIndex ( wxPGIdToPtr(<span class="keywordtype">id</span>), 0 );
00631     }
00632     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyColourToDefault ( wxPGNameStr name )
00633     {
00634         m_propGrid.SetColourIndex ( wxPGIdToPtr(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name)), 0 );
00635     }
00636 
00640     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> priority );
00641     <span class="keywordtype">void</span> SetPropertyPriority ( wxPGNameStr name, <span class="keywordtype">int</span> priority );
00642 
00643     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">long</span> value );
00644     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">int</span> value );
00645     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">double</span> value );
00646     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">bool</span> value );
00647     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxString&amp; value );
00648     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxArrayString&amp; value );
00649     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject* value );
00650     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keywordtype">void</span>* value );
00651     <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxVariant&amp; value );
00652     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">long</span> value );
00653     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">int</span> value );
00654     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">double</span> value );
00655     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">bool</span> value );
00656     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxString&amp; value );
00657     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxArrayString&amp; value );
00658     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject* value );
00659     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keywordtype">void</span>* value );
00660     <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxVariant&amp; value );
00661     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxPoint&amp;)
00662     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxSize&amp;)
00663     wxPG_IMPLEMENT_PGMAN_METHOD_NORET1(SetPropertyValue,<span class="keyword">const</span> wxArrayInt&amp;)
00664 
00665     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, wxObject&amp; value )
00666     {
00667         SetPropertyValue(<span class="keywordtype">id</span>,&amp;value);
00668     }
00669 
00670     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, wxObject&amp; value )
00671     {
00672         SetPropertyValue(name,&amp;value);
00673     }
00674 
00675     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGId <span class="keywordtype">id</span>, <span class="keyword">const</span> wxChar* value )
00676     {
00677         SetPropertyValue(<span class="keywordtype">id</span>,wxString(value));
00678     }
00679     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValue ( wxPGNameStr name, <span class="keyword">const</span> wxChar* value )
00680     {
00681         SetPropertyValue(name,wxString(value));
00682     }
00683 
00688     <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, wxPGId default_category )
00689     {
00690         m_targetState-&gt;SetPropertyValues(list,default_category);
00691     }
00692 
00693     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, wxPGId default_category )
00694     {
00695         SetPropertyValues (list.GetList(),default_category);
00696     }
00697     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxList&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
00698     {
00699         SetPropertyValues (list,<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(default_category));
00700     }
00701     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetPropertyValues ( <span class="keyword">const</span> wxVariant&amp; list, <span class="keyword">const</span> wxString&amp; default_category = wxEmptyString )
00702     {
00703         SetPropertyValues (list.GetList(),<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(default_category));
00704     }
00705 
00709     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGId <span class="keywordtype">id</span> );
00710     <span class="keywordtype">void</span> SetPropertyValueUnspecified ( wxPGNameStr name );
00711 
00713     <span class="comment">//inline void SetSelection ( int index ) { SelectPage(index); }</span>
00714 
<a name="l00716"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera173">00716</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetStringSelection ( <span class="keyword">const</span> wxChar* name )
00717     {
00718         SelectPage ( GetPageByName(name) );
00719     }
00720 
00725     <span class="keywordtype">void</span> SetTargetPage ( <span class="keywordtype">int</span> index );
00726 
<a name="l00731"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera174">00731</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> SetTargetPage ( <span class="keyword">const</span> wxChar* name )
00732     {
00733         SetTargetPage ( GetPageByName(name) );
00734     }
00735 
<a name="l00737"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera178">00737</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ()
00738     {
00739         m_propGrid.Sort(wxPGIdGen(m_targetState-&gt;m_properties));
00740     }
00741 
<a name="l00744"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera177">00744</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGId <span class="keywordtype">id</span> )
00745     {
00746         m_propGrid.Sort(<span class="keywordtype">id</span>);
00747     }
00748 
<a name="l00751"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera176">00751</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> Sort ( wxPGNameStr name )
00752     {
00753         m_propGrid.Sort ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name) );
00754     }
00755 
<a name="l00758"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera180">00758</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGId <span class="keywordtype">id</span> )
00759     {
00760         <span class="keywordtype">int</span> priority = wxPG_LOW;
00761         <span class="keywordflow">if</span> ( <a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera77">GetPropertyPriority</a>(<span class="keywordtype">id</span>) == wxPG_LOW )
00762             priority = wxPG_HIGH;
00763         SetPropertyPriority(<span class="keywordtype">id</span>,priority);
00764     }
00765 
<a name="l00768"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera179">00768</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> TogglePropertyPriority ( wxPGNameStr name )
00769     {
00770         TogglePropertyPriority(<a class="code" href="classwxPropertyContainerMethods.htm#wxPropertyGridManagera56">GetPropertyByName</a>(name));
00771     }
00772 
<a name="l00774"></a><a class="code" href="classwxPropertyGridManager.htm#wxPropertyGridManagera16">00774</a>     <span class="keyword">inline</span> <span class="keywordtype">void</span> ClearSelection ()
00775     {
00776         m_propGrid.ClearSelection ();
00777     }
00778 
00779 <span class="preprocessor">#ifdef _WX_WINDOW_H_BASE_</span>
00780 <span class="preprocessor"></span>
00781     <span class="comment">//</span>
00782     <span class="comment">// Overridden functions - no documentation required.</span>
00783     <span class="comment">//</span>
00784 
00785     <span class="keyword">virtual</span> wxSize DoGetBestSize() <span class="keyword">const</span>;
00786     <span class="keywordtype">void</span> SetId( wxWindowID winid );
00787 
00788     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Freeze();
00789     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Thaw();
00790     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetExtraStyle ( <span class="keywordtype">long</span> exStyle );
00791     <span class="keyword">virtual</span> <span class="keywordtype">bool</span> SetFont ( <span class="keyword">const</span> wxFont&amp; font );
00792     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWindowStyleFlag ( <span class="keywordtype">long</span> style );
00793 
00794     <span class="comment">//</span>
00795     <span class="comment">// Event handlers</span>
00796     <span class="comment">//</span>
00797     <span class="keywordtype">void</span> OnMouseMove ( wxMouseEvent &amp;event );
00798     <span class="keywordtype">void</span> OnMouseClick ( wxMouseEvent &amp;event );
00799     <span class="keywordtype">void</span> OnMouseUp ( wxMouseEvent &amp;event );
00800     <span class="keywordtype">void</span> OnMouseEntry ( wxMouseEvent &amp;event );
00801 
00802     <span class="keywordtype">void</span> OnPaint ( wxPaintEvent &amp;event );
00803 
00804     <span class="keywordtype">void</span> OnToolbarClick ( wxCommandEvent &amp;event );
00805     <span class="keywordtype">void</span> OnResize ( wxSizeEvent&amp; event );
00806     <span class="keywordtype">void</span> OnCompactorClick ( wxCommandEvent&amp; event );
00807     <span class="keywordtype">void</span> OnPropertyGridSelect ( <a class="code" href="classwxPropertyGridEvent.htm">wxPropertyGridEvent</a>&amp; event );
00808 
00809 <span class="keyword">protected</span>:
00810 
00811     <a class="code" href="classwxPropertyGrid.htm">wxPropertyGrid</a>  m_propGrid;
00812 
00813     wxArrayPtrVoid  m_arrPages;
00814 
00815 <span class="preprocessor">#if wxUSE_TOOLBAR</span>
00816 <span class="preprocessor"></span>    wxToolBar*      m_pToolbar;
00817     <span class="comment">//wxBitmap*       m_pBmpCatMode;</span>
00818     <span class="comment">//wxBitmap*       m_pBmpNonCatMode;</span>
00819 <span class="preprocessor">#endif</span>
00820 <span class="preprocessor"></span>    wxStaticText*   m_pTxtHelpCaption;
00821     wxStaticText*   m_pTxtHelpContent;
00822     wxButton*       m_pButCompactor;
00823 
00824     <span class="comment">//wxWindow*       m_splitterPrevDrawnWin;</span>
00825 
00826     <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>*    m_targetState;
00827 
00828     <span class="keywordtype">long</span>            m_iFlags;
00829 
00830     <span class="comment">// Selected page index.</span>
00831     <span class="keywordtype">int</span>             m_selPage;
00832 
00833     <span class="keywordtype">int</span>             m_width;
00834 
00835     <span class="keywordtype">int</span>             m_height;
00836 
00837     <span class="keywordtype">int</span>             m_extraHeight;
00838 
00839     <span class="keywordtype">int</span>             m_splitterY;
00840 
00841     <span class="keywordtype">int</span>             m_splitterHeight;
00842 
00843     <span class="keywordtype">int</span>             m_nextTbInd;
00844 
00845     <span class="keywordtype">int</span>             m_dragOffset;
00846 
00847     wxCursor        m_cursorSizeNS;
00848 
00849     <span class="keywordtype">int</span>             m_nextDescBoxSize;
00850 
00851     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_dragStatus;
00852 
00853     <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span>   m_onSplitter;
00854 
00855     <span class="keywordtype">bool</span> EnsureVisible ( wxPGId <span class="keywordtype">id</span>, <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>* parent_state );
00856 
00857     <span class="keyword">virtual</span> wxPGId DoGetPropertyByName ( wxPGNameStr name ) <span class="keyword">const</span>;
00858 
00859     wxPGId GetPropertyByName2 ( wxPGNameStr name, <a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>** ppState = (<a class="code" href="classwxPropertyGridState.htm">wxPropertyGridState</a>**) NULL ) <span class="keyword">const</span>;
00860 
00861     <span class="comment">// Sets some members to defaults.</span>
00862         <span class="keywordtype">void</span> Init1();
00863 
00864     <span class="comment">// Initializes some members.</span>
00865         <span class="keywordtype">void</span> Init2( <span class="keywordtype">int</span> style );
00866 
00870     <span class="keywordtype">void</span> RecalculatePositions ( <span class="keywordtype">int</span> width, <span class="keywordtype">int</span> height );
00871 
00873     <span class="keywordtype">void</span> RecreateControls ();
00874 
00875     <span class="keywordtype">void</span> RefreshHelpBox ( <span class="keywordtype">int</span> new_splittery, <span class="keywordtype">int</span> new_width, <span class="keywordtype">int</span> new_height );
00876 
00877     <span class="keywordtype">void</span> RepaintSplitter ( <span class="keywordtype">int</span> new_splittery, <span class="keywordtype">int</span> new_width, <span class="keywordtype">int</span> new_height, <span class="keywordtype">bool</span> desc_too );
00878 
00879     <span class="keywordtype">void</span> SetDescribedProperty ( <a class="code" href="classwxPGProperty.htm">wxPGProperty</a>* p );
00880 
00881     <span class="keyword">inline</span> wxPropertyGridPageData* GetPage ( size_t ind )<span class="keyword"> const</span>
00882 <span class="keyword">    </span>{
00883         <span class="keywordflow">return</span> (wxPropertyGridPageData*)m_arrPages.Item(ind);
00884     }
00885 
00886 <span class="preprocessor">#endif</span>
00887 <span class="preprocessor"></span>
00888 <span class="keyword">private</span>:
00889     DECLARE_EVENT_TABLE()
00890 };
00891 
00892 <span class="comment">// -----------------------------------------------------------------------</span>
00893 
00894 <span class="preprocessor">#ifndef __wxPG_SOURCE_FILE__</span>
00895 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_IPAM_DECL</span>
00896 <span class="preprocessor"></span><span class="preprocessor"># undef wxPG_IMPLEMENT_PGMAN_METHOD_NORET1</span>
00897 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
00898 <span class="preprocessor"></span>
00899 <span class="comment">// -----------------------------------------------------------------------</span>
00900 
00901 <span class="preprocessor">#endif // _WX_PROPGRID_MANAGER_H_</span>
</pre></div><hr size="1"><address style="align: right;"><small>Generated on Mon Jun 6 19:12:50 2005 for wxPropertyGrid by
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border=0 > 
</a>1.3.6 </small></address>
</body>
</html>
